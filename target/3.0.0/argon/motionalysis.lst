
e:/IoT/motionalysis/target/3.0.0/argon/motionalysis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00005fc0  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d9fe0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000090  2003e04c  000d9fe4  0001e04c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000714  2003e0dc  2003e0dc  0002e0dc  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000da074  000da074  0002a074  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000da09c  000da09c  0002a09c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   001bf1ed  00000000  00000000  0002a0a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0001a172  00000000  00000000  001e928d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0003c207  00000000  00000000  002033ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00003308  00000000  00000000  0023f606  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 0000a808  00000000  00000000  0024290e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003c65e  00000000  00000000  0024d116  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000440e2  00000000  00000000  00289774  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00131d46  00000000  00000000  002cd856  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00009124  00000000  00000000  003ff59c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
   d4026:	b508      	push	{r3, lr}
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f005 fa01 	bl	d9438 <memcpy>
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f005 fa23 	bl	d9488 <memset>
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e04c 	.word	0x2003e04c
   d404c:	000d9fe4 	.word	0x000d9fe4
   d4050:	2003e0dc 	.word	0x2003e0dc
   d4054:	2003e0dc 	.word	0x2003e0dc
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
   d405c:	b570      	push	{r4, r5, r6, lr}
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
   d4062:	f003 fcad 	bl	d79c0 <module_user_init_hook>
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
   d4070:	bd70      	pop	{r4, r5, r6, pc}
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000d9fb0 	.word	0x000d9fb0
   d4080:	000d9fd4 	.word	0x000d9fd4

000d4084 <module_user_setup>:
   d4084:	f000 b8a0 	b.w	d41c8 <setup>

000d4088 <module_user_loop>:
   d4088:	b508      	push	{r3, lr}
   d408a:	f000 f951 	bl	d4330 <loop>
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4092:	f003 bc57 	b.w	d7944 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f001 bced 	b.w	d5a74 <malloc>

000d409a <_Znaj>:
   d409a:	f001 bceb 	b.w	d5a74 <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 bcf1 	b.w	d5a84 <free>

000d40a2 <__cxa_guard_acquire>:
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr

000d40b2 <_ZN15Adafruit_LIS3DHD1Ev>:
  LIS3DH_INT1_SRC_YL = 0x04,
  LIS3DH_INT1_SRC_XH = 0x02,
  LIS3DH_INT1_SRC_XL = 0x01
} list3dh_ctrl_int2_src_t;

class Adafruit_LIS3DH : public Adafruit_Sensor {
   d40b2:	4770      	bx	lr

000d40b4 <_ZN15http_response_tD1Ev>:
 */
typedef struct
{
  int status;
  String body;
} http_response_t;
   d40b4:	b510      	push	{r4, lr}
   d40b6:	4604      	mov	r4, r0
   d40b8:	3004      	adds	r0, #4
   d40ba:	f001 ff3c 	bl	d5f36 <_ZN6StringD1Ev>
   d40be:	4620      	mov	r0, r4
   d40c0:	bd10      	pop	{r4, pc}

000d40c2 <_ZN14http_request_tD1Ev>:
} http_request_t;
   d40c2:	b510      	push	{r4, lr}
   d40c4:	4604      	mov	r4, r0
   d40c6:	303c      	adds	r0, #60	; 0x3c
   d40c8:	f001 ff35 	bl	d5f36 <_ZN6StringD1Ev>
   d40cc:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d40d0:	f001 ff31 	bl	d5f36 <_ZN6StringD1Ev>
   d40d4:	4620      	mov	r0, r4
   d40d6:	f001 ff2e 	bl	d5f36 <_ZN6StringD1Ev>
   d40da:	4620      	mov	r0, r4
   d40dc:	bd10      	pop	{r4, pc}
	...

000d40e0 <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv>:
  }

  count++;
}

void connectCallback(const BlePeerDevice& peer, void* context){
   d40e0:	b508      	push	{r3, lr}
  Serial.println("connected");
   d40e2:	f003 fd9d 	bl	d7c20 <_Z16_fetch_usbserialv>
   d40e6:	4904      	ldr	r1, [pc, #16]	; (d40f8 <_Z15connectCallbackRKN8particle13BlePeerDeviceEPv+0x18>)
   d40e8:	f003 fa95 	bl	d7616 <_ZN5Print7printlnEPKc>
  digitalWrite(D7, HIGH);
}
   d40ec:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  digitalWrite(D7, HIGH);
   d40f0:	2101      	movs	r1, #1
   d40f2:	2007      	movs	r0, #7
   d40f4:	f004 badb 	b.w	d86ae <digitalWrite>
   d40f8:	000d96a3 	.word	0x000d96a3

000d40fc <_Z18disconnectCallbackRKN8particle13BlePeerDeviceEPv>:

void disconnectCallback(const BlePeerDevice& peer, void* context){
   d40fc:	b508      	push	{r3, lr}
  Serial.println("disconnected");
   d40fe:	f003 fd8f 	bl	d7c20 <_Z16_fetch_usbserialv>
   d4102:	4904      	ldr	r1, [pc, #16]	; (d4114 <_Z18disconnectCallbackRKN8particle13BlePeerDeviceEPv+0x18>)
   d4104:	f003 fa87 	bl	d7616 <_ZN5Print7printlnEPKc>
  digitalWrite(D7, LOW);
   d4108:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  digitalWrite(D7, LOW);
   d410c:	2100      	movs	r1, #0
   d410e:	2007      	movs	r0, #7
   d4110:	f004 bacd 	b.w	d86ae <digitalWrite>
   d4114:	000d96a0 	.word	0x000d96a0

000d4118 <_ZN8particle24SystemSleepConfigurationD1Ev>:
        config.config_.wakeup_sources = nullptr;
        return *this;
    }

    // Destructor
    ~SystemSleepConfiguration() {
   d4118:	b538      	push	{r3, r4, r5, lr}
   d411a:	4604      	mov	r4, r0
        // Free memory
        auto wakeupSource = config_.wakeup_sources;
   d411c:	6900      	ldr	r0, [r0, #16]
        while (wakeupSource) {
   d411e:	b128      	cbz	r0, d412c <_ZN8particle24SystemSleepConfigurationD1Ev+0x14>
            auto next = wakeupSource->next;
   d4120:	6885      	ldr	r5, [r0, #8]
            delete wakeupSource;
   d4122:	210c      	movs	r1, #12
   d4124:	f004 fb35 	bl	d8792 <_ZdlPvj>
            wakeupSource = next;
   d4128:	4628      	mov	r0, r5
        while (wakeupSource) {
   d412a:	e7f8      	b.n	d411e <_ZN8particle24SystemSleepConfigurationD1Ev+0x6>
        }
    }
   d412c:	4620      	mov	r0, r4
   d412e:	bd38      	pop	{r3, r4, r5, pc}

000d4130 <_ZN10HttpClientD1Ev>:

class HttpClient {
   d4130:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d4132:	6984      	ldr	r4, [r0, #24]
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d4134:	4b0a      	ldr	r3, [pc, #40]	; (d4160 <_ZN10HttpClientD1Ev+0x30>)
   d4136:	6003      	str	r3, [r0, #0]
   d4138:	4605      	mov	r5, r0
   d413a:	b17c      	cbz	r4, d415c <_ZN10HttpClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d413c:	6863      	ldr	r3, [r4, #4]
   d413e:	3b01      	subs	r3, #1
   d4140:	6063      	str	r3, [r4, #4]
   d4142:	b95b      	cbnz	r3, d415c <_ZN10HttpClientD1Ev+0x2c>
          _M_dispose();
   d4144:	6823      	ldr	r3, [r4, #0]
   d4146:	4620      	mov	r0, r4
   d4148:	689b      	ldr	r3, [r3, #8]
   d414a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d414c:	68a3      	ldr	r3, [r4, #8]
   d414e:	3b01      	subs	r3, #1
   d4150:	60a3      	str	r3, [r4, #8]
   d4152:	b91b      	cbnz	r3, d415c <_ZN10HttpClientD1Ev+0x2c>
            _M_destroy();
   d4154:	6823      	ldr	r3, [r4, #0]
   d4156:	4620      	mov	r0, r4
   d4158:	68db      	ldr	r3, [r3, #12]
   d415a:	4798      	blx	r3
   d415c:	4628      	mov	r0, r5
   d415e:	bd38      	pop	{r3, r4, r5, pc}
   d4160:	000d9cfc 	.word	0x000d9cfc

000d4164 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d4164:	b510      	push	{r4, lr}
   d4166:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d4168:	6800      	ldr	r0, [r0, #0]
   d416a:	b108      	cbz	r0, d4170 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d416c:	f001 fc8a 	bl	d5a84 <free>
class SystemClass {
   d4170:	4620      	mov	r0, r4
   d4172:	bd10      	pop	{r4, pc}

000d4174 <_ZN8particle24SystemSleepConfiguration8durationEm>:
            gpio(pins[i], mode);
        }
        return *this;
    }

    SystemSleepConfiguration& duration(system_tick_t ms) {
   d4174:	b570      	push	{r4, r5, r6, lr}
        if (valid_) {
   d4176:	7d03      	ldrb	r3, [r0, #20]
    SystemSleepConfiguration& duration(system_tick_t ms) {
   d4178:	4605      	mov	r5, r0
   d417a:	460e      	mov	r6, r1
        if (valid_) {
   d417c:	b1cb      	cbz	r3, d41b2 <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
        return wakeupSourceFeatured(type, config_->wakeup_sources);
   d417e:	6803      	ldr	r3, [r0, #0]
   d4180:	68db      	ldr	r3, [r3, #12]
        if (!start) {
   d4182:	b123      	cbz	r3, d418e <_ZN8particle24SystemSleepConfiguration8durationEm+0x1a>
            if (start->type == type) {
   d4184:	889a      	ldrh	r2, [r3, #4]
   d4186:	2a04      	cmp	r2, #4
   d4188:	d017      	beq.n	d41ba <_ZN8particle24SystemSleepConfiguration8durationEm+0x46>
            start = start->next;
   d418a:	689b      	ldr	r3, [r3, #8]
        while (start) {
   d418c:	e7f9      	b.n	d4182 <_ZN8particle24SystemSleepConfiguration8durationEm+0xe>
            if (wakeup) {
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
                return *this;
            }
            // Otherwise, configure RTC as wakeup source.
            auto wakeupSource = new(std::nothrow) hal_wakeup_source_rtc_t();
   d418e:	490c      	ldr	r1, [pc, #48]	; (d41c0 <_ZN8particle24SystemSleepConfiguration8durationEm+0x4c>)
   d4190:	2010      	movs	r0, #16
   d4192:	f004 fb00 	bl	d8796 <_ZnwjRKSt9nothrow_t>
   d4196:	4604      	mov	r4, r0
   d4198:	b168      	cbz	r0, d41b6 <_ZN8particle24SystemSleepConfiguration8durationEm+0x42>
   d419a:	2210      	movs	r2, #16
   d419c:	2100      	movs	r1, #0
   d419e:	f005 f973 	bl	d9488 <memset>
            if (!wakeupSource) {
                valid_ = false;
                return *this;
            }
            wakeupSource->base.size = sizeof(hal_wakeup_source_rtc_t);
   d41a2:	4b08      	ldr	r3, [pc, #32]	; (d41c4 <_ZN8particle24SystemSleepConfiguration8durationEm+0x50>)
   d41a4:	6023      	str	r3, [r4, #0]
            wakeupSource->base.version = HAL_SLEEP_VERSION;
            wakeupSource->base.type = HAL_WAKEUP_SOURCE_TYPE_RTC;
   d41a6:	2304      	movs	r3, #4
   d41a8:	80a3      	strh	r3, [r4, #4]
            wakeupSource->base.next = config_.wakeup_sources;
   d41aa:	692b      	ldr	r3, [r5, #16]
            wakeupSource->ms = ms;
            config_.wakeup_sources = reinterpret_cast<hal_wakeup_source_base_t*>(wakeupSource);
   d41ac:	612c      	str	r4, [r5, #16]
            wakeupSource->ms = ms;
   d41ae:	e9c4 3602 	strd	r3, r6, [r4, #8]
        }
        return *this;
    }
   d41b2:	4628      	mov	r0, r5
   d41b4:	bd70      	pop	{r4, r5, r6, pc}
                valid_ = false;
   d41b6:	7528      	strb	r0, [r5, #20]
                return *this;
   d41b8:	e7fb      	b.n	d41b2 <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
                reinterpret_cast<hal_wakeup_source_rtc_t*>(wakeup)->ms = ms;
   d41ba:	60de      	str	r6, [r3, #12]
                return *this;
   d41bc:	e7f9      	b.n	d41b2 <_ZN8particle24SystemSleepConfiguration8durationEm+0x3e>
   d41be:	bf00      	nop
   d41c0:	000d9db8 	.word	0x000d9db8
   d41c4:	00030010 	.word	0x00030010

000d41c8 <setup>:
void setup() {
   d41c8:	b510      	push	{r4, lr}
  wifiTimeLeft = wifiInterval;
   d41ca:	4b4b      	ldr	r3, [pc, #300]	; (d42f8 <setup+0x130>)
   d41cc:	681a      	ldr	r2, [r3, #0]
   d41ce:	4b4b      	ldr	r3, [pc, #300]	; (d42fc <setup+0x134>)
   d41d0:	601a      	str	r2, [r3, #0]
        if (valid_) {
   d41d2:	4b4b      	ldr	r3, [pc, #300]	; (d4300 <setup+0x138>)
   d41d4:	7d1a      	ldrb	r2, [r3, #20]
void setup() {
   d41d6:	b096      	sub	sp, #88	; 0x58
   d41d8:	b10a      	cbz	r2, d41de <setup+0x16>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d41da:	2202      	movs	r2, #2
   d41dc:	721a      	strb	r2, [r3, #8]
  config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(1000);
   d41de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   d41e2:	4847      	ldr	r0, [pc, #284]	; (d4300 <setup+0x138>)
  request.hostname = "trek.thewcl.com";
   d41e4:	4c47      	ldr	r4, [pc, #284]	; (d4304 <setup+0x13c>)
  config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(1000);
   d41e6:	f7ff ffc5 	bl	d4174 <_ZN8particle24SystemSleepConfiguration8durationEm>
  Serial.begin(9600);
   d41ea:	f003 fd19 	bl	d7c20 <_Z16_fetch_usbserialv>
   d41ee:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d41f2:	f003 fd09 	bl	d7c08 <_ZN9USBSerial5beginEl>
  lis.begin(0x18);
   d41f6:	2118      	movs	r1, #24
   d41f8:	4843      	ldr	r0, [pc, #268]	; (d4308 <setup+0x140>)
   d41fa:	f000 fd9c 	bl	d4d36 <_ZN15Adafruit_LIS3DH5beginEh>
  Wire.end();
   d41fe:	f004 fa9b 	bl	d8738 <_Z19__fetch_global_Wirev>
   d4202:	f003 fdf9 	bl	d7df8 <_ZN7TwoWire3endEv>
  lis.begin(I2C_ADDRESS);
   d4206:	2119      	movs	r1, #25
   d4208:	483f      	ldr	r0, [pc, #252]	; (d4308 <setup+0x140>)
   d420a:	f000 fd94 	bl	d4d36 <_ZN15Adafruit_LIS3DH5beginEh>
  lis.setRange(LIS3DH_RANGE_2_G);
   d420e:	483e      	ldr	r0, [pc, #248]	; (d4308 <setup+0x140>)
   d4210:	2100      	movs	r1, #0
   d4212:	f000 fd67 	bl	d4ce4 <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>
  lis.setDataRate(LIS3DH_DATARATE_400_HZ);
   d4216:	483c      	ldr	r0, [pc, #240]	; (d4308 <setup+0x140>)
   d4218:	2107      	movs	r1, #7
   d421a:	f000 fd7b 	bl	d4d14 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>
  pinMode(SDO_OUTPUT_PIN, OUTPUT);
   d421e:	2101      	movs	r1, #1
   d4220:	2008      	movs	r0, #8
   d4222:	f004 fa33 	bl	d868c <pinMode>
  digitalWrite(SDO_OUTPUT_PIN, HIGH);
   d4226:	2101      	movs	r1, #1
   d4228:	2008      	movs	r0, #8
   d422a:	f004 fa40 	bl	d86ae <digitalWrite>
  request.hostname = "trek.thewcl.com";
   d422e:	4937      	ldr	r1, [pc, #220]	; (d430c <setup+0x144>)
   d4230:	4620      	mov	r0, r4
   d4232:	f001 ff13 	bl	d605c <_ZN6StringaSEPKc>
  request.port = 3000;
   d4236:	f640 33b8 	movw	r3, #3000	; 0xbb8
  request.path = "/";
   d423a:	4935      	ldr	r1, [pc, #212]	; (d4310 <setup+0x148>)
  request.port = 3000;
   d423c:	63a3      	str	r3, [r4, #56]	; 0x38
  request.path = "/";
   d423e:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d4242:	f001 ff0b 	bl	d605c <_ZN6StringaSEPKc>
  BLE.on();
   d4246:	f002 fb9d 	bl	d6984 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d424a:	f002 fbe9 	bl	d6a20 <_ZNK8particle14BleLocalDevice2onEv>
  BLE.addCharacteristic(txCharacteristic);
   d424e:	f002 fb99 	bl	d6984 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4252:	4a30      	ldr	r2, [pc, #192]	; (d4314 <setup+0x14c>)
   d4254:	4601      	mov	r1, r0
   d4256:	a80d      	add	r0, sp, #52	; 0x34
   d4258:	f003 f880 	bl	d735c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d425c:	a80d      	add	r0, sp, #52	; 0x34
   d425e:	f002 fc78 	bl	d6b52 <_ZN8particle17BleCharacteristicD1Ev>
  BLE.addCharacteristic(rxCharacteristic);
   d4262:	f002 fb8f 	bl	d6984 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d4266:	4a2c      	ldr	r2, [pc, #176]	; (d4318 <setup+0x150>)
   d4268:	4601      	mov	r1, r0
   d426a:	a80d      	add	r0, sp, #52	; 0x34
   d426c:	f003 f876 	bl	d735c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>
   d4270:	a80d      	add	r0, sp, #52	; 0x34
   d4272:	f002 fc6e 	bl	d6b52 <_ZN8particle17BleCharacteristicD1Ev>
  BleAdvertisingData data;
   d4276:	a80d      	add	r0, sp, #52	; 0x34
   d4278:	f002 fa75 	bl	d6766 <_ZN8particle18BleAdvertisingDataC1Ev>
  data.appendServiceUUID(serviceUuid);
   d427c:	4927      	ldr	r1, [pc, #156]	; (d431c <setup+0x154>)
   d427e:	a803      	add	r0, sp, #12
   d4280:	f002 f974 	bl	d656c <_ZN8particle7BleUuidC1ERKS0_>
    size_t appendLocalName(const String& name);
    size_t appendAppearance(ble_sig_appearance_t appearance);

    template<typename T>
    size_t appendServiceUUID(T uuid, bool force = false) {
        BleUuid tempUUID(uuid);
   d4284:	a903      	add	r1, sp, #12
   d4286:	a808      	add	r0, sp, #32
   d4288:	f002 f970 	bl	d656c <_ZN8particle7BleUuidC1ERKS0_>
        if (tempUUID.type() == BleUuidType::SHORT) {
   d428c:	a808      	add	r0, sp, #32
   d428e:	f002 f9b3 	bl	d65f8 <_ZNK8particle7BleUuid4typeEv>
   d4292:	4604      	mov	r4, r0
            uint16_t uuid16 = tempUUID.shorted();
   d4294:	a808      	add	r0, sp, #32
        if (tempUUID.type() == BleUuidType::SHORT) {
   d4296:	bb34      	cbnz	r4, d42e6 <setup+0x11e>
            uint16_t uuid16 = tempUUID.shorted();
   d4298:	f002 f9cd 	bl	d6636 <_ZNK8particle7BleUuid7shortedEv>
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d429c:	9400      	str	r4, [sp, #0]
            uint16_t uuid16 = tempUUID.shorted();
   d429e:	f8ad 000a 	strh.w	r0, [sp, #10]
            return append(BleAdvertisingDataType::SERVICE_UUID_16BIT_COMPLETE, reinterpret_cast<const uint8_t*>(&uuid16), sizeof(uint16_t), force);
   d42a2:	2302      	movs	r3, #2
   d42a4:	f10d 020a 	add.w	r2, sp, #10
   d42a8:	2103      	movs	r1, #3
        }
        else {
            return append(BleAdvertisingDataType::SERVICE_UUID_128BIT_COMPLETE, tempUUID.rawBytes(), BLE_SIG_UUID_128BIT_LEN, force);
   d42aa:	a80d      	add	r0, sp, #52	; 0x34
   d42ac:	f002 fa50 	bl	d6750 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
  BLE.advertise(&data);
   d42b0:	f002 fb68 	bl	d6984 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42b4:	a90d      	add	r1, sp, #52	; 0x34
   d42b6:	2200      	movs	r2, #0
   d42b8:	f002 fbd2 	bl	d6a60 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>
  BLE.onConnected(connectCallback);
   d42bc:	f002 fb62 	bl	d6984 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42c0:	4917      	ldr	r1, [pc, #92]	; (d4320 <setup+0x158>)
   d42c2:	2200      	movs	r2, #0
   d42c4:	f002 ff40 	bl	d7148 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
  BLE.onDisconnected(disconnectCallback);
   d42c8:	f002 fb5c 	bl	d6984 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d42cc:	2200      	movs	r2, #0
   d42ce:	4915      	ldr	r1, [pc, #84]	; (d4324 <setup+0x15c>)
   d42d0:	f002 ff50 	bl	d7174 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>
  pinMode(D7, OUTPUT);
   d42d4:	2101      	movs	r1, #1
   d42d6:	2007      	movs	r0, #7
   d42d8:	f004 f9d8 	bl	d868c <pinMode>
  count = 0;
   d42dc:	4b12      	ldr	r3, [pc, #72]	; (d4328 <setup+0x160>)
   d42de:	2200      	movs	r2, #0
   d42e0:	601a      	str	r2, [r3, #0]
}
   d42e2:	b016      	add	sp, #88	; 0x58
   d42e4:	bd10      	pop	{r4, pc}
   d42e6:	f002 f9ab 	bl	d6640 <_ZNK8particle7BleUuid8rawBytesEv>
   d42ea:	2300      	movs	r3, #0
   d42ec:	9300      	str	r3, [sp, #0]
   d42ee:	4602      	mov	r2, r0
   d42f0:	2310      	movs	r3, #16
   d42f2:	2107      	movs	r1, #7
   d42f4:	e7d9      	b.n	d42aa <setup+0xe2>
   d42f6:	bf00      	nop
   d42f8:	2003e070 	.word	0x2003e070
   d42fc:	2003e628 	.word	0x2003e628
   d4300:	2003e12c 	.word	0x2003e12c
   d4304:	2003e5a8 	.word	0x2003e5a8
   d4308:	2003e56c 	.word	0x2003e56c
   d430c:	000d96ad 	.word	0x000d96ad
   d4310:	000d96bd 	.word	0x000d96bd
   d4314:	2003e610 	.word	0x2003e610
   d4318:	2003e608 	.word	0x2003e608
   d431c:	2003e0ec 	.word	0x2003e0ec
   d4320:	000d40e1 	.word	0x000d40e1
   d4324:	000d40fd 	.word	0x000d40fd
   d4328:	2003e144 	.word	0x2003e144
   d432c:	00000000 	.word	0x00000000

000d4330 <loop>:
void loop() {  
   d4330:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4334:	ed2d 8b04 	vpush	{d8-d9}
  if(bleInput){
   d4338:	4b33      	ldr	r3, [pc, #204]	; (d4408 <loop+0xd8>)
   d433a:	781b      	ldrb	r3, [r3, #0]
void loop() {  
   d433c:	b091      	sub	sp, #68	; 0x44
  if(bleInput){
   d433e:	2b00      	cmp	r3, #0
   d4340:	f000 81b2 	beq.w	d46a8 <loop+0x378>
    lis.read();
   d4344:	4c31      	ldr	r4, [pc, #196]	; (d440c <loop+0xdc>)
    isMoving = 0;
   d4346:	4d32      	ldr	r5, [pc, #200]	; (d4410 <loop+0xe0>)
   d4348:	f8df b0d4 	ldr.w	fp, [pc, #212]	; d4420 <loop+0xf0>
    lis.read();
   d434c:	4620      	mov	r0, r4
   d434e:	f000 fd43 	bl	d4dd8 <_ZN15Adafruit_LIS3DH4readEv>
    unixTime = Time.now();
   d4352:	f003 faa3 	bl	d789c <_ZN9TimeClass3nowEv>
	StringSumHelper(const char *p) : String(p) {}
	StringSumHelper(char c) : String(c) {}
	StringSumHelper(unsigned char num) : String(num) {}
	StringSumHelper(int num) : String(num) {}
	StringSumHelper(unsigned int num) : String(num) {}
	StringSumHelper(long num) : String(num) {}
   d4356:	220a      	movs	r2, #10
   d4358:	4601      	mov	r1, r0
   d435a:	a80c      	add	r0, sp, #48	; 0x30
   d435c:	f001 fea3 	bl	d60a6 <_ZN6StringC1Elh>
   d4360:	a90c      	add	r1, sp, #48	; 0x30
   d4362:	482c      	ldr	r0, [pc, #176]	; (d4414 <loop+0xe4>)
   d4364:	f001 fe72 	bl	d604c <_ZN6StringaSEO15StringSumHelper>
class StringSumHelper : public String
   d4368:	a80c      	add	r0, sp, #48	; 0x30
   d436a:	f001 fde4 	bl	d5f36 <_ZN6StringD1Ev>
    if(lis.x_g >= 0.8 && lis.x_g <= 1.2){
   d436e:	edd4 8a03 	vldr	s17, [r4, #12]
    isMoving = 0;
   d4372:	2300      	movs	r3, #0
   d4374:	602b      	str	r3, [r5, #0]
    if(lis.x_g >= 0.8 && lis.x_g <= 1.2){
   d4376:	ee18 0a90 	vmov	r0, s17
   d437a:	f004 fc89 	bl	d8c90 <__aeabi_f2d>
   d437e:	a31e      	add	r3, pc, #120	; (adr r3, d43f8 <loop+0xc8>)
   d4380:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4384:	4606      	mov	r6, r0
   d4386:	460f      	mov	r7, r1
   d4388:	f004 ff60 	bl	d924c <__aeabi_dcmpge>
   d438c:	46a2      	mov	sl, r4
   d438e:	9503      	str	r5, [sp, #12]
   d4390:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
   d4394:	2800      	cmp	r0, #0
   d4396:	d045      	beq.n	d4424 <loop+0xf4>
   d4398:	4b1f      	ldr	r3, [pc, #124]	; (d4418 <loop+0xe8>)
   d439a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   d439e:	4630      	mov	r0, r6
   d43a0:	4639      	mov	r1, r7
   d43a2:	f004 ff49 	bl	d9238 <__aeabi_dcmple>
   d43a6:	2800      	cmp	r0, #0
   d43a8:	d03c      	beq.n	d4424 <loop+0xf4>
      x = GRAVITY * (lis.x_g - 1);
   d43aa:	ee78 7ac8 	vsub.f32	s15, s17, s16
   d43ae:	6925      	ldr	r5, [r4, #16]
   d43b0:	6964      	ldr	r4, [r4, #20]
   d43b2:	ee17 0a90 	vmov	r0, s15
   d43b6:	f004 fc6b 	bl	d8c90 <__aeabi_f2d>
   d43ba:	a311      	add	r3, pc, #68	; (adr r3, d4400 <loop+0xd0>)
   d43bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d43c0:	f004 fcbe 	bl	d8d40 <__aeabi_dmul>
   d43c4:	f004 ffb4 	bl	d9330 <__aeabi_d2f>
   d43c8:	f8cb 0000 	str.w	r0, [fp]
      y = GRAVITY * lis.y_g;
   d43cc:	4628      	mov	r0, r5
   d43ce:	f004 fc5f 	bl	d8c90 <__aeabi_f2d>
   d43d2:	a30b      	add	r3, pc, #44	; (adr r3, d4400 <loop+0xd0>)
   d43d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d43d8:	f004 fcb2 	bl	d8d40 <__aeabi_dmul>
   d43dc:	f004 ffa8 	bl	d9330 <__aeabi_d2f>
   d43e0:	4b0e      	ldr	r3, [pc, #56]	; (d441c <loop+0xec>)
   d43e2:	6018      	str	r0, [r3, #0]
      z = GRAVITY * lis.z_g;
   d43e4:	4620      	mov	r0, r4
      z = GRAVITY * (lis.z_g - 1);
   d43e6:	f004 fc53 	bl	d8c90 <__aeabi_f2d>
   d43ea:	a305      	add	r3, pc, #20	; (adr r3, d4400 <loop+0xd0>)
   d43ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   d43f0:	e05b      	b.n	d44aa <loop+0x17a>
   d43f2:	bf00      	nop
   d43f4:	f3af 8000 	nop.w
   d43f8:	9999999a 	.word	0x9999999a
   d43fc:	3fe99999 	.word	0x3fe99999
   d4400:	acd9e83e 	.word	0xacd9e83e
   d4404:	40239cfa 	.word	0x40239cfa
   d4408:	2003e128 	.word	0x2003e128
   d440c:	2003e56c 	.word	0x2003e56c
   d4410:	2003e568 	.word	0x2003e568
   d4414:	2003e618 	.word	0x2003e618
   d4418:	3ff33333 	.word	0x3ff33333
   d441c:	2003e630 	.word	0x2003e630
   d4420:	2003e62c 	.word	0x2003e62c
    } else if(lis.y_g >= 0.8 && lis.y_g <= 1.2){
   d4424:	ed9a 9a04 	vldr	s18, [sl, #16]
   d4428:	ee19 0a10 	vmov	r0, s18
   d442c:	f004 fc30 	bl	d8c90 <__aeabi_f2d>
   d4430:	edda 8a05 	vldr	s17, [sl, #20]
   d4434:	4604      	mov	r4, r0
   d4436:	ee18 0a90 	vmov	r0, s17
   d443a:	460d      	mov	r5, r1
   d443c:	f004 fc28 	bl	d8c90 <__aeabi_f2d>
   d4440:	a3b5      	add	r3, pc, #724	; (adr r3, d4718 <loop+0x3e8>)
   d4442:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4446:	4680      	mov	r8, r0
   d4448:	4689      	mov	r9, r1
   d444a:	4620      	mov	r0, r4
   d444c:	4629      	mov	r1, r5
   d444e:	f004 fefd 	bl	d924c <__aeabi_dcmpge>
   d4452:	2800      	cmp	r0, #0
   d4454:	f000 812d 	beq.w	d46b2 <loop+0x382>
   d4458:	4bb1      	ldr	r3, [pc, #708]	; (d4720 <loop+0x3f0>)
   d445a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   d445e:	4620      	mov	r0, r4
   d4460:	4629      	mov	r1, r5
   d4462:	f004 fee9 	bl	d9238 <__aeabi_dcmple>
   d4466:	2800      	cmp	r0, #0
   d4468:	f000 8123 	beq.w	d46b2 <loop+0x382>
      x = GRAVITY * lis.x_g;
   d446c:	a3a8      	add	r3, pc, #672	; (adr r3, d4710 <loop+0x3e0>)
   d446e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4472:	4630      	mov	r0, r6
   d4474:	4639      	mov	r1, r7
   d4476:	f004 fc63 	bl	d8d40 <__aeabi_dmul>
   d447a:	f004 ff59 	bl	d9330 <__aeabi_d2f>
      y = GRAVITY * (lis.y_g - 1);
   d447e:	ee79 7a48 	vsub.f32	s15, s18, s16
      x = GRAVITY * lis.x_g;
   d4482:	f8cb 0000 	str.w	r0, [fp]
      y = GRAVITY * (lis.y_g - 1);
   d4486:	ee17 0a90 	vmov	r0, s15
   d448a:	f004 fc01 	bl	d8c90 <__aeabi_f2d>
   d448e:	a3a0      	add	r3, pc, #640	; (adr r3, d4710 <loop+0x3e0>)
   d4490:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4494:	f004 fc54 	bl	d8d40 <__aeabi_dmul>
   d4498:	f004 ff4a 	bl	d9330 <__aeabi_d2f>
   d449c:	4ba1      	ldr	r3, [pc, #644]	; (d4724 <loop+0x3f4>)
   d449e:	6018      	str	r0, [r3, #0]
      z = GRAVITY * lis.z_g;
   d44a0:	a39b      	add	r3, pc, #620	; (adr r3, d4710 <loop+0x3e0>)
   d44a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44a6:	4640      	mov	r0, r8
   d44a8:	4649      	mov	r1, r9
      z = GRAVITY * (lis.z_g - 1);
   d44aa:	f004 fc49 	bl	d8d40 <__aeabi_dmul>
   d44ae:	f004 ff3f 	bl	d9330 <__aeabi_d2f>
   d44b2:	4b9d      	ldr	r3, [pc, #628]	; (d4728 <loop+0x3f8>)
   d44b4:	6018      	str	r0, [r3, #0]
    Serial.println(lis.x_g);
   d44b6:	f003 fbb3 	bl	d7c20 <_Z16_fetch_usbserialv>
   d44ba:	ed9a 0a03 	vldr	s0, [sl, #12]
   d44be:	2102      	movs	r1, #2
   d44c0:	f003 f9a5 	bl	d780e <_ZN5Print7printlnEfi>
    Serial.println(lis.y_g);
   d44c4:	f003 fbac 	bl	d7c20 <_Z16_fetch_usbserialv>
   d44c8:	ed9a 0a04 	vldr	s0, [sl, #16]
   d44cc:	2102      	movs	r1, #2
   d44ce:	f003 f99e 	bl	d780e <_ZN5Print7printlnEfi>
    Serial.println(lis.z_g);
   d44d2:	f003 fba5 	bl	d7c20 <_Z16_fetch_usbserialv>
   d44d6:	ed9a 0a05 	vldr	s0, [sl, #20]
   d44da:	2102      	movs	r1, #2
   d44dc:	f003 f997 	bl	d780e <_ZN5Print7printlnEfi>
    if(abs(x) > 1 || abs(y) > 1 || abs(z) > 1){
   d44e0:	eddb 7a00 	vldr	s15, [fp]
   d44e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d44e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d44ec:	bfd8      	it	le
   d44ee:	eef1 7a67 	vnegle.f32	s15, s15
   d44f2:	eef4 7ac8 	vcmpe.f32	s15, s16
   d44f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d44fa:	dc1d      	bgt.n	d4538 <loop+0x208>
   d44fc:	4b89      	ldr	r3, [pc, #548]	; (d4724 <loop+0x3f4>)
   d44fe:	edd3 7a00 	vldr	s15, [r3]
   d4502:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d450a:	bfd8      	it	le
   d450c:	eef1 7a67 	vnegle.f32	s15, s15
   d4510:	eef4 7ac8 	vcmpe.f32	s15, s16
   d4514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4518:	dc0e      	bgt.n	d4538 <loop+0x208>
   d451a:	4b83      	ldr	r3, [pc, #524]	; (d4728 <loop+0x3f8>)
   d451c:	edd3 7a00 	vldr	s15, [r3]
   d4520:	eef5 7ac0 	vcmpe.f32	s15, #0.0
   d4524:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4528:	bfd8      	it	le
   d452a:	eef1 7a67 	vnegle.f32	s15, s15
   d452e:	eef4 7ac8 	vcmpe.f32	s15, s16
   d4532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4536:	dd02      	ble.n	d453e <loop+0x20e>
      isMoving = 1;
   d4538:	9a03      	ldr	r2, [sp, #12]
   d453a:	2301      	movs	r3, #1
   d453c:	6013      	str	r3, [r2, #0]
	StringSumHelper(const char *p) : String(p) {}
   d453e:	497b      	ldr	r1, [pc, #492]	; (d472c <loop+0x3fc>)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d4540:	4d7b      	ldr	r5, [pc, #492]	; (d4730 <loop+0x400>)
	StringSumHelper(const char *p) : String(p) {}
   d4542:	a804      	add	r0, sp, #16
   d4544:	f001 fd42 	bl	d5fcc <_ZN6StringC1EPKc>
    payload +=  "{\"dsid\":" + String(dsid) + ", \"value\":" + String(isMoving) + ", \"timestamp\":" + unixTime + "},";
   d4548:	4b7a      	ldr	r3, [pc, #488]	; (d4734 <loop+0x404>)
   d454a:	220a      	movs	r2, #10
   d454c:	6819      	ldr	r1, [r3, #0]
   d454e:	a808      	add	r0, sp, #32
   d4550:	f001 fd96 	bl	d6080 <_ZN6StringC1Eih>
   d4554:	a908      	add	r1, sp, #32
   d4556:	a804      	add	r0, sp, #16
   d4558:	f001 fdd3 	bl	d6102 <_ZplRK15StringSumHelperRK6String>
   d455c:	4976      	ldr	r1, [pc, #472]	; (d4738 <loop+0x408>)
   d455e:	f001 fddc 	bl	d611a <_ZplRK15StringSumHelperPKc>
   d4562:	9b03      	ldr	r3, [sp, #12]
   d4564:	220a      	movs	r2, #10
   d4566:	6819      	ldr	r1, [r3, #0]
   d4568:	4604      	mov	r4, r0
   d456a:	a80c      	add	r0, sp, #48	; 0x30
   d456c:	f001 fd88 	bl	d6080 <_ZN6StringC1Eih>
   d4570:	a90c      	add	r1, sp, #48	; 0x30
   d4572:	4620      	mov	r0, r4
   d4574:	f001 fdc5 	bl	d6102 <_ZplRK15StringSumHelperRK6String>
   d4578:	4970      	ldr	r1, [pc, #448]	; (d473c <loop+0x40c>)
   d457a:	f001 fdce 	bl	d611a <_ZplRK15StringSumHelperPKc>
   d457e:	4970      	ldr	r1, [pc, #448]	; (d4740 <loop+0x410>)
   d4580:	f001 fdbf 	bl	d6102 <_ZplRK15StringSumHelperRK6String>
   d4584:	496f      	ldr	r1, [pc, #444]	; (d4744 <loop+0x414>)
   d4586:	f001 fdc8 	bl	d611a <_ZplRK15StringSumHelperPKc>
   d458a:	4601      	mov	r1, r0
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d458c:	4628      	mov	r0, r5
   d458e:	f001 fdb4 	bl	d60fa <_ZN6String6concatERKS_>
   d4592:	a80c      	add	r0, sp, #48	; 0x30
   d4594:	f001 fccf 	bl	d5f36 <_ZN6StringD1Ev>
   d4598:	a808      	add	r0, sp, #32
   d459a:	f001 fccc 	bl	d5f36 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d459e:	a804      	add	r0, sp, #16
   d45a0:	f001 fcc9 	bl	d5f36 <_ZN6StringD1Ev>
    Serial.println(payload);
   d45a4:	f003 fb3c 	bl	d7c20 <_Z16_fetch_usbserialv>
   d45a8:	6829      	ldr	r1, [r5, #0]
   d45aa:	f003 f834 	bl	d7616 <_ZN5Print7printlnEPKc>
    BLE.disconnect();
   d45ae:	f002 f9e9 	bl	d6984 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d45b2:	f002 fbad 	bl	d6d10 <_ZNK8particle14BleLocalDevice10disconnectEv>
    BLE.off();
   d45b6:	f002 f9e5 	bl	d6984 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d45ba:	f002 fb43 	bl	d6c44 <_ZNK8particle14BleLocalDevice3offEv>
    System.sleep(config);
   d45be:	a80c      	add	r0, sp, #48	; 0x30
   d45c0:	4961      	ldr	r1, [pc, #388]	; (d4748 <loop+0x418>)
   d45c2:	f001 fb91 	bl	d5ce8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>
        if (wakeupSource_) {
   d45c6:	980c      	ldr	r0, [sp, #48]	; 0x30
   d45c8:	b108      	cbz	r0, d45ce <loop+0x29e>
            free(wakeupSource_);
   d45ca:	f001 fa5b 	bl	d5a84 <free>
    if(wifiTimeLeft <= 0){
   d45ce:	4c5f      	ldr	r4, [pc, #380]	; (d474c <loop+0x41c>)
   d45d0:	6823      	ldr	r3, [r4, #0]
   d45d2:	2b00      	cmp	r3, #0
   d45d4:	dc63      	bgt.n	d469e <loop+0x36e>
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d45d6:	4f5e      	ldr	r7, [pc, #376]	; (d4750 <loop+0x420>)
   d45d8:	2300      	movs	r3, #0
   d45da:	461a      	mov	r2, r3
   d45dc:	4619      	mov	r1, r3
   d45de:	6878      	ldr	r0, [r7, #4]
   d45e0:	f001 f9d8 	bl	d5994 <network_on>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d45e4:	2300      	movs	r3, #0
   d45e6:	6878      	ldr	r0, [r7, #4]
   d45e8:	461a      	mov	r2, r3
   d45ea:	4619      	mov	r1, r3
   d45ec:	f001 f9b2 	bl	d5954 <network_connect>
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d45f0:	2200      	movs	r2, #0
   d45f2:	6878      	ldr	r0, [r7, #4]
   d45f4:	4611      	mov	r1, r2
   d45f6:	f001 f9c5 	bl	d5984 <network_ready>
      while(!WiFi.ready()){}
   d45fa:	2800      	cmp	r0, #0
   d45fc:	d0f8      	beq.n	d45f0 <loop+0x2c0>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
   d45fe:	f001 fa11 	bl	d5a24 <spark_cloud_flag_connect>
      payload.remove(payload.length() - 1);
   d4602:	68a9      	ldr	r1, [r5, #8]
   d4604:	484a      	ldr	r0, [pc, #296]	; (d4730 <loop+0x400>)
        request(aRequest, aResponse, headers, HTTP_METHOD_GET);
    }

    void post(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[])
    {
        request(aRequest, aResponse, headers, HTTP_METHOD_POST);
   d4606:	4e53      	ldr	r6, [pc, #332]	; (d4754 <loop+0x424>)
   d4608:	3901      	subs	r1, #1
   d460a:	f001 fe00 	bl	d620e <_ZN6String6removeEj>
	StringSumHelper(const char *p) : String(p) {}
   d460e:	4952      	ldr	r1, [pc, #328]	; (d4758 <loop+0x428>)
   d4610:	a80c      	add	r0, sp, #48	; 0x30
   d4612:	f001 fcdb 	bl	d5fcc <_ZN6StringC1EPKc>
      request.body = "{\"data\":[" + payload + "]}";
   d4616:	4946      	ldr	r1, [pc, #280]	; (d4730 <loop+0x400>)
   d4618:	a80c      	add	r0, sp, #48	; 0x30
   d461a:	f001 fd72 	bl	d6102 <_ZplRK15StringSumHelperRK6String>
   d461e:	494f      	ldr	r1, [pc, #316]	; (d475c <loop+0x42c>)
   d4620:	f001 fd7b 	bl	d611a <_ZplRK15StringSumHelperPKc>
   d4624:	4601      	mov	r1, r0
   d4626:	484e      	ldr	r0, [pc, #312]	; (d4760 <loop+0x430>)
   d4628:	f001 fd01 	bl	d602e <_ZN6StringaSERKS_>
class StringSumHelper : public String
   d462c:	a80c      	add	r0, sp, #48	; 0x30
   d462e:	f001 fc82 	bl	d5f36 <_ZN6StringD1Ev>
   d4632:	4b4c      	ldr	r3, [pc, #304]	; (d4764 <loop+0x434>)
   d4634:	494c      	ldr	r1, [pc, #304]	; (d4768 <loop+0x438>)
   d4636:	484d      	ldr	r0, [pc, #308]	; (d476c <loop+0x43c>)
   d4638:	9300      	str	r3, [sp, #0]
   d463a:	4632      	mov	r2, r6
   d463c:	4b4c      	ldr	r3, [pc, #304]	; (d4770 <loop+0x440>)
   d463e:	f000 fd03 	bl	d5048 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>
      Serial.println("Status: " + response.status);
   d4642:	f003 faed 	bl	d7c20 <_Z16_fetch_usbserialv>
   d4646:	6833      	ldr	r3, [r6, #0]
   d4648:	494a      	ldr	r1, [pc, #296]	; (d4774 <loop+0x444>)
   d464a:	4419      	add	r1, r3
   d464c:	f002 ffe3 	bl	d7616 <_ZN5Print7printlnEPKc>
      Serial.println("Body: " + response.body);
   d4650:	f003 fae6 	bl	d7c20 <_Z16_fetch_usbserialv>
	StringSumHelper(const char *p) : String(p) {}
   d4654:	4948      	ldr	r1, [pc, #288]	; (d4778 <loop+0x448>)
   d4656:	4605      	mov	r5, r0
   d4658:	a80c      	add	r0, sp, #48	; 0x30
   d465a:	f001 fcb7 	bl	d5fcc <_ZN6StringC1EPKc>
   d465e:	1d31      	adds	r1, r6, #4
   d4660:	a80c      	add	r0, sp, #48	; 0x30
   d4662:	f001 fd4e 	bl	d6102 <_ZplRK15StringSumHelperRK6String>
   d4666:	6801      	ldr	r1, [r0, #0]
   d4668:	4628      	mov	r0, r5
   d466a:	f002 ffd4 	bl	d7616 <_ZN5Print7printlnEPKc>
class StringSumHelper : public String
   d466e:	a80c      	add	r0, sp, #48	; 0x30
   d4670:	f001 fc61 	bl	d5f36 <_ZN6StringD1Ev>
      payload = "";
   d4674:	4941      	ldr	r1, [pc, #260]	; (d477c <loop+0x44c>)
   d4676:	482e      	ldr	r0, [pc, #184]	; (d4730 <loop+0x400>)
   d4678:	f001 fcf0 	bl	d605c <_ZN6StringaSEPKc>
      wifiTimeLeft = wifiInterval;
   d467c:	4b40      	ldr	r3, [pc, #256]	; (d4780 <loop+0x450>)
}

inline CloudDisconnectOptions::CloudDisconnectOptions(unsigned flags, system_tick_t timeout, bool graceful) :
        flags_(flags),
        timeout_(timeout),
        graceful_(graceful) {
   d467e:	2500      	movs	r5, #0
   d4680:	681b      	ldr	r3, [r3, #0]
   d4682:	6023      	str	r3, [r4, #0]
      Particle.disconnect();
   d4684:	a80c      	add	r0, sp, #48	; 0x30
   d4686:	e9cd 550c 	strd	r5, r5, [sp, #48]	; 0x30
   d468a:	f88d 5038 	strb.w	r5, [sp, #56]	; 0x38
   d468e:	f003 f9c9 	bl	d7a24 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>
        network_off(*this, 0, 0, NULL);
   d4692:	6878      	ldr	r0, [r7, #4]
   d4694:	462b      	mov	r3, r5
   d4696:	462a      	mov	r2, r5
   d4698:	4629      	mov	r1, r5
   d469a:	f001 f983 	bl	d59a4 <network_off>
    wifiTimeLeft -= sleepDuration;
   d469e:	4a39      	ldr	r2, [pc, #228]	; (d4784 <loop+0x454>)
   d46a0:	6823      	ldr	r3, [r4, #0]
   d46a2:	6812      	ldr	r2, [r2, #0]
   d46a4:	1a9b      	subs	r3, r3, r2
   d46a6:	6023      	str	r3, [r4, #0]
}
   d46a8:	b011      	add	sp, #68	; 0x44
   d46aa:	ecbd 8b04 	vpop	{d8-d9}
   d46ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    }else if(lis.z_g >= 0.8 && lis.z_g <= 1.2){
   d46b2:	a319      	add	r3, pc, #100	; (adr r3, d4718 <loop+0x3e8>)
   d46b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d46b8:	4640      	mov	r0, r8
   d46ba:	4649      	mov	r1, r9
   d46bc:	f004 fdc6 	bl	d924c <__aeabi_dcmpge>
   d46c0:	2800      	cmp	r0, #0
   d46c2:	f43f aef8 	beq.w	d44b6 <loop+0x186>
   d46c6:	4b16      	ldr	r3, [pc, #88]	; (d4720 <loop+0x3f0>)
   d46c8:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
   d46cc:	4640      	mov	r0, r8
   d46ce:	4649      	mov	r1, r9
   d46d0:	f004 fdb2 	bl	d9238 <__aeabi_dcmple>
   d46d4:	2800      	cmp	r0, #0
   d46d6:	f43f aeee 	beq.w	d44b6 <loop+0x186>
      x = GRAVITY * lis.x_g;
   d46da:	a30d      	add	r3, pc, #52	; (adr r3, d4710 <loop+0x3e0>)
   d46dc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d46e0:	4630      	mov	r0, r6
   d46e2:	4639      	mov	r1, r7
   d46e4:	f004 fb2c 	bl	d8d40 <__aeabi_dmul>
   d46e8:	f004 fe22 	bl	d9330 <__aeabi_d2f>
      y = GRAVITY * lis.y_g;
   d46ec:	a308      	add	r3, pc, #32	; (adr r3, d4710 <loop+0x3e0>)
   d46ee:	e9d3 2300 	ldrd	r2, r3, [r3]
      x = GRAVITY * lis.x_g;
   d46f2:	f8cb 0000 	str.w	r0, [fp]
      y = GRAVITY * lis.y_g;
   d46f6:	4629      	mov	r1, r5
   d46f8:	4620      	mov	r0, r4
   d46fa:	f004 fb21 	bl	d8d40 <__aeabi_dmul>
   d46fe:	f004 fe17 	bl	d9330 <__aeabi_d2f>
   d4702:	4b08      	ldr	r3, [pc, #32]	; (d4724 <loop+0x3f4>)
      z = GRAVITY * (lis.z_g - 1);
   d4704:	ee78 7ac8 	vsub.f32	s15, s17, s16
      y = GRAVITY * lis.y_g;
   d4708:	6018      	str	r0, [r3, #0]
      z = GRAVITY * (lis.z_g - 1);
   d470a:	ee17 0a90 	vmov	r0, s15
   d470e:	e66a      	b.n	d43e6 <loop+0xb6>
   d4710:	acd9e83e 	.word	0xacd9e83e
   d4714:	40239cfa 	.word	0x40239cfa
   d4718:	9999999a 	.word	0x9999999a
   d471c:	3fe99999 	.word	0x3fe99999
   d4720:	3ff33333 	.word	0x3ff33333
   d4724:	2003e630 	.word	0x2003e630
   d4728:	2003e634 	.word	0x2003e634
   d472c:	000d96bf 	.word	0x000d96bf
   d4730:	2003e598 	.word	0x2003e598
   d4734:	2003e148 	.word	0x2003e148
   d4738:	000d96c8 	.word	0x000d96c8
   d473c:	000d96d3 	.word	0x000d96d3
   d4740:	2003e618 	.word	0x2003e618
   d4744:	000d96e2 	.word	0x000d96e2
   d4748:	2003e12c 	.word	0x2003e12c
   d474c:	2003e628 	.word	0x2003e628
   d4750:	2003e7c4 	.word	0x2003e7c4
   d4754:	2003e5f4 	.word	0x2003e5f4
   d4758:	000d96e5 	.word	0x000d96e5
   d475c:	000d96ef 	.word	0x000d96ef
   d4760:	2003e5e4 	.word	0x2003e5e4
   d4764:	000d96f2 	.word	0x000d96f2
   d4768:	2003e5a8 	.word	0x2003e5a8
   d476c:	2003e14c 	.word	0x2003e14c
   d4770:	2003e04c 	.word	0x2003e04c
   d4774:	000d96f7 	.word	0x000d96f7
   d4778:	000d9700 	.word	0x000d9700
   d477c:	000d99d7 	.word	0x000d99d7
   d4780:	2003e070 	.word	0x2003e070
   d4784:	2003e06c 	.word	0x2003e06c

000d4788 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>:
    BleCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const char* desc, void(T::*callback)(const uint8_t*, size_t, const BlePeerDevice& peer), T* instance)
            : BleCharacteristic(properties, desc, (callback && instance) ? std::bind(callback, instance, _1, _2, _3) : (BleOnDataReceivedStdFunction)nullptr) {
    }

    template<typename T1, typename T2>
    BleCharacteristic(const char* desc, EnumFlags<BleCharacteristicProperty> properties, T1 charUuid, T2 svcUuid, BleOnDataReceivedCallback callback = nullptr, void* context = nullptr) {
   d4788:	b5f0      	push	{r4, r5, r6, r7, lr}
   d478a:	4616      	mov	r6, r2
   d478c:	b091      	sub	sp, #68	; 0x44
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d478e:	2200      	movs	r2, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d4790:	e9c0 2200 	strd	r2, r2, [r0]
   d4794:	4604      	mov	r4, r0
   d4796:	460d      	mov	r5, r1
        BleUuid cUuid(charUuid);
        BleUuid sUuid(svcUuid);
   d4798:	af0b      	add	r7, sp, #44	; 0x2c
        BleUuid cUuid(charUuid);
   d479a:	4619      	mov	r1, r3
   d479c:	a806      	add	r0, sp, #24
   d479e:	f001 fee5 	bl	d656c <_ZN8particle7BleUuidC1ERKS0_>
        BleUuid sUuid(svcUuid);
   d47a2:	9916      	ldr	r1, [sp, #88]	; 0x58
   d47a4:	4638      	mov	r0, r7
   d47a6:	f001 fee1 	bl	d656c <_ZN8particle7BleUuidC1ERKS0_>
    value_ = static_cast<ValueType>(value);
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d47aa:	7833      	ldrb	r3, [r6, #0]
   d47ac:	f88d 3014 	strb.w	r3, [sp, #20]
        construct(desc, properties, cUuid, sUuid, callback, context);
   d47b0:	9b18      	ldr	r3, [sp, #96]	; 0x60
   d47b2:	9302      	str	r3, [sp, #8]
   d47b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   d47b6:	4620      	mov	r0, r4
   d47b8:	e9cd 7300 	strd	r7, r3, [sp]
   d47bc:	aa05      	add	r2, sp, #20
   d47be:	ab06      	add	r3, sp, #24
   d47c0:	4629      	mov	r1, r5
   d47c2:	f002 fc5d 	bl	d7080 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>
    }
   d47c6:	4620      	mov	r0, r4
   d47c8:	b011      	add	sp, #68	; 0x44
   d47ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d47cc <_ZN5Print7printlnIiLi0EEEjT_i>:

    size_t println(const char[]);
    size_t println(char);
    template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
        std::is_convertible<T, long long>::value), int> = 0>
    size_t println(T b, int base = DEC) {
   d47cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d47ce:	4605      	mov	r5, r0
   d47d0:	460c      	mov	r4, r1

template <typename T, std::enable_if_t<!std::is_base_of<Printable, T>::value && (std::is_integral<T>::value || std::is_convertible<T, unsigned long long>::value ||
    std::is_convertible<T, long long>::value), int>>
size_t Print::print(T n, int base)
{
    if (base == 0) {
   d47d2:	4616      	mov	r6, r2
   d47d4:	b94a      	cbnz	r2, d47ea <_ZN5Print7printlnIiLi0EEEjT_i+0x1e>
        return write(n);
   d47d6:	6803      	ldr	r3, [r0, #0]
   d47d8:	b2c9      	uxtb	r1, r1
   d47da:	689b      	ldr	r3, [r3, #8]
   d47dc:	4798      	blx	r3
   d47de:	4607      	mov	r7, r0
        n += println();
   d47e0:	4628      	mov	r0, r5
   d47e2:	f002 ff0c 	bl	d75fe <_ZN5Print7printlnEv>
    }
   d47e6:	4438      	add	r0, r7
   d47e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
// FIXME: avoids 'comparison of constant '0' with boolean expression is always false'
#if __GNUC__ >= 9
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wbool-compare"
#endif // __GNUC__ >= 9
        if (n < 0 && base == 10) {
   d47ea:	2900      	cmp	r1, #0
   d47ec:	da0c      	bge.n	d4808 <_ZN5Print7printlnIiLi0EEEjT_i+0x3c>
   d47ee:	2a0a      	cmp	r2, #10
   d47f0:	d10a      	bne.n	d4808 <_ZN5Print7printlnIiLi0EEEjT_i+0x3c>
            t = print('-');
   d47f2:	212d      	movs	r1, #45	; 0x2d
   d47f4:	f002 fefa 	bl	d75ec <_ZN5Print5printEc>
            val = -n;
   d47f8:	4261      	negs	r1, r4
            t = print('-');
   d47fa:	4607      	mov	r7, r0
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d47fc:	b2f2      	uxtb	r2, r6
   d47fe:	4628      	mov	r0, r5
   d4800:	f002 ff13 	bl	d762a <_ZN5Print11printNumberEmh>
   d4804:	4407      	add	r7, r0
   d4806:	e7eb      	b.n	d47e0 <_ZN5Print7printlnIiLi0EEEjT_i+0x14>
            val = n;
   d4808:	4621      	mov	r1, r4
        size_t t = 0;
   d480a:	2700      	movs	r7, #0
   d480c:	e7f6      	b.n	d47fc <_ZN5Print7printlnIiLi0EEEjT_i+0x30>
	...

000d4810 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv>:
void onDataReceived(const uint8_t* data, size_t len, const BlePeerDevice& peer, void* context){
   d4810:	b538      	push	{r3, r4, r5, lr}
  if(count == 0){
   d4812:	4c1f      	ldr	r4, [pc, #124]	; (d4890 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x80>)
   d4814:	6823      	ldr	r3, [r4, #0]
   d4816:	b993      	cbnz	r3, d483e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x2e>
    dsid = atoi((char *)data);
   d4818:	f004 fdda 	bl	d93d0 <atoi>
   d481c:	4d1d      	ldr	r5, [pc, #116]	; (d4894 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x84>)
   d481e:	6028      	str	r0, [r5, #0]
    Serial.println(sleepDuration);
   d4820:	f003 f9fe 	bl	d7c20 <_Z16_fetch_usbserialv>
   d4824:	6829      	ldr	r1, [r5, #0]
   d4826:	220a      	movs	r2, #10
   d4828:	f7ff ffd0 	bl	d47cc <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.println("data received: ");
   d482c:	f003 f9f8 	bl	d7c20 <_Z16_fetch_usbserialv>
   d4830:	4919      	ldr	r1, [pc, #100]	; (d4898 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>)
   d4832:	f002 fef0 	bl	d7616 <_ZN5Print7printlnEPKc>
  count++;
   d4836:	6823      	ldr	r3, [r4, #0]
   d4838:	3301      	adds	r3, #1
   d483a:	6023      	str	r3, [r4, #0]
}
   d483c:	bd38      	pop	{r3, r4, r5, pc}
  }else if(count == 1){
   d483e:	2b01      	cmp	r3, #1
   d4840:	d10d      	bne.n	d485e <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x4e>
    sleepDuration = atoi((char *)data);
   d4842:	f004 fdc5 	bl	d93d0 <atoi>
        if (valid_) {
   d4846:	4a15      	ldr	r2, [pc, #84]	; (d489c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   d4848:	4d15      	ldr	r5, [pc, #84]	; (d48a0 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x90>)
   d484a:	7d11      	ldrb	r1, [r2, #20]
   d484c:	6028      	str	r0, [r5, #0]
   d484e:	b109      	cbz	r1, d4854 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x44>
            config_.mode = static_cast<hal_sleep_mode_t>(mode);
   d4850:	2302      	movs	r3, #2
   d4852:	7213      	strb	r3, [r2, #8]
    config.mode(SystemSleepMode::ULTRA_LOW_POWER).duration(sleepDuration);
   d4854:	4601      	mov	r1, r0
   d4856:	4811      	ldr	r0, [pc, #68]	; (d489c <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x8c>)
   d4858:	f7ff fc8c 	bl	d4174 <_ZN8particle24SystemSleepConfiguration8durationEm>
   d485c:	e7e0      	b.n	d4820 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x10>
  }else if(count == 2){
   d485e:	2b02      	cmp	r3, #2
   d4860:	d1e9      	bne.n	d4836 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x26>
    wifiInterval = atoi((char *)data);
   d4862:	f004 fdb5 	bl	d93d0 <atoi>
   d4866:	4d0f      	ldr	r5, [pc, #60]	; (d48a4 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x94>)
   d4868:	6028      	str	r0, [r5, #0]
    Serial.println(wifiInterval);
   d486a:	f003 f9d9 	bl	d7c20 <_Z16_fetch_usbserialv>
   d486e:	6829      	ldr	r1, [r5, #0]
   d4870:	220a      	movs	r2, #10
   d4872:	f7ff ffab 	bl	d47cc <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.println("data received: ");
   d4876:	f003 f9d3 	bl	d7c20 <_Z16_fetch_usbserialv>
   d487a:	4907      	ldr	r1, [pc, #28]	; (d4898 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x88>)
   d487c:	f002 fecb 	bl	d7616 <_ZN5Print7printlnEPKc>
    bleInput = true;
   d4880:	4b09      	ldr	r3, [pc, #36]	; (d48a8 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x98>)
   d4882:	2201      	movs	r2, #1
    digitalWrite(D7, LOW);
   d4884:	2100      	movs	r1, #0
   d4886:	2007      	movs	r0, #7
    bleInput = true;
   d4888:	701a      	strb	r2, [r3, #0]
    digitalWrite(D7, LOW);
   d488a:	f003 ff10 	bl	d86ae <digitalWrite>
   d488e:	e7d2      	b.n	d4836 <_Z14onDataReceivedPKhjRKN8particle13BlePeerDeviceEPv+0x26>
   d4890:	2003e144 	.word	0x2003e144
   d4894:	2003e148 	.word	0x2003e148
   d4898:	000d9707 	.word	0x000d9707
   d489c:	2003e12c 	.word	0x2003e12c
   d48a0:	2003e06c 	.word	0x2003e06c
   d48a4:	2003e070 	.word	0x2003e070
   d48a8:	2003e128 	.word	0x2003e128

000d48ac <_ZN15Adafruit_LIS3DHD0Ev>:
   d48ac:	b510      	push	{r4, lr}
   d48ae:	212c      	movs	r1, #44	; 0x2c
   d48b0:	4604      	mov	r4, r0
   d48b2:	f003 ff6e 	bl	d8792 <_ZdlPvj>
   d48b6:	4620      	mov	r0, r4
   d48b8:	bd10      	pop	{r4, pc}
	...

000d48bc <_GLOBAL__sub_I_SystemMode>:
   d48bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
              error_(SYSTEM_ERROR_NONE) {
   d48c0:	4e5d      	ldr	r6, [pc, #372]	; (d4a38 <_GLOBAL__sub_I_SystemMode+0x17c>)
    SleepResult() {}
   d48c2:	4b5e      	ldr	r3, [pc, #376]	; (d4a3c <_GLOBAL__sub_I_SystemMode+0x180>)
SYSTEM_MODE(MANUAL)
   d48c4:	4d5e      	ldr	r5, [pc, #376]	; (d4a40 <_GLOBAL__sub_I_SystemMode+0x184>)
   d48c6:	60b3      	str	r3, [r6, #8]
              error_(SYSTEM_ERROR_NONE) {
   d48c8:	2400      	movs	r4, #0
   d48ca:	b091      	sub	sp, #68	; 0x44
   d48cc:	6034      	str	r4, [r6, #0]
   d48ce:	80b4      	strh	r4, [r6, #4]
    SleepResult() {}
   d48d0:	71b4      	strb	r4, [r6, #6]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d48d2:	2003      	movs	r0, #3
   d48d4:	f001 f808 	bl	d58e8 <set_system_mode>
String payload = "";
   d48d8:	4f5a      	ldr	r7, [pc, #360]	; (d4a44 <_GLOBAL__sub_I_SystemMode+0x188>)
SYSTEM_MODE(MANUAL)
   d48da:	495b      	ldr	r1, [pc, #364]	; (d4a48 <_GLOBAL__sub_I_SystemMode+0x18c>)
String payload = "";
   d48dc:	f8df 81c8 	ldr.w	r8, [pc, #456]	; d4aa8 <_GLOBAL__sub_I_SystemMode+0x1ec>
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d48e0:	f8df 91c8 	ldr.w	r9, [pc, #456]	; d4aac <_GLOBAL__sub_I_SystemMode+0x1f0>
SYSTEM_MODE(MANUAL)
   d48e4:	4630      	mov	r0, r6
String payload = "";
   d48e6:	4e59      	ldr	r6, [pc, #356]	; (d4a4c <_GLOBAL__sub_I_SystemMode+0x190>)
SYSTEM_MODE(MANUAL)
   d48e8:	462a      	mov	r2, r5
   d48ea:	f003 ff4d 	bl	d8788 <__aeabi_atexit>
String payload = "";
   d48ee:	4631      	mov	r1, r6
   d48f0:	4638      	mov	r0, r7
   d48f2:	f001 fb6b 	bl	d5fcc <_ZN6StringC1EPKc>
   d48f6:	4638      	mov	r0, r7
String unixTime;
   d48f8:	4f55      	ldr	r7, [pc, #340]	; (d4a50 <_GLOBAL__sub_I_SystemMode+0x194>)
String payload = "";
   d48fa:	462a      	mov	r2, r5
   d48fc:	4641      	mov	r1, r8
   d48fe:	f003 ff43 	bl	d8788 <__aeabi_atexit>
String unixTime;
   d4902:	4631      	mov	r1, r6
   d4904:	4638      	mov	r0, r7
   d4906:	f001 fb61 	bl	d5fcc <_ZN6StringC1EPKc>
   d490a:	4638      	mov	r0, r7
Adafruit_LIS3DH lis = Adafruit_LIS3DH();
   d490c:	4f51      	ldr	r7, [pc, #324]	; (d4a54 <_GLOBAL__sub_I_SystemMode+0x198>)
String unixTime;
   d490e:	462a      	mov	r2, r5
   d4910:	4641      	mov	r1, r8
   d4912:	f003 ff39 	bl	d8788 <__aeabi_atexit>
Adafruit_LIS3DH lis = Adafruit_LIS3DH();
   d4916:	4638      	mov	r0, r7
   d4918:	f000 f8ee 	bl	d4af8 <_ZN15Adafruit_LIS3DHC1Ev>
   d491c:	462a      	mov	r2, r5
   d491e:	494e      	ldr	r1, [pc, #312]	; (d4a58 <_GLOBAL__sub_I_SystemMode+0x19c>)
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d4920:	f8df 818c 	ldr.w	r8, [pc, #396]	; d4ab0 <_GLOBAL__sub_I_SystemMode+0x1f4>
Adafruit_LIS3DH lis = Adafruit_LIS3DH();
   d4924:	4638      	mov	r0, r7
   d4926:	f003 ff2f 	bl	d8788 <__aeabi_atexit>
        : config_(config) {
   d492a:	484c      	ldr	r0, [pc, #304]	; (d4a5c <_GLOBAL__sub_I_SystemMode+0x1a0>)
HttpClient http;
   d492c:	4f4c      	ldr	r7, [pc, #304]	; (d4a60 <_GLOBAL__sub_I_SystemMode+0x1a4>)
              valid_(true) {
   d492e:	f8a0 4009 	strh.w	r4, [r0, #9]
        : config_(config) {
   d4932:	4603      	mov	r3, r0
   d4934:	1d02      	adds	r2, r0, #4
   d4936:	f843 2b09 	str.w	r2, [r3], #9
              valid_(true) {
   d493a:	709c      	strb	r4, [r3, #2]
   d493c:	2301      	movs	r3, #1
   d493e:	7503      	strb	r3, [r0, #20]
        config_.size = sizeof(hal_sleep_config_t);
   d4940:	4b48      	ldr	r3, [pc, #288]	; (d4a64 <_GLOBAL__sub_I_SystemMode+0x1a8>)
   d4942:	6043      	str	r3, [r0, #4]
SystemSleepConfiguration config;
   d4944:	462a      	mov	r2, r5
   d4946:	4948      	ldr	r1, [pc, #288]	; (d4a68 <_GLOBAL__sub_I_SystemMode+0x1ac>)
        config_.mode = HAL_SLEEP_MODE_NONE;
   d4948:	7204      	strb	r4, [r0, #8]
        config_.wakeup_sources = nullptr;
   d494a:	e9c0 4403 	strd	r4, r4, [r0, #12]
   d494e:	f003 ff1b 	bl	d8788 <__aeabi_atexit>
HttpClient http;
   d4952:	4638      	mov	r0, r7
   d4954:	f000 fb1f 	bl	d4f96 <_ZN10HttpClientC1Ev>
   d4958:	4638      	mov	r0, r7
} http_request_t;
   d495a:	4f44      	ldr	r7, [pc, #272]	; (d4a6c <_GLOBAL__sub_I_SystemMode+0x1b0>)
   d495c:	4944      	ldr	r1, [pc, #272]	; (d4a70 <_GLOBAL__sub_I_SystemMode+0x1b4>)
   d495e:	462a      	mov	r2, r5
   d4960:	f003 ff12 	bl	d8788 <__aeabi_atexit>
   d4964:	4631      	mov	r1, r6
   d4966:	4638      	mov	r0, r7
   d4968:	f001 fb30 	bl	d5fcc <_ZN6StringC1EPKc>
   d496c:	f107 0010 	add.w	r0, r7, #16
   d4970:	f003 f8a6 	bl	d7ac0 <_ZN9IPAddressC1Ev>
   d4974:	4631      	mov	r1, r6
   d4976:	f107 0028 	add.w	r0, r7, #40	; 0x28
   d497a:	f001 fb27 	bl	d5fcc <_ZN6StringC1EPKc>
   d497e:	4631      	mov	r1, r6
   d4980:	f107 003c 	add.w	r0, r7, #60	; 0x3c
   d4984:	f001 fb22 	bl	d5fcc <_ZN6StringC1EPKc>
http_request_t request;
   d4988:	4638      	mov	r0, r7
} http_response_t;
   d498a:	4f3a      	ldr	r7, [pc, #232]	; (d4a74 <_GLOBAL__sub_I_SystemMode+0x1b8>)
   d498c:	493a      	ldr	r1, [pc, #232]	; (d4a78 <_GLOBAL__sub_I_SystemMode+0x1bc>)
   d498e:	462a      	mov	r2, r5
   d4990:	f003 fefa 	bl	d8788 <__aeabi_atexit>
   d4994:	4631      	mov	r1, r6
   d4996:	1d38      	adds	r0, r7, #4
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d4998:	4e38      	ldr	r6, [pc, #224]	; (d4a7c <_GLOBAL__sub_I_SystemMode+0x1c0>)
   d499a:	f001 fb17 	bl	d5fcc <_ZN6StringC1EPKc>
http_response_t response;
   d499e:	462a      	mov	r2, r5
   d49a0:	4937      	ldr	r1, [pc, #220]	; (d4a80 <_GLOBAL__sub_I_SystemMode+0x1c4>)
   d49a2:	4638      	mov	r0, r7
   d49a4:	f003 fef0 	bl	d8788 <__aeabi_atexit>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d49a8:	4f36      	ldr	r7, [pc, #216]	; (d4a84 <_GLOBAL__sub_I_SystemMode+0x1c8>)
const BleUuid serviceUuid("6E400001-B5A3-F393-E0A9-E50E24DCCA9E");
   d49aa:	4937      	ldr	r1, [pc, #220]	; (d4a88 <_GLOBAL__sub_I_SystemMode+0x1cc>)
   d49ac:	4630      	mov	r0, r6
   d49ae:	f001 fec3 	bl	d6738 <_ZN8particle7BleUuidC1EPKc>
const BleUuid rxUuid("6E400002-B5A3-F393-E0A9-E50E24DCCA9E");
   d49b2:	4936      	ldr	r1, [pc, #216]	; (d4a8c <_GLOBAL__sub_I_SystemMode+0x1d0>)
   d49b4:	4640      	mov	r0, r8
   d49b6:	f001 febf 	bl	d6738 <_ZN8particle7BleUuidC1EPKc>
const BleUuid txUuid("6E400003-B5A3-F393-E0A9-E50E24DCCA9E");
   d49ba:	4935      	ldr	r1, [pc, #212]	; (d4a90 <_GLOBAL__sub_I_SystemMode+0x1d4>)
   d49bc:	4638      	mov	r0, r7
   d49be:	f001 febb 	bl	d6738 <_ZN8particle7BleUuidC1EPKc>
    value_ = static_cast<ValueType>(value);
   d49c2:	2310      	movs	r3, #16
BleCharacteristic txCharacteristic("tx", BleCharacteristicProperty::NOTIFY, txUuid, serviceUuid);
   d49c4:	4639      	mov	r1, r7
   d49c6:	a806      	add	r0, sp, #24
   d49c8:	f88d 3014 	strb.w	r3, [sp, #20]
   d49cc:	f001 fdce 	bl	d656c <_ZN8particle7BleUuidC1ERKS0_>
   d49d0:	4631      	mov	r1, r6
   d49d2:	a80b      	add	r0, sp, #44	; 0x2c
   d49d4:	f001 fdca 	bl	d656c <_ZN8particle7BleUuidC1ERKS0_>
   d49d8:	4f2e      	ldr	r7, [pc, #184]	; (d4a94 <_GLOBAL__sub_I_SystemMode+0x1d8>)
   d49da:	492f      	ldr	r1, [pc, #188]	; (d4a98 <_GLOBAL__sub_I_SystemMode+0x1dc>)
   d49dc:	ab0b      	add	r3, sp, #44	; 0x2c
   d49de:	9300      	str	r3, [sp, #0]
   d49e0:	aa05      	add	r2, sp, #20
   d49e2:	ab06      	add	r3, sp, #24
   d49e4:	e9cd 4401 	strd	r4, r4, [sp, #4]
   d49e8:	4648      	mov	r0, r9
   d49ea:	f7ff fecd 	bl	d4788 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d49ee:	462a      	mov	r2, r5
   d49f0:	4639      	mov	r1, r7
   d49f2:	4648      	mov	r0, r9
   d49f4:	f003 fec8 	bl	d8788 <__aeabi_atexit>
   d49f8:	2304      	movs	r3, #4
BleCharacteristic rxCharacteristic("rx", BleCharacteristicProperty::WRITE_WO_RSP, rxUuid, serviceUuid, onDataReceived, NULL);
   d49fa:	4641      	mov	r1, r8
   d49fc:	a806      	add	r0, sp, #24
   d49fe:	f88d 3014 	strb.w	r3, [sp, #20]
   d4a02:	f001 fdb3 	bl	d656c <_ZN8particle7BleUuidC1ERKS0_>
   d4a06:	4631      	mov	r1, r6
   d4a08:	a80b      	add	r0, sp, #44	; 0x2c
   d4a0a:	f001 fdaf 	bl	d656c <_ZN8particle7BleUuidC1ERKS0_>
   d4a0e:	4e23      	ldr	r6, [pc, #140]	; (d4a9c <_GLOBAL__sub_I_SystemMode+0x1e0>)
   d4a10:	4b23      	ldr	r3, [pc, #140]	; (d4aa0 <_GLOBAL__sub_I_SystemMode+0x1e4>)
   d4a12:	9301      	str	r3, [sp, #4]
   d4a14:	ab0b      	add	r3, sp, #44	; 0x2c
   d4a16:	9300      	str	r3, [sp, #0]
   d4a18:	aa05      	add	r2, sp, #20
   d4a1a:	ab06      	add	r3, sp, #24
   d4a1c:	4921      	ldr	r1, [pc, #132]	; (d4aa4 <_GLOBAL__sub_I_SystemMode+0x1e8>)
   d4a1e:	9402      	str	r4, [sp, #8]
   d4a20:	4630      	mov	r0, r6
   d4a22:	f7ff feb1 	bl	d4788 <_ZN8particle17BleCharacteristicC1INS_7BleUuidES2_EEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEET_T0_PFvPKhjRKNS_13BlePeerDeviceEPvESF_>
   d4a26:	462a      	mov	r2, r5
   d4a28:	4639      	mov	r1, r7
   d4a2a:	4630      	mov	r0, r6
   d4a2c:	f003 feac 	bl	d8788 <__aeabi_atexit>
   d4a30:	b011      	add	sp, #68	; 0x44
   d4a32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4a36:	bf00      	nop
   d4a38:	2003e0e0 	.word	0x2003e0e0
   d4a3c:	ffff0000 	.word	0xffff0000
   d4a40:	2003e0dc 	.word	0x2003e0dc
   d4a44:	2003e598 	.word	0x2003e598
   d4a48:	000d4165 	.word	0x000d4165
   d4a4c:	000d99d7 	.word	0x000d99d7
   d4a50:	2003e618 	.word	0x2003e618
   d4a54:	2003e56c 	.word	0x2003e56c
   d4a58:	000d40b3 	.word	0x000d40b3
   d4a5c:	2003e12c 	.word	0x2003e12c
   d4a60:	2003e14c 	.word	0x2003e14c
   d4a64:	00030010 	.word	0x00030010
   d4a68:	000d4119 	.word	0x000d4119
   d4a6c:	2003e5a8 	.word	0x2003e5a8
   d4a70:	000d4131 	.word	0x000d4131
   d4a74:	2003e5f4 	.word	0x2003e5f4
   d4a78:	000d40c3 	.word	0x000d40c3
   d4a7c:	2003e0ec 	.word	0x2003e0ec
   d4a80:	000d40b5 	.word	0x000d40b5
   d4a84:	2003e114 	.word	0x2003e114
   d4a88:	000d9717 	.word	0x000d9717
   d4a8c:	000d973c 	.word	0x000d973c
   d4a90:	000d9761 	.word	0x000d9761
   d4a94:	000d6b53 	.word	0x000d6b53
   d4a98:	000d9786 	.word	0x000d9786
   d4a9c:	2003e608 	.word	0x2003e608
   d4aa0:	000d4811 	.word	0x000d4811
   d4aa4:	000d9789 	.word	0x000d9789
   d4aa8:	000d5f37 	.word	0x000d5f37
   d4aac:	2003e610 	.word	0x2003e610
   d4ab0:	2003e100 	.word	0x2003e100

000d4ab4 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   d4ab4:	4770      	bx	lr
	...

000d4ab8 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data
*/
/**************************************************************************/
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
   d4ab8:	460b      	mov	r3, r1
   d4aba:	b510      	push	{r4, lr}
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   d4abc:	2228      	movs	r2, #40	; 0x28
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
   d4abe:	4604      	mov	r4, r0
  memset(sensor, 0, sizeof(sensor_t));
   d4ac0:	2100      	movs	r1, #0
   d4ac2:	4618      	mov	r0, r3
   d4ac4:	f004 fce0 	bl	d9488 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
   d4ac8:	4908      	ldr	r1, [pc, #32]	; (d4aec <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t+0x34>)
   d4aca:	220b      	movs	r2, #11
   d4acc:	f004 fd22 	bl	d9514 <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d4ad0:	2200      	movs	r2, #0
  sensor->version     = 1;
   d4ad2:	2101      	movs	r1, #1
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d4ad4:	72c2      	strb	r2, [r0, #11]
  sensor->version     = 1;
   d4ad6:	60c1      	str	r1, [r0, #12]
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
   d4ad8:	4603      	mov	r3, r0
  sensor->sensor_id   = _sensorID;
   d4ada:	69a0      	ldr	r0, [r4, #24]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
  sensor->min_delay   = 0;
   d4adc:	625a      	str	r2, [r3, #36]	; 0x24
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
   d4ade:	e9c3 0104 	strd	r0, r1, [r3, #16]
  sensor->max_value   = 0;
   d4ae2:	2200      	movs	r2, #0
   d4ae4:	619a      	str	r2, [r3, #24]
  sensor->min_value   = 0;
   d4ae6:	61da      	str	r2, [r3, #28]
  sensor->resolution  = 0;
   d4ae8:	621a      	str	r2, [r3, #32]
}
   d4aea:	bd10      	pop	{r4, pc}
   d4aec:	000d97d7 	.word	0x000d97d7

000d4af0 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d4af0:	6803      	ldr	r3, [r0, #0]
   d4af2:	b2c9      	uxtb	r1, r1
   d4af4:	689b      	ldr	r3, [r3, #8]
   d4af6:	4718      	bx	r3

000d4af8 <_ZN15Adafruit_LIS3DHC1Ev>:
  : _cs(-1), _mosi(-1), _miso(-1), _sck(-1), _sensorID(-1)
   d4af8:	4a06      	ldr	r2, [pc, #24]	; (d4b14 <_ZN15Adafruit_LIS3DHC1Ev+0x1c>)
   d4afa:	6002      	str	r2, [r0, #0]
   d4afc:	f04f 32ff 	mov.w	r2, #4294967295
   d4b00:	6182      	str	r2, [r0, #24]
   d4b02:	7742      	strb	r2, [r0, #29]
   d4b04:	83c2      	strh	r2, [r0, #30]
   d4b06:	22ff      	movs	r2, #255	; 0xff
   d4b08:	f880 2020 	strb.w	r2, [r0, #32]
   d4b0c:	2208      	movs	r2, #8
   d4b0e:	6242      	str	r2, [r0, #36]	; 0x24
}
   d4b10:	4770      	bx	lr
   d4b12:	bf00      	nop
   d4b14:	000d97e8 	.word	0x000d97e8

000d4b18 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4b18:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d4b1a:	4c0b      	ldr	r4, [pc, #44]	; (d4b48 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d4b1c:	7821      	ldrb	r1, [r4, #0]
   d4b1e:	f3bf 8f5b 	dmb	ish
   d4b22:	f011 0101 	ands.w	r1, r1, #1
   d4b26:	d10b      	bne.n	d4b40 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4b28:	4620      	mov	r0, r4
   d4b2a:	9101      	str	r1, [sp, #4]
   d4b2c:	f7ff fab9 	bl	d40a2 <__cxa_guard_acquire>
   d4b30:	9901      	ldr	r1, [sp, #4]
   d4b32:	b128      	cbz	r0, d4b40 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4b34:	4805      	ldr	r0, [pc, #20]	; (d4b4c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4b36:	f001 f811 	bl	d5b5c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4b3a:	4620      	mov	r0, r4
   d4b3c:	f7ff fab6 	bl	d40ac <__cxa_guard_release>
        return instance;
    }
   d4b40:	4802      	ldr	r0, [pc, #8]	; (d4b4c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4b42:	b002      	add	sp, #8
   d4b44:	bd10      	pop	{r4, pc}
   d4b46:	bf00      	nop
   d4b48:	2003e638 	.word	0x2003e638
   d4b4c:	2003e63c 	.word	0x2003e63c

000d4b50 <_ZN15Adafruit_LIS3DH7spixferEh>:
/*!
    @brief  Low level SPI
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   d4b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
   d4b54:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d4b58:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   d4b5a:	4605      	mov	r5, r0
   d4b5c:	460f      	mov	r7, r1
  if (_sck == -1)
   d4b5e:	d106      	bne.n	d4b6e <_ZN15Adafruit_LIS3DH7spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4b60:	f7ff ffda 	bl	d4b18 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4b64:	4639      	mov	r1, r7
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
  #endif
}
   d4b66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d4b6a:	f001 b881 	b.w	d5c70 <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
   d4b6e:	2400      	movs	r4, #0
  for (int i=7; i>=0; i--) {
   d4b70:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1<<i));
   d4b72:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
   d4b76:	f995 0020 	ldrsb.w	r0, [r5, #32]
   d4b7a:	2100      	movs	r1, #0
   d4b7c:	b280      	uxth	r0, r0
   d4b7e:	f003 fd96 	bl	d86ae <digitalWrite>
    digitalWrite(_mosi, x & (1<<i));
   d4b82:	f995 001e 	ldrsb.w	r0, [r5, #30]
   d4b86:	fa08 f106 	lsl.w	r1, r8, r6
   d4b8a:	4039      	ands	r1, r7
   d4b8c:	b280      	uxth	r0, r0
   d4b8e:	f003 fd8e 	bl	d86ae <digitalWrite>
    digitalWrite(_sck, HIGH);
   d4b92:	f995 0020 	ldrsb.w	r0, [r5, #32]
   d4b96:	2101      	movs	r1, #1
   d4b98:	b280      	uxth	r0, r0
   d4b9a:	f003 fd88 	bl	d86ae <digitalWrite>
    if (digitalRead(_miso))
   d4b9e:	f995 001f 	ldrsb.w	r0, [r5, #31]
    reply <<= 1;
   d4ba2:	0064      	lsls	r4, r4, #1
    if (digitalRead(_miso))
   d4ba4:	b280      	uxth	r0, r0
    reply <<= 1;
   d4ba6:	b2e4      	uxtb	r4, r4
    if (digitalRead(_miso))
   d4ba8:	f003 fd9a 	bl	d86e0 <digitalRead>
   d4bac:	b108      	cbz	r0, d4bb2 <_ZN15Adafruit_LIS3DH7spixferEh+0x62>
      reply |= 1;
   d4bae:	f044 0401 	orr.w	r4, r4, #1
  for (int i=7; i>=0; i--) {
   d4bb2:	3e01      	subs	r6, #1
   d4bb4:	d2df      	bcs.n	d4b76 <_ZN15Adafruit_LIS3DH7spixferEh+0x26>
}
   d4bb6:	4620      	mov	r0, r4
   d4bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4bbc <_ZN15Adafruit_LIS3DH16beginTransactionEv>:
  #endif
  return value;
}


void Adafruit_LIS3DH::beginTransaction() {
   d4bbc:	b508      	push	{r3, lr}
        instance().setBitOrder(order);
   d4bbe:	f7ff ffab 	bl	d4b18 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4bc2:	2101      	movs	r1, #1
   d4bc4:	f000 ffe5 	bl	d5b92 <_ZN8SPIClass11setBitOrderEh>
        return instance().setClockSpeed(value, scale);
   d4bc8:	f7ff ffa6 	bl	d4b18 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4bcc:	4905      	ldr	r1, [pc, #20]	; (d4be4 <_ZN15Adafruit_LIS3DH16beginTransactionEv+0x28>)
   d4bce:	2201      	movs	r2, #1
   d4bd0:	f001 f81c 	bl	d5c0c <_ZN8SPIClass13setClockSpeedEjj>
        instance().setDataMode(mode);
   d4bd4:	f7ff ffa0 	bl	d4b18 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    SPI.setClockSpeed(500000);
    SPI.setDataMode(SPI_MODE0);
#else
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
#endif
}
   d4bd8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d4bdc:	2100      	movs	r1, #0
   d4bde:	f000 bfeb 	b.w	d5bb8 <_ZN8SPIClass11setDataModeEh>
   d4be2:	bf00      	nop
   d4be4:	0007a120 	.word	0x0007a120

000d4be8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>:
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   d4be8:	b570      	push	{r4, r5, r6, lr}
  if (_cs == -1) {
   d4bea:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d4bee:	3301      	adds	r3, #1
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   d4bf0:	4604      	mov	r4, r0
   d4bf2:	460e      	mov	r6, r1
   d4bf4:	4615      	mov	r5, r2
  if (_cs == -1) {
   d4bf6:	d116      	bne.n	d4c26 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x3e>
    Wire.beginTransmission((uint8_t)_i2caddr);
   d4bf8:	f003 fd9e 	bl	d8738 <_Z19__fetch_global_Wirev>
   d4bfc:	7f21      	ldrb	r1, [r4, #28]
   d4bfe:	f003 f92b 	bl	d7e58 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
   d4c02:	f003 fd99 	bl	d8738 <_Z19__fetch_global_Wirev>
   d4c06:	6803      	ldr	r3, [r0, #0]
   d4c08:	4631      	mov	r1, r6
   d4c0a:	689b      	ldr	r3, [r3, #8]
   d4c0c:	4798      	blx	r3
    Wire.write((uint8_t)value);
   d4c0e:	f003 fd93 	bl	d8738 <_Z19__fetch_global_Wirev>
   d4c12:	6803      	ldr	r3, [r0, #0]
   d4c14:	4629      	mov	r1, r5
   d4c16:	689b      	ldr	r3, [r3, #8]
   d4c18:	4798      	blx	r3
    Wire.endTransmission();
   d4c1a:	f003 fd8d 	bl	d8738 <_Z19__fetch_global_Wirev>
}
   d4c1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Wire.endTransmission();
   d4c22:	f003 b924 	b.w	d7e6e <_ZN7TwoWire15endTransmissionEv>
	if (_sck == -1)
   d4c26:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d4c2a:	3301      	adds	r3, #1
   d4c2c:	d101      	bne.n	d4c32 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x4a>
	  beginTransaction();
   d4c2e:	f7ff ffc5 	bl	d4bbc <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   d4c32:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4c36:	2100      	movs	r1, #0
   d4c38:	b280      	uxth	r0, r0
   d4c3a:	f003 fd38 	bl	d86ae <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
   d4c3e:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d4c42:	4620      	mov	r0, r4
   d4c44:	f7ff ff84 	bl	d4b50 <_ZN15Adafruit_LIS3DH7spixferEh>
    spixfer(value);
   d4c48:	4629      	mov	r1, r5
   d4c4a:	4620      	mov	r0, r4
   d4c4c:	f7ff ff80 	bl	d4b50 <_ZN15Adafruit_LIS3DH7spixferEh>
    digitalWrite(_cs, HIGH);
   d4c50:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4c54:	2101      	movs	r1, #1
}
   d4c56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digitalWrite(_cs, HIGH);
   d4c5a:	b280      	uxth	r0, r0
   d4c5c:	f003 bd27 	b.w	d86ae <digitalWrite>

000d4c60 <_ZN15Adafruit_LIS3DH13readRegister8Eh>:
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   d4c60:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   d4c62:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d4c66:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   d4c68:	4604      	mov	r4, r0
   d4c6a:	460d      	mov	r5, r1
  if (_cs == -1) {
   d4c6c:	d11d      	bne.n	d4caa <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x4a>
    Wire.beginTransmission(_i2caddr);
   d4c6e:	f003 fd63 	bl	d8738 <_Z19__fetch_global_Wirev>
   d4c72:	f994 101c 	ldrsb.w	r1, [r4, #28]
   d4c76:	f003 f8f3 	bl	d7e60 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
   d4c7a:	f003 fd5d 	bl	d8738 <_Z19__fetch_global_Wirev>
   d4c7e:	6803      	ldr	r3, [r0, #0]
   d4c80:	4629      	mov	r1, r5
   d4c82:	689b      	ldr	r3, [r3, #8]
   d4c84:	4798      	blx	r3
    Wire.endTransmission();
   d4c86:	f003 fd57 	bl	d8738 <_Z19__fetch_global_Wirev>
   d4c8a:	f003 f8f0 	bl	d7e6e <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 1);
   d4c8e:	f003 fd53 	bl	d8738 <_Z19__fetch_global_Wirev>
   d4c92:	7f21      	ldrb	r1, [r4, #28]
   d4c94:	2201      	movs	r2, #1
   d4c96:	f003 f8dc 	bl	d7e52 <_ZN7TwoWire11requestFromEhj>
    value = Wire.read();
   d4c9a:	f003 fd4d 	bl	d8738 <_Z19__fetch_global_Wirev>
   d4c9e:	6803      	ldr	r3, [r0, #0]
   d4ca0:	695b      	ldr	r3, [r3, #20]
   d4ca2:	4798      	blx	r3
   d4ca4:	b2c5      	uxtb	r5, r0
}
   d4ca6:	4628      	mov	r0, r5
   d4ca8:	bd38      	pop	{r3, r4, r5, pc}
	if (_sck == -1)
   d4caa:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d4cae:	3301      	adds	r3, #1
   d4cb0:	d101      	bne.n	d4cb6 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x56>
	  beginTransaction();
   d4cb2:	f7ff ff83 	bl	d4bbc <_ZN15Adafruit_LIS3DH16beginTransactionEv>
	digitalWrite(_cs, LOW);
   d4cb6:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4cba:	2100      	movs	r1, #0
   d4cbc:	b280      	uxth	r0, r0
   d4cbe:	f003 fcf6 	bl	d86ae <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
   d4cc2:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d4cc6:	4620      	mov	r0, r4
   d4cc8:	f7ff ff42 	bl	d4b50 <_ZN15Adafruit_LIS3DH7spixferEh>
    value = spixfer(0);
   d4ccc:	2100      	movs	r1, #0
   d4cce:	4620      	mov	r0, r4
   d4cd0:	f7ff ff3e 	bl	d4b50 <_ZN15Adafruit_LIS3DH7spixferEh>
   d4cd4:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
   d4cd6:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4cda:	2101      	movs	r1, #1
   d4cdc:	b280      	uxth	r0, r0
   d4cde:	f003 fce6 	bl	d86ae <digitalWrite>
    if (_sck == -1)
   d4ce2:	e7e0      	b.n	d4ca6 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x46>

000d4ce4 <_ZN15Adafruit_LIS3DH8setRangeE14lis3dh_range_t>:
{
   d4ce4:	b538      	push	{r3, r4, r5, lr}
   d4ce6:	460d      	mov	r5, r1
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
   d4ce8:	2123      	movs	r1, #35	; 0x23
{
   d4cea:	4604      	mov	r4, r0
  uint8_t r = readRegister8(LIS3DH_REG_CTRL4);
   d4cec:	f7ff ffb8 	bl	d4c60 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  r &= ~(0x30);
   d4cf0:	f020 0230 	bic.w	r2, r0, #48	; 0x30
  r |= range << 4;
   d4cf4:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL4, r);
   d4cf8:	4620      	mov	r0, r4
   d4cfa:	b2d2      	uxtb	r2, r2
}
   d4cfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(LIS3DH_REG_CTRL4, r);
   d4d00:	2123      	movs	r1, #35	; 0x23
   d4d02:	f7ff bf71 	b.w	d4be8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

000d4d06 <_ZN15Adafruit_LIS3DH8getRangeEv>:
{
   d4d06:	b508      	push	{r3, lr}
  return (lis3dh_range_t)((readRegister8(LIS3DH_REG_CTRL4) >> 4) & 0x03);
   d4d08:	2123      	movs	r1, #35	; 0x23
   d4d0a:	f7ff ffa9 	bl	d4c60 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
}
   d4d0e:	f3c0 1001 	ubfx	r0, r0, #4, #2
   d4d12:	bd08      	pop	{r3, pc}

000d4d14 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>:
{
   d4d14:	b538      	push	{r3, r4, r5, lr}
   d4d16:	460d      	mov	r5, r1
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   d4d18:	2120      	movs	r1, #32
{
   d4d1a:	4604      	mov	r4, r0
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   d4d1c:	f7ff ffa0 	bl	d4c60 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  ctl1 &= ~(0xF0); // mask off bits
   d4d20:	f000 020f 	and.w	r2, r0, #15
  ctl1 |= (dataRate << 4);
   d4d24:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   d4d28:	4620      	mov	r0, r4
   d4d2a:	b2d2      	uxtb	r2, r2
}
   d4d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   d4d30:	2120      	movs	r1, #32
   d4d32:	f7ff bf59 	b.w	d4be8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

000d4d36 <_ZN15Adafruit_LIS3DH5beginEh>:
bool Adafruit_LIS3DH::begin(uint8_t i2caddr) {
   d4d36:	b510      	push	{r4, lr}
   d4d38:	4604      	mov	r4, r0
  _i2caddr = i2caddr;
   d4d3a:	7701      	strb	r1, [r0, #28]
  if (_cs == -1) {
   d4d3c:	f990 001d 	ldrsb.w	r0, [r0, #29]
   d4d40:	1c42      	adds	r2, r0, #1
   d4d42:	d123      	bne.n	d4d8c <_ZN15Adafruit_LIS3DH5beginEh+0x56>
    Wire.begin();
   d4d44:	f003 fcf8 	bl	d8738 <_Z19__fetch_global_Wirev>
   d4d48:	f003 f850 	bl	d7dec <_ZN7TwoWire5beginEv>
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
   d4d4c:	210f      	movs	r1, #15
   d4d4e:	4620      	mov	r0, r4
   d4d50:	f7ff ff86 	bl	d4c60 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  if (deviceid != 0x33)
   d4d54:	2833      	cmp	r0, #51	; 0x33
   d4d56:	d13d      	bne.n	d4dd4 <_ZN15Adafruit_LIS3DH5beginEh+0x9e>
  writeRegister8(LIS3DH_REG_CTRL1, 0x07);
   d4d58:	2207      	movs	r2, #7
   d4d5a:	2120      	movs	r1, #32
   d4d5c:	4620      	mov	r0, r4
   d4d5e:	f7ff ff43 	bl	d4be8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  setDataRate(LIS3DH_DATARATE_400_HZ);
   d4d62:	2107      	movs	r1, #7
   d4d64:	4620      	mov	r0, r4
   d4d66:	f7ff ffd5 	bl	d4d14 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>
  writeRegister8(LIS3DH_REG_CTRL4, 0x88);
   d4d6a:	2288      	movs	r2, #136	; 0x88
   d4d6c:	2123      	movs	r1, #35	; 0x23
   d4d6e:	4620      	mov	r0, r4
   d4d70:	f7ff ff3a 	bl	d4be8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_CTRL3, 0x10);
   d4d74:	2210      	movs	r2, #16
   d4d76:	2122      	movs	r1, #34	; 0x22
   d4d78:	4620      	mov	r0, r4
   d4d7a:	f7ff ff35 	bl	d4be8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_TEMPCFG, 0x80);
   d4d7e:	4620      	mov	r0, r4
   d4d80:	2280      	movs	r2, #128	; 0x80
   d4d82:	211f      	movs	r1, #31
   d4d84:	f7ff ff30 	bl	d4be8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  return true;
   d4d88:	2001      	movs	r0, #1
}
   d4d8a:	bd10      	pop	{r4, pc}
    digitalWrite(_cs, HIGH);
   d4d8c:	2101      	movs	r1, #1
   d4d8e:	b280      	uxth	r0, r0
   d4d90:	f003 fc8d 	bl	d86ae <digitalWrite>
    pinMode(_cs, OUTPUT);
   d4d94:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4d98:	2101      	movs	r1, #1
   d4d9a:	b280      	uxth	r0, r0
   d4d9c:	f003 fc76 	bl	d868c <pinMode>
    if (_sck == -1) {
   d4da0:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4da4:	1c43      	adds	r3, r0, #1
   d4da6:	d104      	bne.n	d4db2 <_ZN15Adafruit_LIS3DH5beginEh+0x7c>
        instance().begin();
   d4da8:	f7ff feb6 	bl	d4b18 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4dac:	f000 fee0 	bl	d5b70 <_ZN8SPIClass5beginEv>
    }
   d4db0:	e7cc      	b.n	d4d4c <_ZN15Adafruit_LIS3DH5beginEh+0x16>
      pinMode(_sck, OUTPUT);
   d4db2:	2101      	movs	r1, #1
   d4db4:	b280      	uxth	r0, r0
   d4db6:	f003 fc69 	bl	d868c <pinMode>
      pinMode(_mosi, OUTPUT);
   d4dba:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d4dbe:	2101      	movs	r1, #1
   d4dc0:	b280      	uxth	r0, r0
   d4dc2:	f003 fc63 	bl	d868c <pinMode>
      pinMode(_miso, INPUT);
   d4dc6:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d4dca:	2100      	movs	r1, #0
   d4dcc:	b280      	uxth	r0, r0
   d4dce:	f003 fc5d 	bl	d868c <pinMode>
   d4dd2:	e7bb      	b.n	d4d4c <_ZN15Adafruit_LIS3DH5beginEh+0x16>
    return false;
   d4dd4:	2000      	movs	r0, #0
   d4dd6:	e7d8      	b.n	d4d8a <_ZN15Adafruit_LIS3DH5beginEh+0x54>

000d4dd8 <_ZN15Adafruit_LIS3DH4readEv>:
void Adafruit_LIS3DH::read(void) {
   d4dd8:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   d4dda:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d4dde:	3301      	adds	r3, #1
void Adafruit_LIS3DH::read(void) {
   d4de0:	4604      	mov	r4, r0
  if (_cs == -1) {
   d4de2:	d176      	bne.n	d4ed2 <_ZN15Adafruit_LIS3DH4readEv+0xfa>
    Wire.beginTransmission(_i2caddr);
   d4de4:	f003 fca8 	bl	d8738 <_Z19__fetch_global_Wirev>
   d4de8:	f994 101c 	ldrsb.w	r1, [r4, #28]
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   d4dec:	4d5c      	ldr	r5, [pc, #368]	; (d4f60 <_ZN15Adafruit_LIS3DH4readEv+0x188>)
    Wire.beginTransmission(_i2caddr);
   d4dee:	f003 f837 	bl	d7e60 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(LIS3DH_REG_OUT_X_L | 0x80); // 0x80 for autoincrement
   d4df2:	f003 fca1 	bl	d8738 <_Z19__fetch_global_Wirev>
   d4df6:	21a8      	movs	r1, #168	; 0xa8
   d4df8:	f7ff fe7a 	bl	d4af0 <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
   d4dfc:	f003 fc9c 	bl	d8738 <_Z19__fetch_global_Wirev>
   d4e00:	f003 f835 	bl	d7e6e <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 6);
   d4e04:	f003 fc98 	bl	d8738 <_Z19__fetch_global_Wirev>
   d4e08:	7f21      	ldrb	r1, [r4, #28]
   d4e0a:	2206      	movs	r2, #6
   d4e0c:	f003 f821 	bl	d7e52 <_ZN7TwoWire11requestFromEhj>
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   d4e10:	f003 fc92 	bl	d8738 <_Z19__fetch_global_Wirev>
   d4e14:	6803      	ldr	r3, [r0, #0]
   d4e16:	695b      	ldr	r3, [r3, #20]
   d4e18:	4798      	blx	r3
   d4e1a:	80e0      	strh	r0, [r4, #6]
   d4e1c:	f003 fc8c 	bl	d8738 <_Z19__fetch_global_Wirev>
   d4e20:	6803      	ldr	r3, [r0, #0]
   d4e22:	695b      	ldr	r3, [r3, #20]
   d4e24:	4798      	blx	r3
   d4e26:	88e3      	ldrh	r3, [r4, #6]
   d4e28:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   d4e2c:	4318      	orrs	r0, r3
   d4e2e:	80e0      	strh	r0, [r4, #6]
    y = Wire.read(); y |= ((uint16_t)Wire.read()) << 8;
   d4e30:	f003 fc82 	bl	d8738 <_Z19__fetch_global_Wirev>
   d4e34:	6803      	ldr	r3, [r0, #0]
   d4e36:	695b      	ldr	r3, [r3, #20]
   d4e38:	4798      	blx	r3
   d4e3a:	8120      	strh	r0, [r4, #8]
   d4e3c:	f003 fc7c 	bl	d8738 <_Z19__fetch_global_Wirev>
   d4e40:	6803      	ldr	r3, [r0, #0]
   d4e42:	695b      	ldr	r3, [r3, #20]
   d4e44:	4798      	blx	r3
   d4e46:	8923      	ldrh	r3, [r4, #8]
   d4e48:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   d4e4c:	4318      	orrs	r0, r3
   d4e4e:	8120      	strh	r0, [r4, #8]
    z = Wire.read(); z |= ((uint16_t)Wire.read()) << 8;
   d4e50:	f003 fc72 	bl	d8738 <_Z19__fetch_global_Wirev>
   d4e54:	6803      	ldr	r3, [r0, #0]
   d4e56:	695b      	ldr	r3, [r3, #20]
   d4e58:	4798      	blx	r3
   d4e5a:	8160      	strh	r0, [r4, #10]
   d4e5c:	f003 fc6c 	bl	d8738 <_Z19__fetch_global_Wirev>
   d4e60:	6803      	ldr	r3, [r0, #0]
   d4e62:	695b      	ldr	r3, [r3, #20]
   d4e64:	4798      	blx	r3
   d4e66:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   d4e6a:	8965      	ldrh	r5, [r4, #10]
   d4e6c:	4328      	orrs	r0, r5
   d4e6e:	8160      	strh	r0, [r4, #10]
  uint8_t range = getRange();
   d4e70:	4620      	mov	r0, r4
   d4e72:	f7ff ff48 	bl	d4d06 <_ZN15Adafruit_LIS3DH8getRangeEv>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   d4e76:	2803      	cmp	r0, #3
   d4e78:	d069      	beq.n	d4f4e <_ZN15Adafruit_LIS3DH4readEv+0x176>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   d4e7a:	2802      	cmp	r0, #2
   d4e7c:	d06a      	beq.n	d4f54 <_ZN15Adafruit_LIS3DH4readEv+0x17c>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   d4e7e:	2801      	cmp	r0, #1
   d4e80:	d06b      	beq.n	d4f5a <_ZN15Adafruit_LIS3DH4readEv+0x182>
  if (range == LIS3DH_RANGE_2_G) divider = 16380;
   d4e82:	2800      	cmp	r0, #0
   d4e84:	f643 73fc 	movw	r3, #16380	; 0x3ffc
   d4e88:	bf18      	it	ne
   d4e8a:	2301      	movne	r3, #1
  x_g = (float)x / divider;
   d4e8c:	ee07 3a90 	vmov	s15, r3
   d4e90:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d4e94:	ee07 3a10 	vmov	s14, r3
   d4e98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4e9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   d4ea0:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
  x_g = (float)x / divider;
   d4ea4:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_g = (float)y / divider;
   d4ea8:	ee07 3a10 	vmov	s14, r3
   d4eac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  x_g = (float)x / divider;
   d4eb0:	edc4 6a03 	vstr	s13, [r4, #12]
  y_g = (float)y / divider;
   d4eb4:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_g = (float)z / divider;
   d4eb8:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d4ebc:	ee07 3a10 	vmov	s14, r3
   d4ec0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   d4ec4:	edc4 6a04 	vstr	s13, [r4, #16]
  z_g = (float)z / divider;
   d4ec8:	eec7 6a27 	vdiv.f32	s13, s14, s15
   d4ecc:	edc4 6a05 	vstr	s13, [r4, #20]
}
   d4ed0:	bd38      	pop	{r3, r4, r5, pc}
    if (_sck == -1)
   d4ed2:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d4ed6:	3301      	adds	r3, #1
   d4ed8:	d101      	bne.n	d4ede <_ZN15Adafruit_LIS3DH4readEv+0x106>
      beginTransaction();
   d4eda:	f7ff fe6f 	bl	d4bbc <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   d4ede:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4ee2:	2100      	movs	r1, #0
   d4ee4:	b280      	uxth	r0, r0
   d4ee6:	f003 fbe2 	bl	d86ae <digitalWrite>
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high
   d4eea:	21e8      	movs	r1, #232	; 0xe8
   d4eec:	4620      	mov	r0, r4
   d4eee:	f7ff fe2f 	bl	d4b50 <_ZN15Adafruit_LIS3DH7spixferEh>
    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
   d4ef2:	21ff      	movs	r1, #255	; 0xff
   d4ef4:	4620      	mov	r0, r4
   d4ef6:	f7ff fe2b 	bl	d4b50 <_ZN15Adafruit_LIS3DH7spixferEh>
   d4efa:	21ff      	movs	r1, #255	; 0xff
   d4efc:	80e0      	strh	r0, [r4, #6]
   d4efe:	4620      	mov	r0, r4
   d4f00:	f7ff fe26 	bl	d4b50 <_ZN15Adafruit_LIS3DH7spixferEh>
   d4f04:	88e3      	ldrh	r3, [r4, #6]
   d4f06:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d4f0a:	80e0      	strh	r0, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
   d4f0c:	21ff      	movs	r1, #255	; 0xff
   d4f0e:	4620      	mov	r0, r4
   d4f10:	f7ff fe1e 	bl	d4b50 <_ZN15Adafruit_LIS3DH7spixferEh>
   d4f14:	21ff      	movs	r1, #255	; 0xff
   d4f16:	8120      	strh	r0, [r4, #8]
   d4f18:	4620      	mov	r0, r4
   d4f1a:	f7ff fe19 	bl	d4b50 <_ZN15Adafruit_LIS3DH7spixferEh>
   d4f1e:	8923      	ldrh	r3, [r4, #8]
   d4f20:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d4f24:	8120      	strh	r0, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
   d4f26:	21ff      	movs	r1, #255	; 0xff
   d4f28:	4620      	mov	r0, r4
   d4f2a:	f7ff fe11 	bl	d4b50 <_ZN15Adafruit_LIS3DH7spixferEh>
   d4f2e:	21ff      	movs	r1, #255	; 0xff
   d4f30:	8160      	strh	r0, [r4, #10]
   d4f32:	4620      	mov	r0, r4
   d4f34:	f7ff fe0c 	bl	d4b50 <_ZN15Adafruit_LIS3DH7spixferEh>
   d4f38:	8963      	ldrh	r3, [r4, #10]
   d4f3a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d4f3e:	8160      	strh	r0, [r4, #10]
    digitalWrite(_cs, HIGH);
   d4f40:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4f44:	2101      	movs	r1, #1
   d4f46:	b280      	uxth	r0, r0
   d4f48:	f003 fbb1 	bl	d86ae <digitalWrite>
    if (_sck == -1)
   d4f4c:	e790      	b.n	d4e70 <_ZN15Adafruit_LIS3DH4readEv+0x98>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   d4f4e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d4f52:	e79b      	b.n	d4e8c <_ZN15Adafruit_LIS3DH4readEv+0xb4>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   d4f54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   d4f58:	e798      	b.n	d4e8c <_ZN15Adafruit_LIS3DH4readEv+0xb4>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   d4f5a:	f641 73fe 	movw	r3, #8190	; 0x1ffe
   d4f5e:	e795      	b.n	d4e8c <_ZN15Adafruit_LIS3DH4readEv+0xb4>
   d4f60:	00ffff00 	.word	0x00ffff00

000d4f64 <_ZN15Adafruit_LIS3DH8getEventEP15sensors_event_t>:
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
   d4f64:	460c      	mov	r4, r1
   d4f66:	4605      	mov	r5, r0
   d4f68:	b508      	push	{r3, lr}
  memset(event, 0, sizeof(sensors_event_t));
   d4f6a:	2220      	movs	r2, #32
   d4f6c:	2100      	movs	r1, #0
   d4f6e:	1d20      	adds	r0, r4, #4
   d4f70:	f004 fa8a 	bl	d9488 <memset>
  event->version   = sizeof(sensors_event_t);
   d4f74:	2324      	movs	r3, #36	; 0x24
   d4f76:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   d4f78:	69ab      	ldr	r3, [r5, #24]
   d4f7a:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
   d4f7c:	2301      	movs	r3, #1
   d4f7e:	60a3      	str	r3, [r4, #8]
  event->timestamp = 0;
   d4f80:	2300      	movs	r3, #0
   d4f82:	6123      	str	r3, [r4, #16]
  read();
   d4f84:	4628      	mov	r0, r5
   d4f86:	f7ff ff27 	bl	d4dd8 <_ZN15Adafruit_LIS3DH4readEv>
  event->acceleration.x = x_g;
   d4f8a:	68eb      	ldr	r3, [r5, #12]
   d4f8c:	6163      	str	r3, [r4, #20]
  event->acceleration.y = y_g;
   d4f8e:	692b      	ldr	r3, [r5, #16]
   d4f90:	61a3      	str	r3, [r4, #24]
  event->acceleration.z = z_g;
   d4f92:	696b      	ldr	r3, [r5, #20]
   d4f94:	61e3      	str	r3, [r4, #28]

000d4f96 <_ZN10HttpClientC1Ev>:
static const uint16_t TIMEOUT = 5000; // Allow maximum 5s between data packets.

/**
* Constructor.
*/
HttpClient::HttpClient()
   d4f96:	b510      	push	{r4, lr}
   d4f98:	4604      	mov	r4, r0
   d4f9a:	f003 f9b9 	bl	d8310 <_ZN9TCPClientC1Ev>
{

}
   d4f9e:	4620      	mov	r0, r4
   d4fa0:	bd10      	pop	{r4, pc}
	...

000d4fa4 <_ZN10HttpClient10sendHeaderEPKcS1_>:

/**
* Method to send a header, should only be called from within the class.
*/
void HttpClient::sendHeader(const char* aHeaderName, const char* aHeaderValue)
{
   d4fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    client.print(aHeaderName);
    client.print(": ");
   d4fa6:	4f0f      	ldr	r7, [pc, #60]	; (d4fe4 <_ZN10HttpClient10sendHeaderEPKcS1_+0x40>)
{
   d4fa8:	4605      	mov	r5, r0
   d4faa:	4614      	mov	r4, r2
   d4fac:	460e      	mov	r6, r1
    client.print(aHeaderName);
   d4fae:	f002 fb19 	bl	d75e4 <_ZN5Print5printEPKc>
    client.print(": ");
   d4fb2:	4639      	mov	r1, r7
   d4fb4:	4628      	mov	r0, r5
   d4fb6:	f002 fb15 	bl	d75e4 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   d4fba:	4621      	mov	r1, r4
   d4fbc:	4628      	mov	r0, r5
   d4fbe:	f002 fb2a 	bl	d7616 <_ZN5Print7printlnEPKc>

    #ifdef LOGGING
    Serial.print(aHeaderName);
   d4fc2:	f002 fe2d 	bl	d7c20 <_Z16_fetch_usbserialv>
   d4fc6:	4631      	mov	r1, r6
   d4fc8:	f002 fb0c 	bl	d75e4 <_ZN5Print5printEPKc>
    Serial.print(": ");
   d4fcc:	f002 fe28 	bl	d7c20 <_Z16_fetch_usbserialv>
   d4fd0:	4639      	mov	r1, r7
   d4fd2:	f002 fb07 	bl	d75e4 <_ZN5Print5printEPKc>
    Serial.println(aHeaderValue);
   d4fd6:	f002 fe23 	bl	d7c20 <_Z16_fetch_usbserialv>
   d4fda:	4621      	mov	r1, r4
    #endif
}
   d4fdc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Serial.println(aHeaderValue);
   d4fe0:	f002 bb19 	b.w	d7616 <_ZN5Print7printlnEPKc>
   d4fe4:	000d9834 	.word	0x000d9834

000d4fe8 <_ZN10HttpClient10sendHeaderEPKc>:
    Serial.println(aHeaderValue);
    #endif
}

void HttpClient::sendHeader(const char* aHeaderName)
{
   d4fe8:	b510      	push	{r4, lr}
   d4fea:	460c      	mov	r4, r1
    client.println(aHeaderName);
   d4fec:	f002 fb13 	bl	d7616 <_ZN5Print7printlnEPKc>

    #ifdef LOGGING
    Serial.println(aHeaderName);
   d4ff0:	f002 fe16 	bl	d7c20 <_Z16_fetch_usbserialv>
   d4ff4:	4621      	mov	r1, r4
    #endif
}
   d4ff6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Serial.println(aHeaderName);
   d4ffa:	f002 bb0c 	b.w	d7616 <_ZN5Print7printlnEPKc>
	...

000d5000 <_ZN10HttpClient10sendHeaderEPKci>:
{
   d5000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    client.print(": ");
   d5002:	4f10      	ldr	r7, [pc, #64]	; (d5044 <_ZN10HttpClient10sendHeaderEPKci+0x44>)
{
   d5004:	4605      	mov	r5, r0
   d5006:	4614      	mov	r4, r2
   d5008:	460e      	mov	r6, r1
    client.print(aHeaderName);
   d500a:	f002 faeb 	bl	d75e4 <_ZN5Print5printEPKc>
    client.print(": ");
   d500e:	4639      	mov	r1, r7
   d5010:	4628      	mov	r0, r5
   d5012:	f002 fae7 	bl	d75e4 <_ZN5Print5printEPKc>
    client.println(aHeaderValue);
   d5016:	220a      	movs	r2, #10
   d5018:	4621      	mov	r1, r4
   d501a:	4628      	mov	r0, r5
   d501c:	f7ff fbd6 	bl	d47cc <_ZN5Print7printlnIiLi0EEEjT_i>
    Serial.print(aHeaderName);
   d5020:	f002 fdfe 	bl	d7c20 <_Z16_fetch_usbserialv>
   d5024:	4631      	mov	r1, r6
   d5026:	f002 fadd 	bl	d75e4 <_ZN5Print5printEPKc>
    Serial.print(": ");
   d502a:	f002 fdf9 	bl	d7c20 <_Z16_fetch_usbserialv>
   d502e:	4639      	mov	r1, r7
   d5030:	f002 fad8 	bl	d75e4 <_ZN5Print5printEPKc>
    Serial.println(aHeaderValue);
   d5034:	f002 fdf4 	bl	d7c20 <_Z16_fetch_usbserialv>
   d5038:	220a      	movs	r2, #10
   d503a:	4621      	mov	r1, r4
   d503c:	f7ff fbc6 	bl	d47cc <_ZN5Print7printlnIiLi0EEEjT_i>
}
   d5040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5042:	bf00      	nop
   d5044:	000d9834 	.word	0x000d9834

000d5048 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc>:
* Method to send an HTTP Request. Allocate variables in your application code
* in the aResponse struct and set the headers and the options in the aRequest
* struct.
*/
void HttpClient::request(http_request_t &aRequest, http_response_t &aResponse, http_header_t headers[], const char* aHttpMethod)
{
   d5048:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d504c:	460e      	mov	r6, r1
   d504e:	b091      	sub	sp, #68	; 0x44
   d5050:	461f      	mov	r7, r3
    // If a proper response code isn't received it will be set to -1.
    aResponse.status = -1;
   d5052:	f04f 33ff 	mov.w	r3, #4294967295
   d5056:	6013      	str	r3, [r2, #0]
{
   d5058:	4604      	mov	r4, r0
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d505a:	2100      	movs	r1, #0
   d505c:	4630      	mov	r0, r6
   d505e:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
   d5062:	4691      	mov	r9, r2
   d5064:	f001 f86e 	bl	d6144 <_ZNK6String6equalsEPKc>
   d5068:	f8d6 e038 	ldr.w	lr, [r6, #56]	; 0x38

    // NOTE: The default port tertiary statement is unpredictable if the request structure is not initialised
    // http_request_t request = {0} or memset(&request, 0, sizeof(http_request_t)) should be used
    // to ensure all fields are zero
    bool connected = false;
    if(aRequest.hostname!=NULL) {
   d506c:	4603      	mov	r3, r0
   d506e:	2800      	cmp	r0, #0
   d5070:	d16e      	bne.n	d5150 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x108>
	const char * c_str() const { return buffer; }
   d5072:	f1be 0f00 	cmp.w	lr, #0
   d5076:	bf14      	ite	ne
   d5078:	4672      	movne	r2, lr
   d507a:	2250      	moveq	r2, #80	; 0x50
        connected = client.connect(aRequest.hostname.c_str(), (aRequest.port) ? aRequest.port : 80 );
   d507c:	6831      	ldr	r1, [r6, #0]
   d507e:	b292      	uxth	r2, r2
   d5080:	4620      	mov	r0, r4
   d5082:	f003 f959 	bl	d8338 <_ZN9TCPClient7connectEPKctm>
    }   else {
        connected = client.connect(aRequest.ip, aRequest.port);
   d5086:	1e05      	subs	r5, r0, #0
   d5088:	bf18      	it	ne
   d508a:	2501      	movne	r5, #1
    }

    #ifdef LOGGING
    if (connected) {
   d508c:	2d00      	cmp	r5, #0
   d508e:	d07e      	beq.n	d518e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x146>
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
   d5090:	2100      	movs	r1, #0
   d5092:	4630      	mov	r0, r6
   d5094:	f001 f856 	bl	d6144 <_ZNK6String6equalsEPKc>
        if(aRequest.hostname!=NULL) {
   d5098:	2800      	cmp	r0, #0
   d509a:	d16c      	bne.n	d5176 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x12e>
            Serial.print("HttpClient>\tConnecting to: ");
   d509c:	f002 fdc0 	bl	d7c20 <_Z16_fetch_usbserialv>
   d50a0:	49bb      	ldr	r1, [pc, #748]	; (d5390 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x348>)
   d50a2:	f002 fa9f 	bl	d75e4 <_ZN5Print5printEPKc>
            Serial.print(aRequest.hostname);
   d50a6:	f002 fdbb 	bl	d7c20 <_Z16_fetch_usbserialv>
   d50aa:	6831      	ldr	r1, [r6, #0]
   d50ac:	f002 fa9a 	bl	d75e4 <_ZN5Print5printEPKc>
        } else {
            Serial.print("HttpClient>\tConnecting to IP: ");
            Serial.print(aRequest.ip);
        }
        Serial.print(":");
   d50b0:	f002 fdb6 	bl	d7c20 <_Z16_fetch_usbserialv>
   d50b4:	49b7      	ldr	r1, [pc, #732]	; (d5394 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x34c>)
   d50b6:	f002 fa95 	bl	d75e4 <_ZN5Print5printEPKc>
        Serial.println(aRequest.port);
   d50ba:	f002 fdb1 	bl	d7c20 <_Z16_fetch_usbserialv>
   d50be:	220a      	movs	r2, #10
   d50c0:	6bb1      	ldr	r1, [r6, #56]	; 0x38
   d50c2:	f7ff fb83 	bl	d47cc <_ZN5Print7printlnIiLi0EEEjT_i>
    //
    // Send HTTP Headers
    //

    // Send initial headers (only HTTP 1.0 is supported for now).
    client.print(aHttpMethod);
   d50c6:	4641      	mov	r1, r8
   d50c8:	4620      	mov	r0, r4
   d50ca:	f002 fa8b 	bl	d75e4 <_ZN5Print5printEPKc>
    client.print(" ");
   d50ce:	49b2      	ldr	r1, [pc, #712]	; (d5398 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x350>)
   d50d0:	4620      	mov	r0, r4
   d50d2:	f002 fa87 	bl	d75e4 <_ZN5Print5printEPKc>
    client.print(aRequest.path);
   d50d6:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   d50d8:	4620      	mov	r0, r4
   d50da:	f002 fa83 	bl	d75e4 <_ZN5Print5printEPKc>
    client.print(" HTTP/1.0\r\n");
   d50de:	49af      	ldr	r1, [pc, #700]	; (d539c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x354>)
   d50e0:	4620      	mov	r0, r4
   d50e2:	f002 fa7f 	bl	d75e4 <_ZN5Print5printEPKc>

    #ifdef LOGGING
    Serial.println("HttpClient>\tStart of HTTP Request.");
   d50e6:	f002 fd9b 	bl	d7c20 <_Z16_fetch_usbserialv>
   d50ea:	49ad      	ldr	r1, [pc, #692]	; (d53a0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x358>)
   d50ec:	f002 fa93 	bl	d7616 <_ZN5Print7printlnEPKc>
    Serial.print(aHttpMethod);
   d50f0:	f002 fd96 	bl	d7c20 <_Z16_fetch_usbserialv>
   d50f4:	4641      	mov	r1, r8
   d50f6:	f002 fa75 	bl	d75e4 <_ZN5Print5printEPKc>
    Serial.print(" ");
   d50fa:	f002 fd91 	bl	d7c20 <_Z16_fetch_usbserialv>
   d50fe:	49a6      	ldr	r1, [pc, #664]	; (d5398 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x350>)
   d5100:	f002 fa70 	bl	d75e4 <_ZN5Print5printEPKc>
    Serial.print(aRequest.path);
   d5104:	f002 fd8c 	bl	d7c20 <_Z16_fetch_usbserialv>
   d5108:	6ab1      	ldr	r1, [r6, #40]	; 0x28
   d510a:	f002 fa6b 	bl	d75e4 <_ZN5Print5printEPKc>
    Serial.print(" HTTP/1.0\r\n");
   d510e:	f002 fd87 	bl	d7c20 <_Z16_fetch_usbserialv>
   d5112:	49a2      	ldr	r1, [pc, #648]	; (d539c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x354>)
   d5114:	f002 fa66 	bl	d75e4 <_ZN5Print5printEPKc>
    #endif

    // Send General and Request Headers.
    sendHeader("Connection", "close"); // Not supporting keep-alive for now.
   d5118:	49a2      	ldr	r1, [pc, #648]	; (d53a4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x35c>)
   d511a:	4aa3      	ldr	r2, [pc, #652]	; (d53a8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x360>)
   d511c:	4620      	mov	r0, r4
   d511e:	f7ff ff41 	bl	d4fa4 <_ZN10HttpClient10sendHeaderEPKcS1_>
   d5122:	2100      	movs	r1, #0
   d5124:	4630      	mov	r0, r6
   d5126:	f001 f80d 	bl	d6144 <_ZNK6String6equalsEPKc>
    if(aRequest.hostname!=NULL) {
   d512a:	b920      	cbnz	r0, d5136 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xee>
        sendHeader("HOST", aRequest.hostname.c_str());
   d512c:	6832      	ldr	r2, [r6, #0]
   d512e:	499f      	ldr	r1, [pc, #636]	; (d53ac <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x364>)
   d5130:	4620      	mov	r0, r4
   d5132:	f7ff ff37 	bl	d4fa4 <_ZN10HttpClient10sendHeaderEPKcS1_>
    }

    //Send Entity Headers
    // TODO: Check the standard, currently sending Content-Length : 0 for empty
    // POST requests, and no content-length for other types.
    if (aRequest.body != NULL) {
   d5136:	f106 0a3c 	add.w	sl, r6, #60	; 0x3c
   d513a:	2100      	movs	r1, #0
   d513c:	4650      	mov	r0, sl
   d513e:	f001 f801 	bl	d6144 <_ZNK6String6equalsEPKc>
   d5142:	bb78      	cbnz	r0, d51a4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x15c>
        sendHeader("Content-Length", (aRequest.body).length());
   d5144:	6c72      	ldr	r2, [r6, #68]	; 0x44
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
        sendHeader("Content-Length", 0);
   d5146:	499a      	ldr	r1, [pc, #616]	; (d53b0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x368>)
   d5148:	4620      	mov	r0, r4
   d514a:	f7ff ff59 	bl	d5000 <_ZN10HttpClient10sendHeaderEPKci>
   d514e:	e030      	b.n	d51b2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16a>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5150:	4b98      	ldr	r3, [pc, #608]	; (d53b4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x36c>)
   d5152:	930a      	str	r3, [sp, #40]	; 0x28
   d5154:	f106 0c14 	add.w	ip, r6, #20
   d5158:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d515c:	ad0b      	add	r5, sp, #44	; 0x2c
   d515e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d5160:	f8dc 3000 	ldr.w	r3, [ip]
   d5164:	702b      	strb	r3, [r5, #0]
        connected = client.connect(aRequest.ip, aRequest.port);
   d5166:	fa1f f28e 	uxth.w	r2, lr
   d516a:	2300      	movs	r3, #0
   d516c:	a90a      	add	r1, sp, #40	; 0x28
   d516e:	4620      	mov	r0, r4
   d5170:	f002 ffaf 	bl	d80d2 <_ZN9TCPClient7connectE9IPAddresstm>
   d5174:	e787      	b.n	d5086 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3e>
            Serial.print("HttpClient>\tConnecting to IP: ");
   d5176:	f002 fd53 	bl	d7c20 <_Z16_fetch_usbserialv>
   d517a:	498f      	ldr	r1, [pc, #572]	; (d53b8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x370>)
   d517c:	f002 fa32 	bl	d75e4 <_ZN5Print5printEPKc>
            Serial.print(aRequest.ip);
   d5180:	f002 fd4e 	bl	d7c20 <_Z16_fetch_usbserialv>
   d5184:	f106 0110 	add.w	r1, r6, #16
   d5188:	f002 fa33 	bl	d75f2 <_ZN5Print5printERK9Printable>
   d518c:	e790      	b.n	d50b0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x68>
        Serial.println("HttpClient>\tConnection failed.");
   d518e:	f002 fd47 	bl	d7c20 <_Z16_fetch_usbserialv>
   d5192:	498a      	ldr	r1, [pc, #552]	; (d53bc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x374>)
   d5194:	f002 fa3f 	bl	d7616 <_ZN5Print7printlnEPKc>
        client.stop();
   d5198:	4620      	mov	r0, r4
   d519a:	f003 f86f 	bl	d827c <_ZN9TCPClient4stopEv>
    }
    // Return the entire message body from bodyPos+4 till end.
    aResponse.body = "";
    aResponse.body += raw_response.substring(bodyPos+4);
    aResponse.status = atoi(statusCode.c_str());
}
   d519e:	b011      	add	sp, #68	; 0x44
   d51a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    } else if (strcmp(aHttpMethod, HTTP_METHOD_POST) == 0) { //Check to see if its a Post method.
   d51a4:	4986      	ldr	r1, [pc, #536]	; (d53c0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x378>)
   d51a6:	4640      	mov	r0, r8
   d51a8:	f004 f99a 	bl	d94e0 <strcmp>
   d51ac:	4602      	mov	r2, r0
   d51ae:	2800      	cmp	r0, #0
   d51b0:	d0c9      	beq.n	d5146 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0xfe>
    if (headers != NULL)
   d51b2:	b15f      	cbz	r7, d51cc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x184>
        while (headers[i].header != NULL)
   d51b4:	6839      	ldr	r1, [r7, #0]
   d51b6:	b149      	cbz	r1, d51cc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x184>
            if (headers[i].value != NULL) {
   d51b8:	687a      	ldr	r2, [r7, #4]
                sendHeader(headers[i].header, headers[i].value);
   d51ba:	4620      	mov	r0, r4
            if (headers[i].value != NULL) {
   d51bc:	b11a      	cbz	r2, d51c6 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x17e>
                sendHeader(headers[i].header, headers[i].value);
   d51be:	f7ff fef1 	bl	d4fa4 <_ZN10HttpClient10sendHeaderEPKcS1_>
            i++;
   d51c2:	3708      	adds	r7, #8
        while (headers[i].header != NULL)
   d51c4:	e7f6      	b.n	d51b4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x16c>
                sendHeader(headers[i].header);
   d51c6:	f7ff ff0f 	bl	d4fe8 <_ZN10HttpClient10sendHeaderEPKc>
   d51ca:	e7fa      	b.n	d51c2 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x17a>
    client.println();
   d51cc:	4620      	mov	r0, r4
   d51ce:	f002 fa16 	bl	d75fe <_ZN5Print7printlnEv>
    client.flush();
   d51d2:	4620      	mov	r0, r4
   d51d4:	f002 fe70 	bl	d7eb8 <_ZN9TCPClient5flushEv>
   d51d8:	2100      	movs	r1, #0
   d51da:	4650      	mov	r0, sl
   d51dc:	f000 ffb2 	bl	d6144 <_ZNK6String6equalsEPKc>
    if (aRequest.body != NULL) {
   d51e0:	b940      	cbnz	r0, d51f4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1ac>
        client.println(aRequest.body);
   d51e2:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   d51e4:	4620      	mov	r0, r4
   d51e6:	f002 fa16 	bl	d7616 <_ZN5Print7printlnEPKc>
        Serial.println(aRequest.body);
   d51ea:	f002 fd19 	bl	d7c20 <_Z16_fetch_usbserialv>
   d51ee:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
   d51f0:	f002 fa11 	bl	d7616 <_ZN5Print7printlnEPKc>
    Serial.println("HttpClient>\tEnd of HTTP Request.");
   d51f4:	f002 fd14 	bl	d7c20 <_Z16_fetch_usbserialv>
    memset(&buffer[0], 0, sizeof(buffer));
   d51f8:	f104 0a1c 	add.w	sl, r4, #28
    Serial.println("HttpClient>\tEnd of HTTP Request.");
   d51fc:	4971      	ldr	r1, [pc, #452]	; (d53c4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x37c>)
   d51fe:	f002 fa0a 	bl	d7616 <_ZN5Print7printlnEPKc>
    memset(&buffer[0], 0, sizeof(buffer));
   d5202:	f44f 6280 	mov.w	r2, #1024	; 0x400
   d5206:	2100      	movs	r1, #0
   d5208:	4650      	mov	r0, sl
   d520a:	f004 f93d 	bl	d9488 <memset>

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d520e:	f000 f951 	bl	d54b4 <HAL_Timer_Get_Milli_Seconds>
   d5212:	9000      	str	r0, [sp, #0]
   d5214:	f000 f94e 	bl	d54b4 <HAL_Timer_Get_Milli_Seconds>
    unsigned int bufferPosition = 0;
   d5218:	2700      	movs	r7, #0
   d521a:	9001      	str	r0, [sp, #4]
        int bytes = client.available();
   d521c:	4620      	mov	r0, r4
   d521e:	f002 ffd3 	bl	d81c8 <_ZN9TCPClient9availableEv>
        if(bytes) {
   d5222:	4606      	mov	r6, r0
   d5224:	b1b0      	cbz	r0, d5254 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x20c>
            Serial.print("\r\nHttpClient>\tReceiving TCP transaction of ");
   d5226:	f002 fcfb 	bl	d7c20 <_Z16_fetch_usbserialv>
   d522a:	4967      	ldr	r1, [pc, #412]	; (d53c8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x380>)
   d522c:	f002 f9da 	bl	d75e4 <_ZN5Print5printEPKc>
            Serial.print(bytes);
   d5230:	f002 fcf6 	bl	d7c20 <_Z16_fetch_usbserialv>
        if (n < 0 && base == 10) {
   d5234:	2e00      	cmp	r6, #0
   d5236:	4683      	mov	fp, r0
   d5238:	da27      	bge.n	d528a <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x242>
            t = print('-');
   d523a:	212d      	movs	r1, #45	; 0x2d
   d523c:	f002 f9d6 	bl	d75ec <_ZN5Print5printEc>
            val = -n;
   d5240:	4271      	negs	r1, r6
        return printNumber(val, base) + t;
   d5242:	220a      	movs	r2, #10
   d5244:	4658      	mov	r0, fp
   d5246:	f002 f9f0 	bl	d762a <_ZN5Print11printNumberEmh>
            Serial.println(" bytes.");
   d524a:	f002 fce9 	bl	d7c20 <_Z16_fetch_usbserialv>
   d524e:	495f      	ldr	r1, [pc, #380]	; (d53cc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x384>)
   d5250:	f002 f9e1 	bl	d7616 <_ZN5Print7printlnEPKc>
    unsigned int bufferPosition = 0;
   d5254:	f04f 0b00 	mov.w	fp, #0
        while (client.available()) {
   d5258:	4620      	mov	r0, r4
   d525a:	f002 ffb5 	bl	d81c8 <_ZN9TCPClient9availableEv>
   d525e:	b338      	cbz	r0, d52b0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x268>
            char c = client.read();
   d5260:	4620      	mov	r0, r4
   d5262:	f002 feea 	bl	d803a <_ZN9TCPClient4readEv>
   d5266:	fa5f f880 	uxtb.w	r8, r0
            Serial.print(c);
   d526a:	f002 fcd9 	bl	d7c20 <_Z16_fetch_usbserialv>
   d526e:	4641      	mov	r1, r8
   d5270:	f002 f9bc 	bl	d75ec <_ZN5Print5printEc>
   d5274:	f000 f91e 	bl	d54b4 <HAL_Timer_Get_Milli_Seconds>
            if (bufferPosition < sizeof(buffer)-1) {
   d5278:	f240 33fe 	movw	r3, #1022	; 0x3fe
   d527c:	429f      	cmp	r7, r3
   d527e:	9000      	str	r0, [sp, #0]
   d5280:	d805      	bhi.n	d528e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x246>
                buffer[bufferPosition] = c;
   d5282:	f80a 8007 	strb.w	r8, [sl, r7]
            bufferPosition++;
   d5286:	3701      	adds	r7, #1
        while (client.available()) {
   d5288:	e7e6      	b.n	d5258 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x210>
            val = n;
   d528a:	4631      	mov	r1, r6
   d528c:	e7d9      	b.n	d5242 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1fa>
            } else if ((bufferPosition == sizeof(buffer)-1)) {
   d528e:	f240 33ff 	movw	r3, #1023	; 0x3ff
   d5292:	429f      	cmp	r7, r3
   d5294:	d1f7      	bne.n	d5286 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23e>
                buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d5296:	2300      	movs	r3, #0
   d5298:	f884 341b 	strb.w	r3, [r4, #1051]	; 0x41b
                client.stop();
   d529c:	4620      	mov	r0, r4
   d529e:	f002 ffed 	bl	d827c <_ZN9TCPClient4stopEv>
                Serial.println("HttpClient>\tError: Response body larger than buffer.");
   d52a2:	f002 fcbd 	bl	d7c20 <_Z16_fetch_usbserialv>
   d52a6:	494a      	ldr	r1, [pc, #296]	; (d53d0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x388>)
   d52a8:	f002 f9b5 	bl	d7616 <_ZN5Print7printlnEPKc>
                error = true;
   d52ac:	46ab      	mov	fp, r5
   d52ae:	e7ea      	b.n	d5286 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x23e>
        buffer[bufferPosition] = '\0'; // Null-terminate buffer
   d52b0:	19e3      	adds	r3, r4, r7
   d52b2:	7718      	strb	r0, [r3, #28]
        if (bytes) {
   d52b4:	b126      	cbz	r6, d52c0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x278>
            Serial.print("\r\nHttpClient>\tEnd of TCP transaction.");
   d52b6:	f002 fcb3 	bl	d7c20 <_Z16_fetch_usbserialv>
   d52ba:	4946      	ldr	r1, [pc, #280]	; (d53d4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x38c>)
   d52bc:	f002 f992 	bl	d75e4 <_ZN5Print5printEPKc>
   d52c0:	f000 f8f8 	bl	d54b4 <HAL_Timer_Get_Milli_Seconds>
        timeout = millis() - lastRead > TIMEOUT;
   d52c4:	9b00      	ldr	r3, [sp, #0]
   d52c6:	1ac6      	subs	r6, r0, r3
        if (!error && !timeout) {
   d52c8:	f1bb 0f00 	cmp.w	fp, #0
   d52cc:	d106      	bne.n	d52dc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x294>
   d52ce:	f241 3388 	movw	r3, #5000	; 0x1388
   d52d2:	429e      	cmp	r6, r3
   d52d4:	d802      	bhi.n	d52dc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x294>
            delay(200);
   d52d6:	20c8      	movs	r0, #200	; 0xc8
   d52d8:	f002 fafa 	bl	d78d0 <delay>
    } while (client.connected() && !timeout && !error);
   d52dc:	4620      	mov	r0, r4
   d52de:	f002 fdec 	bl	d7eba <_ZN9TCPClient9connectedEv>
   d52e2:	f241 3388 	movw	r3, #5000	; 0x1388
   d52e6:	2800      	cmp	r0, #0
   d52e8:	d04a      	beq.n	d5380 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x338>
   d52ea:	429e      	cmp	r6, r3
   d52ec:	d84a      	bhi.n	d5384 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x33c>
   d52ee:	f1bb 0f00 	cmp.w	fp, #0
   d52f2:	d093      	beq.n	d521c <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x1d4>
    Serial.print("\r\nHttpClient>\tEnd of HTTP Response (");
   d52f4:	f002 fc94 	bl	d7c20 <_Z16_fetch_usbserialv>
   d52f8:	4937      	ldr	r1, [pc, #220]	; (d53d8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x390>)
   d52fa:	f002 f973 	bl	d75e4 <_ZN5Print5printEPKc>
    Serial.print(millis() - firstRead);
   d52fe:	f002 fc8f 	bl	d7c20 <_Z16_fetch_usbserialv>
   d5302:	4605      	mov	r5, r0
   d5304:	f000 f8d6 	bl	d54b4 <HAL_Timer_Get_Milli_Seconds>
        return printNumber(val, base) + t;
   d5308:	9b01      	ldr	r3, [sp, #4]
   d530a:	220a      	movs	r2, #10
   d530c:	1ac1      	subs	r1, r0, r3
   d530e:	4628      	mov	r0, r5
   d5310:	f002 f98b 	bl	d762a <_ZN5Print11printNumberEmh>
    Serial.println("ms).");
   d5314:	f002 fc84 	bl	d7c20 <_Z16_fetch_usbserialv>
   d5318:	4930      	ldr	r1, [pc, #192]	; (d53dc <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x394>)
   d531a:	f002 f97c 	bl	d7616 <_ZN5Print7printlnEPKc>
    client.stop();
   d531e:	4620      	mov	r0, r4
   d5320:	f002 ffac 	bl	d827c <_ZN9TCPClient4stopEv>
    String raw_response(buffer);
   d5324:	4651      	mov	r1, sl
   d5326:	a802      	add	r0, sp, #8
   d5328:	f000 fe50 	bl	d5fcc <_ZN6StringC1EPKc>
    String statusCode = raw_response.substring(9,12);
   d532c:	230c      	movs	r3, #12
   d532e:	2209      	movs	r2, #9
   d5330:	a902      	add	r1, sp, #8
   d5332:	a806      	add	r0, sp, #24
   d5334:	f000 ff2a 	bl	d618c <_ZNK6String9substringEjj>
    Serial.print("HttpClient>\tStatus Code: ");
   d5338:	f002 fc72 	bl	d7c20 <_Z16_fetch_usbserialv>
   d533c:	4928      	ldr	r1, [pc, #160]	; (d53e0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x398>)
   d533e:	f002 f951 	bl	d75e4 <_ZN5Print5printEPKc>
    Serial.println(statusCode);
   d5342:	f002 fc6d 	bl	d7c20 <_Z16_fetch_usbserialv>
   d5346:	9906      	ldr	r1, [sp, #24]
   d5348:	f002 f965 	bl	d7616 <_ZN5Print7printlnEPKc>
    int bodyPos = raw_response.indexOf("\r\n\r\n");
   d534c:	4925      	ldr	r1, [pc, #148]	; (d53e4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x39c>)
   d534e:	a80a      	add	r0, sp, #40	; 0x28
   d5350:	f000 fe3c 	bl	d5fcc <_ZN6StringC1EPKc>
   d5354:	a90a      	add	r1, sp, #40	; 0x28
   d5356:	a802      	add	r0, sp, #8
   d5358:	f000 ff15 	bl	d6186 <_ZNK6String7indexOfERKS_>
   d535c:	4604      	mov	r4, r0
   d535e:	a80a      	add	r0, sp, #40	; 0x28
   d5360:	f000 fde9 	bl	d5f36 <_ZN6StringD1Ev>
    if (bodyPos == -1) {
   d5364:	1c63      	adds	r3, r4, #1
   d5366:	d143      	bne.n	d53f0 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a8>
        Serial.println("HttpClient>\tError: Can't find HTTP response body.");
   d5368:	f002 fc5a 	bl	d7c20 <_Z16_fetch_usbserialv>
   d536c:	491e      	ldr	r1, [pc, #120]	; (d53e8 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a0>)
   d536e:	f002 f952 	bl	d7616 <_ZN5Print7printlnEPKc>
    String statusCode = raw_response.substring(9,12);
   d5372:	a806      	add	r0, sp, #24
   d5374:	f000 fddf 	bl	d5f36 <_ZN6StringD1Ev>
    String raw_response(buffer);
   d5378:	a802      	add	r0, sp, #8
   d537a:	f000 fddc 	bl	d5f36 <_ZN6StringD1Ev>
   d537e:	e70e      	b.n	d519e <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x156>
    if (timeout) {
   d5380:	429e      	cmp	r6, r3
   d5382:	d9b7      	bls.n	d52f4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x2ac>
        Serial.println("\r\nHttpClient>\tError: Timeout while reading response.");
   d5384:	f002 fc4c 	bl	d7c20 <_Z16_fetch_usbserialv>
   d5388:	4918      	ldr	r1, [pc, #96]	; (d53ec <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3a4>)
   d538a:	f002 f944 	bl	d7616 <_ZN5Print7printlnEPKc>
   d538e:	e7b1      	b.n	d52f4 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x2ac>
   d5390:	000d97fc 	.word	0x000d97fc
   d5394:	000d96c6 	.word	0x000d96c6
   d5398:	000d9835 	.word	0x000d9835
   d539c:	000d9837 	.word	0x000d9837
   d53a0:	000d9843 	.word	0x000d9843
   d53a4:	000d986c 	.word	0x000d986c
   d53a8:	000d9866 	.word	0x000d9866
   d53ac:	000d9896 	.word	0x000d9896
   d53b0:	000d989b 	.word	0x000d989b
   d53b4:	000d9c34 	.word	0x000d9c34
   d53b8:	000d9818 	.word	0x000d9818
   d53bc:	000d9877 	.word	0x000d9877
   d53c0:	000d96f2 	.word	0x000d96f2
   d53c4:	000d98aa 	.word	0x000d98aa
   d53c8:	000d98cb 	.word	0x000d98cb
   d53cc:	000d98f7 	.word	0x000d98f7
   d53d0:	000d98ff 	.word	0x000d98ff
   d53d4:	000d9934 	.word	0x000d9934
   d53d8:	000d998f 	.word	0x000d998f
   d53dc:	000d99b4 	.word	0x000d99b4
   d53e0:	000d99b9 	.word	0x000d99b9
   d53e4:	000d99d3 	.word	0x000d99d3
   d53e8:	000d99d8 	.word	0x000d99d8
   d53ec:	000d995a 	.word	0x000d995a
    aResponse.body = "";
   d53f0:	f109 0504 	add.w	r5, r9, #4
   d53f4:	490a      	ldr	r1, [pc, #40]	; (d5420 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x3d8>)
   d53f6:	4628      	mov	r0, r5
   d53f8:	f000 fe30 	bl	d605c <_ZN6StringaSEPKc>
    aResponse.body += raw_response.substring(bodyPos+4);
   d53fc:	1d22      	adds	r2, r4, #4
   d53fe:	a902      	add	r1, sp, #8
   d5400:	a80a      	add	r0, sp, #40	; 0x28
   d5402:	f000 fee3 	bl	d61cc <_ZNK6String9substringEj>
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
   d5406:	a90a      	add	r1, sp, #40	; 0x28
   d5408:	4628      	mov	r0, r5
   d540a:	f000 fe76 	bl	d60fa <_ZN6String6concatERKS_>
   d540e:	a80a      	add	r0, sp, #40	; 0x28
   d5410:	f000 fd91 	bl	d5f36 <_ZN6StringD1Ev>
    aResponse.status = atoi(statusCode.c_str());
   d5414:	9806      	ldr	r0, [sp, #24]
   d5416:	f003 ffdb 	bl	d93d0 <atoi>
   d541a:	f8c9 0000 	str.w	r0, [r9]
   d541e:	e7a8      	b.n	d5372 <_ZN10HttpClient7requestER14http_request_tR15http_response_tP13http_header_tPKc+0x32a>
   d5420:	000d99d7 	.word	0x000d99d7

000d5424 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5424:	b508      	push	{r3, lr}
   d5426:	4b02      	ldr	r3, [pc, #8]	; (d5430 <netdb_freeaddrinfo+0xc>)
   d5428:	681b      	ldr	r3, [r3, #0]
   d542a:	689b      	ldr	r3, [r3, #8]
   d542c:	9301      	str	r3, [sp, #4]
   d542e:	bd08      	pop	{r3, pc}
   d5430:	00030268 	.word	0x00030268

000d5434 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5434:	b508      	push	{r3, lr}
   d5436:	4b02      	ldr	r3, [pc, #8]	; (d5440 <netdb_getaddrinfo+0xc>)
   d5438:	681b      	ldr	r3, [r3, #0]
   d543a:	68db      	ldr	r3, [r3, #12]
   d543c:	9301      	str	r3, [sp, #4]
   d543e:	bd08      	pop	{r3, pc}
   d5440:	00030268 	.word	0x00030268

000d5444 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5444:	b508      	push	{r3, lr}
   d5446:	4b02      	ldr	r3, [pc, #8]	; (d5450 <HAL_Pin_Mode+0xc>)
   d5448:	681b      	ldr	r3, [r3, #0]
   d544a:	689b      	ldr	r3, [r3, #8]
   d544c:	9301      	str	r3, [sp, #4]
   d544e:	bd08      	pop	{r3, pc}
   d5450:	0003022c 	.word	0x0003022c

000d5454 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5454:	b508      	push	{r3, lr}
   d5456:	4b02      	ldr	r3, [pc, #8]	; (d5460 <HAL_Get_Pin_Mode+0xc>)
   d5458:	681b      	ldr	r3, [r3, #0]
   d545a:	68db      	ldr	r3, [r3, #12]
   d545c:	9301      	str	r3, [sp, #4]
   d545e:	bd08      	pop	{r3, pc}
   d5460:	0003022c 	.word	0x0003022c

000d5464 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5464:	b508      	push	{r3, lr}
   d5466:	4b02      	ldr	r3, [pc, #8]	; (d5470 <HAL_GPIO_Write+0xc>)
   d5468:	681b      	ldr	r3, [r3, #0]
   d546a:	691b      	ldr	r3, [r3, #16]
   d546c:	9301      	str	r3, [sp, #4]
   d546e:	bd08      	pop	{r3, pc}
   d5470:	0003022c 	.word	0x0003022c

000d5474 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5474:	b508      	push	{r3, lr}
   d5476:	4b02      	ldr	r3, [pc, #8]	; (d5480 <HAL_GPIO_Read+0xc>)
   d5478:	681b      	ldr	r3, [r3, #0]
   d547a:	695b      	ldr	r3, [r3, #20]
   d547c:	9301      	str	r3, [sp, #4]
   d547e:	bd08      	pop	{r3, pc}
   d5480:	0003022c 	.word	0x0003022c

000d5484 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d5484:	b508      	push	{r3, lr}
   d5486:	4b02      	ldr	r3, [pc, #8]	; (d5490 <if_index_to_name+0xc>)
   d5488:	681b      	ldr	r3, [r3, #0]
   d548a:	695b      	ldr	r3, [r3, #20]
   d548c:	9301      	str	r3, [sp, #4]
   d548e:	bd08      	pop	{r3, pc}
   d5490:	0003026c 	.word	0x0003026c

000d5494 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5494:	b508      	push	{r3, lr}
   d5496:	4b02      	ldr	r3, [pc, #8]	; (d54a0 <HAL_RNG_GetRandomNumber+0xc>)
   d5498:	681b      	ldr	r3, [r3, #0]
   d549a:	685b      	ldr	r3, [r3, #4]
   d549c:	9301      	str	r3, [sp, #4]
   d549e:	bd08      	pop	{r3, pc}
   d54a0:	00030218 	.word	0x00030218

000d54a4 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d54a4:	b508      	push	{r3, lr}
   d54a6:	4b02      	ldr	r3, [pc, #8]	; (d54b0 <HAL_Delay_Microseconds+0xc>)
   d54a8:	681b      	ldr	r3, [r3, #0]
   d54aa:	68db      	ldr	r3, [r3, #12]
   d54ac:	9301      	str	r3, [sp, #4]
   d54ae:	bd08      	pop	{r3, pc}
   d54b0:	00030218 	.word	0x00030218

000d54b4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d54b4:	b508      	push	{r3, lr}
   d54b6:	4b02      	ldr	r3, [pc, #8]	; (d54c0 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d54b8:	681b      	ldr	r3, [r3, #0]
   d54ba:	695b      	ldr	r3, [r3, #20]
   d54bc:	9301      	str	r3, [sp, #4]
   d54be:	bd08      	pop	{r3, pc}
   d54c0:	00030218 	.word	0x00030218

000d54c4 <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d54c4:	b508      	push	{r3, lr}
   d54c6:	4b02      	ldr	r3, [pc, #8]	; (d54d0 <hal_rtc_time_is_valid+0xc>)
   d54c8:	681b      	ldr	r3, [r3, #0]
   d54ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d54cc:	9301      	str	r3, [sp, #4]
   d54ce:	bd08      	pop	{r3, pc}
   d54d0:	00030218 	.word	0x00030218

000d54d4 <hal_rtc_get_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
   d54d4:	b508      	push	{r3, lr}
   d54d6:	4b02      	ldr	r3, [pc, #8]	; (d54e0 <hal_rtc_get_time+0xc>)
   d54d8:	681b      	ldr	r3, [r3, #0]
   d54da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d54dc:	9301      	str	r3, [sp, #4]
   d54de:	bd08      	pop	{r3, pc}
   d54e0:	00030218 	.word	0x00030218

000d54e4 <hal_ble_stack_init>:

DYNALIB_BEGIN(hal_ble)

DYNALIB_FN(0, hal_ble, hal_ble_lock, int(void*))
DYNALIB_FN(1, hal_ble, hal_ble_unlock, int(void*))
DYNALIB_FN(2, hal_ble, hal_ble_stack_init, int(void*))
   d54e4:	b508      	push	{r3, lr}
   d54e6:	4b02      	ldr	r3, [pc, #8]	; (d54f0 <hal_ble_stack_init+0xc>)
   d54e8:	681b      	ldr	r3, [r3, #0]
   d54ea:	689b      	ldr	r3, [r3, #8]
   d54ec:	9301      	str	r3, [sp, #4]
   d54ee:	bd08      	pop	{r3, pc}
   d54f0:	00030278 	.word	0x00030278

000d54f4 <hal_ble_stack_deinit>:
DYNALIB_FN(3, hal_ble, hal_ble_stack_deinit, int(void*))
   d54f4:	b508      	push	{r3, lr}
   d54f6:	4b02      	ldr	r3, [pc, #8]	; (d5500 <hal_ble_stack_deinit+0xc>)
   d54f8:	681b      	ldr	r3, [r3, #0]
   d54fa:	68db      	ldr	r3, [r3, #12]
   d54fc:	9301      	str	r3, [sp, #4]
   d54fe:	bd08      	pop	{r3, pc}
   d5500:	00030278 	.word	0x00030278

000d5504 <hal_ble_gap_set_advertising_data>:
DYNALIB_FN(15, hal_ble, hal_ble_gap_delete_whitelist, int(void*))
DYNALIB_FN(16, hal_ble, hal_ble_gap_set_tx_power, int(int8_t, void*))
DYNALIB_FN(17, hal_ble, hal_ble_gap_get_tx_power, int(int8_t*, void*))
DYNALIB_FN(18, hal_ble, hal_ble_gap_set_advertising_parameters, int(const hal_ble_adv_params_t*, void*))
DYNALIB_FN(19, hal_ble, hal_ble_gap_get_advertising_parameters, int(hal_ble_adv_params_t*, void*))
DYNALIB_FN(20, hal_ble, hal_ble_gap_set_advertising_data, int(const uint8_t*, size_t, void*))
   d5504:	b508      	push	{r3, lr}
   d5506:	4b02      	ldr	r3, [pc, #8]	; (d5510 <hal_ble_gap_set_advertising_data+0xc>)
   d5508:	681b      	ldr	r3, [r3, #0]
   d550a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d550c:	9301      	str	r3, [sp, #4]
   d550e:	bd08      	pop	{r3, pc}
   d5510:	00030278 	.word	0x00030278

000d5514 <hal_ble_gap_set_scan_response_data>:
DYNALIB_FN(21, hal_ble, hal_ble_gap_get_advertising_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(22, hal_ble, hal_ble_gap_set_scan_response_data, int(const uint8_t*, size_t, void*))
   d5514:	b508      	push	{r3, lr}
   d5516:	4b02      	ldr	r3, [pc, #8]	; (d5520 <hal_ble_gap_set_scan_response_data+0xc>)
   d5518:	681b      	ldr	r3, [r3, #0]
   d551a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d551c:	9301      	str	r3, [sp, #4]
   d551e:	bd08      	pop	{r3, pc}
   d5520:	00030278 	.word	0x00030278

000d5524 <hal_ble_gap_start_advertising>:
DYNALIB_FN(23, hal_ble, hal_ble_gap_get_scan_response_data, ssize_t(uint8_t*, size_t, void*))
DYNALIB_FN(24, hal_ble, hal_ble_gap_start_advertising, int(void*))
   d5524:	b508      	push	{r3, lr}
   d5526:	4b02      	ldr	r3, [pc, #8]	; (d5530 <hal_ble_gap_start_advertising+0xc>)
   d5528:	681b      	ldr	r3, [r3, #0]
   d552a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   d552c:	9301      	str	r3, [sp, #4]
   d552e:	bd08      	pop	{r3, pc}
   d5530:	00030278 	.word	0x00030278

000d5534 <hal_ble_gap_disconnect>:
DYNALIB_FN(33, hal_ble, hal_ble_gap_stop_scan, int(void*))
DYNALIB_FN(34, hal_ble, hal_ble_gap_connect_deprecated, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(35, hal_ble, hal_ble_gap_is_connecting, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(36, hal_ble, hal_ble_gap_is_connected, bool(const hal_ble_addr_t*, void*))
DYNALIB_FN(37, hal_ble, hal_ble_gap_connect_cancel, int(const hal_ble_addr_t*, void*))
DYNALIB_FN(38, hal_ble, hal_ble_gap_disconnect, int(hal_ble_conn_handle_t, void*))
   d5534:	b508      	push	{r3, lr}
   d5536:	4b03      	ldr	r3, [pc, #12]	; (d5544 <hal_ble_gap_disconnect+0x10>)
   d5538:	681b      	ldr	r3, [r3, #0]
   d553a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
   d553e:	9301      	str	r3, [sp, #4]
   d5540:	bd08      	pop	{r3, pc}
   d5542:	0000      	.short	0x0000
   d5544:	00030278 	.word	0x00030278

000d5548 <hal_ble_gatt_server_add_service>:
DYNALIB_FN(39, hal_ble, hal_ble_gap_update_connection_params, int(hal_ble_conn_handle_t, const hal_ble_conn_params_t*, void*))
DYNALIB_FN(40, hal_ble, hal_ble_gap_get_connection_params_deprecated, int(hal_ble_conn_handle_t, hal_ble_conn_params_t*, void*))
DYNALIB_FN(41, hal_ble, hal_ble_gap_get_rssi, int(hal_ble_conn_handle_t, void*))
DYNALIB_FN(42, hal_ble, hal_ble_gatt_server_add_service, int(uint8_t, const hal_ble_uuid_t*, hal_ble_attr_handle_t*, void*))
   d5548:	b508      	push	{r3, lr}
   d554a:	4b03      	ldr	r3, [pc, #12]	; (d5558 <hal_ble_gatt_server_add_service+0x10>)
   d554c:	681b      	ldr	r3, [r3, #0]
   d554e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d5552:	9301      	str	r3, [sp, #4]
   d5554:	bd08      	pop	{r3, pc}
   d5556:	0000      	.short	0x0000
   d5558:	00030278 	.word	0x00030278

000d555c <hal_ble_gap_get_connection_info>:
DYNALIB_FN(54, hal_ble, hal_ble_gatt_client_write_with_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(55, hal_ble, hal_ble_gatt_client_write_without_response, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, const uint8_t*, size_t, void*))
DYNALIB_FN(56, hal_ble, hal_ble_gatt_client_read, ssize_t(hal_ble_conn_handle_t, hal_ble_attr_handle_t, uint8_t*, size_t, void*))

DYNALIB_FN(57, hal_ble, hal_ble_gap_connect, int(const hal_ble_conn_cfg_t*, hal_ble_conn_handle_t*, void*))
DYNALIB_FN(58, hal_ble, hal_ble_gap_get_connection_info, int(hal_ble_conn_handle_t, hal_ble_conn_info_t*, void*))
   d555c:	b508      	push	{r3, lr}
   d555e:	4b03      	ldr	r3, [pc, #12]	; (d556c <hal_ble_gap_get_connection_info+0x10>)
   d5560:	681b      	ldr	r3, [r3, #0]
   d5562:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
   d5566:	9301      	str	r3, [sp, #4]
   d5568:	bd08      	pop	{r3, pc}
   d556a:	0000      	.short	0x0000
   d556c:	00030278 	.word	0x00030278

000d5570 <hal_ble_gatt_server_add_characteristic>:
DYNALIB_FN(59, hal_ble, hal_ble_gatt_server_add_characteristic, int(const hal_ble_char_init_t*, hal_ble_char_handles_t*, void*))
   d5570:	b508      	push	{r3, lr}
   d5572:	4b03      	ldr	r3, [pc, #12]	; (d5580 <hal_ble_gatt_server_add_characteristic+0x10>)
   d5574:	681b      	ldr	r3, [r3, #0]
   d5576:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
   d557a:	9301      	str	r3, [sp, #4]
   d557c:	bd08      	pop	{r3, pc}
   d557e:	0000      	.short	0x0000
   d5580:	00030278 	.word	0x00030278

000d5584 <hal_ble_set_callback_on_periph_link_events>:
DYNALIB_FN(60, hal_ble, hal_ble_set_callback_on_periph_link_events, int(hal_ble_on_link_evt_cb_t, void*, void*))
   d5584:	b508      	push	{r3, lr}
   d5586:	4b03      	ldr	r3, [pc, #12]	; (d5594 <hal_ble_set_callback_on_periph_link_events+0x10>)
   d5588:	681b      	ldr	r3, [r3, #0]
   d558a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
   d558e:	9301      	str	r3, [sp, #4]
   d5590:	bd08      	pop	{r3, pc}
   d5592:	0000      	.short	0x0000
   d5594:	00030278 	.word	0x00030278

000d5598 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d5598:	b508      	push	{r3, lr}
   d559a:	4b02      	ldr	r3, [pc, #8]	; (d55a4 <os_mutex_recursive_create+0xc>)
   d559c:	681b      	ldr	r3, [r3, #0]
   d559e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d55a0:	9301      	str	r3, [sp, #4]
   d55a2:	bd08      	pop	{r3, pc}
   d55a4:	00030248 	.word	0x00030248

000d55a8 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d55a8:	b508      	push	{r3, lr}
   d55aa:	4b02      	ldr	r3, [pc, #8]	; (d55b4 <os_mutex_recursive_destroy+0xc>)
   d55ac:	681b      	ldr	r3, [r3, #0]
   d55ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d55b0:	9301      	str	r3, [sp, #4]
   d55b2:	bd08      	pop	{r3, pc}
   d55b4:	00030248 	.word	0x00030248

000d55b8 <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d55b8:	b508      	push	{r3, lr}
   d55ba:	4b02      	ldr	r3, [pc, #8]	; (d55c4 <os_mutex_recursive_lock+0xc>)
   d55bc:	681b      	ldr	r3, [r3, #0]
   d55be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d55c0:	9301      	str	r3, [sp, #4]
   d55c2:	bd08      	pop	{r3, pc}
   d55c4:	00030248 	.word	0x00030248

000d55c8 <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d55c8:	b508      	push	{r3, lr}
   d55ca:	4b02      	ldr	r3, [pc, #8]	; (d55d4 <os_mutex_recursive_unlock+0xc>)
   d55cc:	681b      	ldr	r3, [r3, #0]
   d55ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d55d0:	9301      	str	r3, [sp, #4]
   d55d2:	bd08      	pop	{r3, pc}
   d55d4:	00030248 	.word	0x00030248

000d55d8 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d55d8:	b508      	push	{r3, lr}
   d55da:	4b02      	ldr	r3, [pc, #8]	; (d55e4 <inet_inet_ntop+0xc>)
   d55dc:	681b      	ldr	r3, [r3, #0]
   d55de:	695b      	ldr	r3, [r3, #20]
   d55e0:	9301      	str	r3, [sp, #4]
   d55e2:	bd08      	pop	{r3, pc}
   d55e4:	00030264 	.word	0x00030264

000d55e8 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d55e8:	b508      	push	{r3, lr}
   d55ea:	4b02      	ldr	r3, [pc, #8]	; (d55f4 <inet_htonl+0xc>)
   d55ec:	681b      	ldr	r3, [r3, #0]
   d55ee:	6a1b      	ldr	r3, [r3, #32]
   d55f0:	9301      	str	r3, [sp, #4]
   d55f2:	bd08      	pop	{r3, pc}
   d55f4:	00030264 	.word	0x00030264

000d55f8 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d55f8:	b508      	push	{r3, lr}
   d55fa:	4b02      	ldr	r3, [pc, #8]	; (d5604 <inet_htons+0xc>)
   d55fc:	681b      	ldr	r3, [r3, #0]
   d55fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5600:	9301      	str	r3, [sp, #4]
   d5602:	bd08      	pop	{r3, pc}
   d5604:	00030264 	.word	0x00030264

000d5608 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d5608:	b508      	push	{r3, lr}
   d560a:	4b02      	ldr	r3, [pc, #8]	; (d5614 <hal_usart_init+0xc>)
   d560c:	681b      	ldr	r3, [r3, #0]
   d560e:	681b      	ldr	r3, [r3, #0]
   d5610:	9301      	str	r3, [sp, #4]
   d5612:	bd08      	pop	{r3, pc}
   d5614:	0003023c 	.word	0x0003023c

000d5618 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d5618:	b508      	push	{r3, lr}
   d561a:	4b02      	ldr	r3, [pc, #8]	; (d5624 <hal_usart_write+0xc>)
   d561c:	681b      	ldr	r3, [r3, #0]
   d561e:	68db      	ldr	r3, [r3, #12]
   d5620:	9301      	str	r3, [sp, #4]
   d5622:	bd08      	pop	{r3, pc}
   d5624:	0003023c 	.word	0x0003023c

000d5628 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d5628:	b508      	push	{r3, lr}
   d562a:	4b02      	ldr	r3, [pc, #8]	; (d5634 <hal_usart_available+0xc>)
   d562c:	681b      	ldr	r3, [r3, #0]
   d562e:	691b      	ldr	r3, [r3, #16]
   d5630:	9301      	str	r3, [sp, #4]
   d5632:	bd08      	pop	{r3, pc}
   d5634:	0003023c 	.word	0x0003023c

000d5638 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d5638:	b508      	push	{r3, lr}
   d563a:	4b02      	ldr	r3, [pc, #8]	; (d5644 <hal_usart_read+0xc>)
   d563c:	681b      	ldr	r3, [r3, #0]
   d563e:	695b      	ldr	r3, [r3, #20]
   d5640:	9301      	str	r3, [sp, #4]
   d5642:	bd08      	pop	{r3, pc}
   d5644:	0003023c 	.word	0x0003023c

000d5648 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d5648:	b508      	push	{r3, lr}
   d564a:	4b02      	ldr	r3, [pc, #8]	; (d5654 <hal_usart_peek+0xc>)
   d564c:	681b      	ldr	r3, [r3, #0]
   d564e:	699b      	ldr	r3, [r3, #24]
   d5650:	9301      	str	r3, [sp, #4]
   d5652:	bd08      	pop	{r3, pc}
   d5654:	0003023c 	.word	0x0003023c

000d5658 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d5658:	b508      	push	{r3, lr}
   d565a:	4b02      	ldr	r3, [pc, #8]	; (d5664 <hal_usart_flush+0xc>)
   d565c:	681b      	ldr	r3, [r3, #0]
   d565e:	69db      	ldr	r3, [r3, #28]
   d5660:	9301      	str	r3, [sp, #4]
   d5662:	bd08      	pop	{r3, pc}
   d5664:	0003023c 	.word	0x0003023c

000d5668 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d5668:	b508      	push	{r3, lr}
   d566a:	4b02      	ldr	r3, [pc, #8]	; (d5674 <hal_usart_is_enabled+0xc>)
   d566c:	681b      	ldr	r3, [r3, #0]
   d566e:	6a1b      	ldr	r3, [r3, #32]
   d5670:	9301      	str	r3, [sp, #4]
   d5672:	bd08      	pop	{r3, pc}
   d5674:	0003023c 	.word	0x0003023c

000d5678 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d5678:	b508      	push	{r3, lr}
   d567a:	4b02      	ldr	r3, [pc, #8]	; (d5684 <hal_usart_available_data_for_write+0xc>)
   d567c:	681b      	ldr	r3, [r3, #0]
   d567e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5680:	9301      	str	r3, [sp, #4]
   d5682:	bd08      	pop	{r3, pc}
   d5684:	0003023c 	.word	0x0003023c

000d5688 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d5688:	b508      	push	{r3, lr}
   d568a:	4b02      	ldr	r3, [pc, #8]	; (d5694 <hal_i2c_begin+0xc>)
   d568c:	681b      	ldr	r3, [r3, #0]
   d568e:	68db      	ldr	r3, [r3, #12]
   d5690:	9301      	str	r3, [sp, #4]
   d5692:	bd08      	pop	{r3, pc}
   d5694:	00030228 	.word	0x00030228

000d5698 <hal_i2c_end>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
   d5698:	b508      	push	{r3, lr}
   d569a:	4b02      	ldr	r3, [pc, #8]	; (d56a4 <hal_i2c_end+0xc>)
   d569c:	681b      	ldr	r3, [r3, #0]
   d569e:	691b      	ldr	r3, [r3, #16]
   d56a0:	9301      	str	r3, [sp, #4]
   d56a2:	bd08      	pop	{r3, pc}
   d56a4:	00030228 	.word	0x00030228

000d56a8 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d56a8:	b508      	push	{r3, lr}
   d56aa:	4b02      	ldr	r3, [pc, #8]	; (d56b4 <hal_i2c_begin_transmission+0xc>)
   d56ac:	681b      	ldr	r3, [r3, #0]
   d56ae:	699b      	ldr	r3, [r3, #24]
   d56b0:	9301      	str	r3, [sp, #4]
   d56b2:	bd08      	pop	{r3, pc}
   d56b4:	00030228 	.word	0x00030228

000d56b8 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d56b8:	b508      	push	{r3, lr}
   d56ba:	4b02      	ldr	r3, [pc, #8]	; (d56c4 <hal_i2c_end_transmission+0xc>)
   d56bc:	681b      	ldr	r3, [r3, #0]
   d56be:	69db      	ldr	r3, [r3, #28]
   d56c0:	9301      	str	r3, [sp, #4]
   d56c2:	bd08      	pop	{r3, pc}
   d56c4:	00030228 	.word	0x00030228

000d56c8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d56c8:	b508      	push	{r3, lr}
   d56ca:	4b02      	ldr	r3, [pc, #8]	; (d56d4 <hal_i2c_write+0xc>)
   d56cc:	681b      	ldr	r3, [r3, #0]
   d56ce:	6a1b      	ldr	r3, [r3, #32]
   d56d0:	9301      	str	r3, [sp, #4]
   d56d2:	bd08      	pop	{r3, pc}
   d56d4:	00030228 	.word	0x00030228

000d56d8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d56d8:	b508      	push	{r3, lr}
   d56da:	4b02      	ldr	r3, [pc, #8]	; (d56e4 <hal_i2c_available+0xc>)
   d56dc:	681b      	ldr	r3, [r3, #0]
   d56de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d56e0:	9301      	str	r3, [sp, #4]
   d56e2:	bd08      	pop	{r3, pc}
   d56e4:	00030228 	.word	0x00030228

000d56e8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d56e8:	b508      	push	{r3, lr}
   d56ea:	4b02      	ldr	r3, [pc, #8]	; (d56f4 <hal_i2c_read+0xc>)
   d56ec:	681b      	ldr	r3, [r3, #0]
   d56ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d56f0:	9301      	str	r3, [sp, #4]
   d56f2:	bd08      	pop	{r3, pc}
   d56f4:	00030228 	.word	0x00030228

000d56f8 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d56f8:	b508      	push	{r3, lr}
   d56fa:	4b02      	ldr	r3, [pc, #8]	; (d5704 <hal_i2c_peek+0xc>)
   d56fc:	681b      	ldr	r3, [r3, #0]
   d56fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5700:	9301      	str	r3, [sp, #4]
   d5702:	bd08      	pop	{r3, pc}
   d5704:	00030228 	.word	0x00030228

000d5708 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d5708:	b508      	push	{r3, lr}
   d570a:	4b02      	ldr	r3, [pc, #8]	; (d5714 <hal_i2c_flush+0xc>)
   d570c:	681b      	ldr	r3, [r3, #0]
   d570e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5710:	9301      	str	r3, [sp, #4]
   d5712:	bd08      	pop	{r3, pc}
   d5714:	00030228 	.word	0x00030228

000d5718 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d5718:	b508      	push	{r3, lr}
   d571a:	4b02      	ldr	r3, [pc, #8]	; (d5724 <hal_i2c_is_enabled+0xc>)
   d571c:	681b      	ldr	r3, [r3, #0]
   d571e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5720:	9301      	str	r3, [sp, #4]
   d5722:	bd08      	pop	{r3, pc}
   d5724:	00030228 	.word	0x00030228

000d5728 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d5728:	b508      	push	{r3, lr}
   d572a:	4b02      	ldr	r3, [pc, #8]	; (d5734 <hal_i2c_init+0xc>)
   d572c:	681b      	ldr	r3, [r3, #0]
   d572e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5730:	9301      	str	r3, [sp, #4]
   d5732:	bd08      	pop	{r3, pc}
   d5734:	00030228 	.word	0x00030228

000d5738 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d5738:	b508      	push	{r3, lr}
   d573a:	4b02      	ldr	r3, [pc, #8]	; (d5744 <hal_i2c_request_ex+0xc>)
   d573c:	681b      	ldr	r3, [r3, #0]
   d573e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d5740:	9301      	str	r3, [sp, #4]
   d5742:	bd08      	pop	{r3, pc}
   d5744:	00030228 	.word	0x00030228

000d5748 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d5748:	b508      	push	{r3, lr}
   d574a:	4b02      	ldr	r3, [pc, #8]	; (d5754 <sock_setsockopt+0xc>)
   d574c:	681b      	ldr	r3, [r3, #0]
   d574e:	699b      	ldr	r3, [r3, #24]
   d5750:	9301      	str	r3, [sp, #4]
   d5752:	bd08      	pop	{r3, pc}
   d5754:	00030238 	.word	0x00030238

000d5758 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d5758:	b508      	push	{r3, lr}
   d575a:	4b02      	ldr	r3, [pc, #8]	; (d5764 <sock_close+0xc>)
   d575c:	681b      	ldr	r3, [r3, #0]
   d575e:	69db      	ldr	r3, [r3, #28]
   d5760:	9301      	str	r3, [sp, #4]
   d5762:	bd08      	pop	{r3, pc}
   d5764:	00030238 	.word	0x00030238

000d5768 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d5768:	b508      	push	{r3, lr}
   d576a:	4b02      	ldr	r3, [pc, #8]	; (d5774 <sock_connect+0xc>)
   d576c:	681b      	ldr	r3, [r3, #0]
   d576e:	6a1b      	ldr	r3, [r3, #32]
   d5770:	9301      	str	r3, [sp, #4]
   d5772:	bd08      	pop	{r3, pc}
   d5774:	00030238 	.word	0x00030238

000d5778 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d5778:	b508      	push	{r3, lr}
   d577a:	4b02      	ldr	r3, [pc, #8]	; (d5784 <sock_recv+0xc>)
   d577c:	681b      	ldr	r3, [r3, #0]
   d577e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5780:	9301      	str	r3, [sp, #4]
   d5782:	bd08      	pop	{r3, pc}
   d5784:	00030238 	.word	0x00030238

000d5788 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d5788:	b508      	push	{r3, lr}
   d578a:	4b02      	ldr	r3, [pc, #8]	; (d5794 <sock_send+0xc>)
   d578c:	681b      	ldr	r3, [r3, #0]
   d578e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5790:	9301      	str	r3, [sp, #4]
   d5792:	bd08      	pop	{r3, pc}
   d5794:	00030238 	.word	0x00030238

000d5798 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d5798:	b508      	push	{r3, lr}
   d579a:	4b02      	ldr	r3, [pc, #8]	; (d57a4 <sock_socket+0xc>)
   d579c:	681b      	ldr	r3, [r3, #0]
   d579e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d57a0:	9301      	str	r3, [sp, #4]
   d57a2:	bd08      	pop	{r3, pc}
   d57a4:	00030238 	.word	0x00030238

000d57a8 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d57a8:	b508      	push	{r3, lr}
   d57aa:	4b02      	ldr	r3, [pc, #8]	; (d57b4 <hal_spi_begin+0xc>)
   d57ac:	681b      	ldr	r3, [r3, #0]
   d57ae:	681b      	ldr	r3, [r3, #0]
   d57b0:	9301      	str	r3, [sp, #4]
   d57b2:	bd08      	pop	{r3, pc}
   d57b4:	00030230 	.word	0x00030230

000d57b8 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   d57b8:	b508      	push	{r3, lr}
   d57ba:	4b02      	ldr	r3, [pc, #8]	; (d57c4 <hal_spi_set_bit_order+0xc>)
   d57bc:	681b      	ldr	r3, [r3, #0]
   d57be:	689b      	ldr	r3, [r3, #8]
   d57c0:	9301      	str	r3, [sp, #4]
   d57c2:	bd08      	pop	{r3, pc}
   d57c4:	00030230 	.word	0x00030230

000d57c8 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   d57c8:	b508      	push	{r3, lr}
   d57ca:	4b02      	ldr	r3, [pc, #8]	; (d57d4 <hal_spi_set_data_mode+0xc>)
   d57cc:	681b      	ldr	r3, [r3, #0]
   d57ce:	68db      	ldr	r3, [r3, #12]
   d57d0:	9301      	str	r3, [sp, #4]
   d57d2:	bd08      	pop	{r3, pc}
   d57d4:	00030230 	.word	0x00030230

000d57d8 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   d57d8:	b508      	push	{r3, lr}
   d57da:	4b02      	ldr	r3, [pc, #8]	; (d57e4 <hal_spi_set_clock_divider+0xc>)
   d57dc:	681b      	ldr	r3, [r3, #0]
   d57de:	691b      	ldr	r3, [r3, #16]
   d57e0:	9301      	str	r3, [sp, #4]
   d57e2:	bd08      	pop	{r3, pc}
   d57e4:	00030230 	.word	0x00030230

000d57e8 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d57e8:	b508      	push	{r3, lr}
   d57ea:	4b02      	ldr	r3, [pc, #8]	; (d57f4 <hal_spi_transfer+0xc>)
   d57ec:	681b      	ldr	r3, [r3, #0]
   d57ee:	695b      	ldr	r3, [r3, #20]
   d57f0:	9301      	str	r3, [sp, #4]
   d57f2:	bd08      	pop	{r3, pc}
   d57f4:	00030230 	.word	0x00030230

000d57f8 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d57f8:	b508      	push	{r3, lr}
   d57fa:	4b02      	ldr	r3, [pc, #8]	; (d5804 <hal_spi_init+0xc>)
   d57fc:	681b      	ldr	r3, [r3, #0]
   d57fe:	69db      	ldr	r3, [r3, #28]
   d5800:	9301      	str	r3, [sp, #4]
   d5802:	bd08      	pop	{r3, pc}
   d5804:	00030230 	.word	0x00030230

000d5808 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d5808:	b508      	push	{r3, lr}
   d580a:	4b02      	ldr	r3, [pc, #8]	; (d5814 <hal_spi_is_enabled+0xc>)
   d580c:	681b      	ldr	r3, [r3, #0]
   d580e:	6a1b      	ldr	r3, [r3, #32]
   d5810:	9301      	str	r3, [sp, #4]
   d5812:	bd08      	pop	{r3, pc}
   d5814:	00030230 	.word	0x00030230

000d5818 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d5818:	b508      	push	{r3, lr}
   d581a:	4b02      	ldr	r3, [pc, #8]	; (d5824 <hal_spi_info+0xc>)
   d581c:	681b      	ldr	r3, [r3, #0]
   d581e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5820:	9301      	str	r3, [sp, #4]
   d5822:	bd08      	pop	{r3, pc}
   d5824:	00030230 	.word	0x00030230

000d5828 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d5828:	b508      	push	{r3, lr}
   d582a:	4b02      	ldr	r3, [pc, #8]	; (d5834 <hal_spi_acquire+0xc>)
   d582c:	681b      	ldr	r3, [r3, #0]
   d582e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5830:	9301      	str	r3, [sp, #4]
   d5832:	bd08      	pop	{r3, pc}
   d5834:	00030230 	.word	0x00030230

000d5838 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d5838:	b508      	push	{r3, lr}
   d583a:	4b02      	ldr	r3, [pc, #8]	; (d5844 <hal_spi_release+0xc>)
   d583c:	681b      	ldr	r3, [r3, #0]
   d583e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5840:	9301      	str	r3, [sp, #4]
   d5842:	bd08      	pop	{r3, pc}
   d5844:	00030230 	.word	0x00030230

000d5848 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d5848:	b508      	push	{r3, lr}
   d584a:	4b02      	ldr	r3, [pc, #8]	; (d5854 <HAL_USB_USART_Init+0xc>)
   d584c:	681b      	ldr	r3, [r3, #0]
   d584e:	681b      	ldr	r3, [r3, #0]
   d5850:	9301      	str	r3, [sp, #4]
   d5852:	bd08      	pop	{r3, pc}
   d5854:	0003024c 	.word	0x0003024c

000d5858 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d5858:	b508      	push	{r3, lr}
   d585a:	4b02      	ldr	r3, [pc, #8]	; (d5864 <HAL_USB_USART_Begin+0xc>)
   d585c:	681b      	ldr	r3, [r3, #0]
   d585e:	685b      	ldr	r3, [r3, #4]
   d5860:	9301      	str	r3, [sp, #4]
   d5862:	bd08      	pop	{r3, pc}
   d5864:	0003024c 	.word	0x0003024c

000d5868 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d5868:	b508      	push	{r3, lr}
   d586a:	4b02      	ldr	r3, [pc, #8]	; (d5874 <HAL_USB_USART_Available_Data+0xc>)
   d586c:	681b      	ldr	r3, [r3, #0]
   d586e:	691b      	ldr	r3, [r3, #16]
   d5870:	9301      	str	r3, [sp, #4]
   d5872:	bd08      	pop	{r3, pc}
   d5874:	0003024c 	.word	0x0003024c

000d5878 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5878:	b508      	push	{r3, lr}
   d587a:	4b02      	ldr	r3, [pc, #8]	; (d5884 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d587c:	681b      	ldr	r3, [r3, #0]
   d587e:	695b      	ldr	r3, [r3, #20]
   d5880:	9301      	str	r3, [sp, #4]
   d5882:	bd08      	pop	{r3, pc}
   d5884:	0003024c 	.word	0x0003024c

000d5888 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5888:	b508      	push	{r3, lr}
   d588a:	4b02      	ldr	r3, [pc, #8]	; (d5894 <HAL_USB_USART_Receive_Data+0xc>)
   d588c:	681b      	ldr	r3, [r3, #0]
   d588e:	699b      	ldr	r3, [r3, #24]
   d5890:	9301      	str	r3, [sp, #4]
   d5892:	bd08      	pop	{r3, pc}
   d5894:	0003024c 	.word	0x0003024c

000d5898 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5898:	b508      	push	{r3, lr}
   d589a:	4b02      	ldr	r3, [pc, #8]	; (d58a4 <HAL_USB_USART_Send_Data+0xc>)
   d589c:	681b      	ldr	r3, [r3, #0]
   d589e:	69db      	ldr	r3, [r3, #28]
   d58a0:	9301      	str	r3, [sp, #4]
   d58a2:	bd08      	pop	{r3, pc}
   d58a4:	0003024c 	.word	0x0003024c

000d58a8 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d58a8:	b508      	push	{r3, lr}
   d58aa:	4b02      	ldr	r3, [pc, #8]	; (d58b4 <HAL_USB_USART_Flush_Data+0xc>)
   d58ac:	681b      	ldr	r3, [r3, #0]
   d58ae:	6a1b      	ldr	r3, [r3, #32]
   d58b0:	9301      	str	r3, [sp, #4]
   d58b2:	bd08      	pop	{r3, pc}
   d58b4:	0003024c 	.word	0x0003024c

000d58b8 <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d58b8:	b508      	push	{r3, lr}
   d58ba:	4b02      	ldr	r3, [pc, #8]	; (d58c4 <panic_+0xc>)
   d58bc:	681b      	ldr	r3, [r3, #0]
   d58be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d58c0:	9301      	str	r3, [sp, #4]
   d58c2:	bd08      	pop	{r3, pc}
   d58c4:	00030260 	.word	0x00030260

000d58c8 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d58c8:	b508      	push	{r3, lr}
   d58ca:	4b02      	ldr	r3, [pc, #8]	; (d58d4 <log_message+0xc>)
   d58cc:	681b      	ldr	r3, [r3, #0]
   d58ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d58d0:	9301      	str	r3, [sp, #4]
   d58d2:	bd08      	pop	{r3, pc}
   d58d4:	00030260 	.word	0x00030260

000d58d8 <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d58d8:	b508      	push	{r3, lr}
   d58da:	4b02      	ldr	r3, [pc, #8]	; (d58e4 <system_mode+0xc>)
   d58dc:	681b      	ldr	r3, [r3, #0]
   d58de:	681b      	ldr	r3, [r3, #0]
   d58e0:	9301      	str	r3, [sp, #4]
   d58e2:	bd08      	pop	{r3, pc}
   d58e4:	00030220 	.word	0x00030220

000d58e8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d58e8:	b508      	push	{r3, lr}
   d58ea:	4b02      	ldr	r3, [pc, #8]	; (d58f4 <set_system_mode+0xc>)
   d58ec:	681b      	ldr	r3, [r3, #0]
   d58ee:	685b      	ldr	r3, [r3, #4]
   d58f0:	9301      	str	r3, [sp, #4]
   d58f2:	bd08      	pop	{r3, pc}
   d58f4:	00030220 	.word	0x00030220

000d58f8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d58f8:	b508      	push	{r3, lr}
   d58fa:	4b02      	ldr	r3, [pc, #8]	; (d5904 <system_delay_ms+0xc>)
   d58fc:	681b      	ldr	r3, [r3, #0]
   d58fe:	695b      	ldr	r3, [r3, #20]
   d5900:	9301      	str	r3, [sp, #4]
   d5902:	bd08      	pop	{r3, pc}
   d5904:	00030220 	.word	0x00030220

000d5908 <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d5908:	b508      	push	{r3, lr}
   d590a:	4b02      	ldr	r3, [pc, #8]	; (d5914 <system_thread_get_state+0xc>)
   d590c:	681b      	ldr	r3, [r3, #0]
   d590e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5910:	9301      	str	r3, [sp, #4]
   d5912:	bd08      	pop	{r3, pc}
   d5914:	00030220 	.word	0x00030220

000d5918 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5918:	b508      	push	{r3, lr}
   d591a:	4b03      	ldr	r3, [pc, #12]	; (d5928 <system_ctrl_set_app_request_handler+0x10>)
   d591c:	681b      	ldr	r3, [r3, #0]
   d591e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5922:	9301      	str	r3, [sp, #4]
   d5924:	bd08      	pop	{r3, pc}
   d5926:	0000      	.short	0x0000
   d5928:	00030220 	.word	0x00030220

000d592c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d592c:	b508      	push	{r3, lr}
   d592e:	4b03      	ldr	r3, [pc, #12]	; (d593c <system_ctrl_set_result+0x10>)
   d5930:	681b      	ldr	r3, [r3, #0]
   d5932:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5936:	9301      	str	r3, [sp, #4]
   d5938:	bd08      	pop	{r3, pc}
   d593a:	0000      	.short	0x0000
   d593c:	00030220 	.word	0x00030220

000d5940 <system_sleep_ext>:
#define BASE_IDX1 (BASE_IDX + 18)
#else
#define BASE_IDX1 (BASE_IDX + 17)
#endif // HAL_PLATFORM_POWER_MANAGEMENT

DYNALIB_FN(BASE_IDX1 + 0, system, system_sleep_ext, int(const hal_sleep_config_t*, hal_wakeup_source_base_t**, void*))
   d5940:	b508      	push	{r3, lr}
   d5942:	4b03      	ldr	r3, [pc, #12]	; (d5950 <system_sleep_ext+0x10>)
   d5944:	681b      	ldr	r3, [r3, #0]
   d5946:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   d594a:	9301      	str	r3, [sp, #4]
   d594c:	bd08      	pop	{r3, pc}
   d594e:	0000      	.short	0x0000
   d5950:	00030220 	.word	0x00030220

000d5954 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5954:	b508      	push	{r3, lr}
   d5956:	4b02      	ldr	r3, [pc, #8]	; (d5960 <network_connect+0xc>)
   d5958:	681b      	ldr	r3, [r3, #0]
   d595a:	685b      	ldr	r3, [r3, #4]
   d595c:	9301      	str	r3, [sp, #4]
   d595e:	bd08      	pop	{r3, pc}
   d5960:	00030240 	.word	0x00030240

000d5964 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5964:	b508      	push	{r3, lr}
   d5966:	4b02      	ldr	r3, [pc, #8]	; (d5970 <network_connecting+0xc>)
   d5968:	681b      	ldr	r3, [r3, #0]
   d596a:	689b      	ldr	r3, [r3, #8]
   d596c:	9301      	str	r3, [sp, #4]
   d596e:	bd08      	pop	{r3, pc}
   d5970:	00030240 	.word	0x00030240

000d5974 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5974:	b508      	push	{r3, lr}
   d5976:	4b02      	ldr	r3, [pc, #8]	; (d5980 <network_disconnect+0xc>)
   d5978:	681b      	ldr	r3, [r3, #0]
   d597a:	68db      	ldr	r3, [r3, #12]
   d597c:	9301      	str	r3, [sp, #4]
   d597e:	bd08      	pop	{r3, pc}
   d5980:	00030240 	.word	0x00030240

000d5984 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5984:	b508      	push	{r3, lr}
   d5986:	4b02      	ldr	r3, [pc, #8]	; (d5990 <network_ready+0xc>)
   d5988:	681b      	ldr	r3, [r3, #0]
   d598a:	691b      	ldr	r3, [r3, #16]
   d598c:	9301      	str	r3, [sp, #4]
   d598e:	bd08      	pop	{r3, pc}
   d5990:	00030240 	.word	0x00030240

000d5994 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5994:	b508      	push	{r3, lr}
   d5996:	4b02      	ldr	r3, [pc, #8]	; (d59a0 <network_on+0xc>)
   d5998:	681b      	ldr	r3, [r3, #0]
   d599a:	695b      	ldr	r3, [r3, #20]
   d599c:	9301      	str	r3, [sp, #4]
   d599e:	bd08      	pop	{r3, pc}
   d59a0:	00030240 	.word	0x00030240

000d59a4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d59a4:	b508      	push	{r3, lr}
   d59a6:	4b02      	ldr	r3, [pc, #8]	; (d59b0 <network_off+0xc>)
   d59a8:	681b      	ldr	r3, [r3, #0]
   d59aa:	699b      	ldr	r3, [r3, #24]
   d59ac:	9301      	str	r3, [sp, #4]
   d59ae:	bd08      	pop	{r3, pc}
   d59b0:	00030240 	.word	0x00030240

000d59b4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d59b4:	b508      	push	{r3, lr}
   d59b6:	4b02      	ldr	r3, [pc, #8]	; (d59c0 <network_listen+0xc>)
   d59b8:	681b      	ldr	r3, [r3, #0]
   d59ba:	69db      	ldr	r3, [r3, #28]
   d59bc:	9301      	str	r3, [sp, #4]
   d59be:	bd08      	pop	{r3, pc}
   d59c0:	00030240 	.word	0x00030240

000d59c4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d59c4:	b508      	push	{r3, lr}
   d59c6:	4b02      	ldr	r3, [pc, #8]	; (d59d0 <network_listening+0xc>)
   d59c8:	681b      	ldr	r3, [r3, #0]
   d59ca:	6a1b      	ldr	r3, [r3, #32]
   d59cc:	9301      	str	r3, [sp, #4]
   d59ce:	bd08      	pop	{r3, pc}
   d59d0:	00030240 	.word	0x00030240

000d59d4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d59d4:	b508      	push	{r3, lr}
   d59d6:	4b02      	ldr	r3, [pc, #8]	; (d59e0 <network_set_listen_timeout+0xc>)
   d59d8:	681b      	ldr	r3, [r3, #0]
   d59da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d59dc:	9301      	str	r3, [sp, #4]
   d59de:	bd08      	pop	{r3, pc}
   d59e0:	00030240 	.word	0x00030240

000d59e4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d59e4:	b508      	push	{r3, lr}
   d59e6:	4b02      	ldr	r3, [pc, #8]	; (d59f0 <network_get_listen_timeout+0xc>)
   d59e8:	681b      	ldr	r3, [r3, #0]
   d59ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d59ec:	9301      	str	r3, [sp, #4]
   d59ee:	bd08      	pop	{r3, pc}
   d59f0:	00030240 	.word	0x00030240

000d59f4 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d59f4:	b508      	push	{r3, lr}
   d59f6:	4b02      	ldr	r3, [pc, #8]	; (d5a00 <network_is_on+0xc>)
   d59f8:	681b      	ldr	r3, [r3, #0]
   d59fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d59fc:	9301      	str	r3, [sp, #4]
   d59fe:	bd08      	pop	{r3, pc}
   d5a00:	00030240 	.word	0x00030240

000d5a04 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d5a04:	b508      	push	{r3, lr}
   d5a06:	4b02      	ldr	r3, [pc, #8]	; (d5a10 <network_is_off+0xc>)
   d5a08:	681b      	ldr	r3, [r3, #0]
   d5a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5a0c:	9301      	str	r3, [sp, #4]
   d5a0e:	bd08      	pop	{r3, pc}
   d5a10:	00030240 	.word	0x00030240

000d5a14 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5a14:	b508      	push	{r3, lr}
   d5a16:	4b02      	ldr	r3, [pc, #8]	; (d5a20 <spark_process+0xc>)
   d5a18:	681b      	ldr	r3, [r3, #0]
   d5a1a:	689b      	ldr	r3, [r3, #8]
   d5a1c:	9301      	str	r3, [sp, #4]
   d5a1e:	bd08      	pop	{r3, pc}
   d5a20:	00030244 	.word	0x00030244

000d5a24 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
   d5a24:	b508      	push	{r3, lr}
   d5a26:	4b02      	ldr	r3, [pc, #8]	; (d5a30 <spark_cloud_flag_connect+0xc>)
   d5a28:	681b      	ldr	r3, [r3, #0]
   d5a2a:	68db      	ldr	r3, [r3, #12]
   d5a2c:	9301      	str	r3, [sp, #4]
   d5a2e:	bd08      	pop	{r3, pc}
   d5a30:	00030244 	.word	0x00030244

000d5a34 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5a34:	b508      	push	{r3, lr}
   d5a36:	4b02      	ldr	r3, [pc, #8]	; (d5a40 <spark_cloud_flag_connected+0xc>)
   d5a38:	681b      	ldr	r3, [r3, #0]
   d5a3a:	695b      	ldr	r3, [r3, #20]
   d5a3c:	9301      	str	r3, [sp, #4]
   d5a3e:	bd08      	pop	{r3, pc}
   d5a40:	00030244 	.word	0x00030244

000d5a44 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d5a44:	b508      	push	{r3, lr}
   d5a46:	4b02      	ldr	r3, [pc, #8]	; (d5a50 <spark_sync_time_pending+0xc>)
   d5a48:	681b      	ldr	r3, [r3, #0]
   d5a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5a4c:	9301      	str	r3, [sp, #4]
   d5a4e:	bd08      	pop	{r3, pc}
   d5a50:	00030244 	.word	0x00030244

000d5a54 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5a54:	b508      	push	{r3, lr}
   d5a56:	4b02      	ldr	r3, [pc, #8]	; (d5a60 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5a58:	681b      	ldr	r3, [r3, #0]
   d5a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5a5c:	9301      	str	r3, [sp, #4]
   d5a5e:	bd08      	pop	{r3, pc}
   d5a60:	00030244 	.word	0x00030244

000d5a64 <spark_cloud_disconnect>:
DYNALIB_FN(16, system_cloud, spark_publish_vitals, int(system_tick_t, void*))
DYNALIB_FN(17, system_cloud, spark_cloud_disconnect, int(const spark_cloud_disconnect_options*, void*))
   d5a64:	b508      	push	{r3, lr}
   d5a66:	4b02      	ldr	r3, [pc, #8]	; (d5a70 <spark_cloud_disconnect+0xc>)
   d5a68:	681b      	ldr	r3, [r3, #0]
   d5a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5a6c:	9301      	str	r3, [sp, #4]
   d5a6e:	bd08      	pop	{r3, pc}
   d5a70:	00030244 	.word	0x00030244

000d5a74 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5a74:	b508      	push	{r3, lr}
   d5a76:	4b02      	ldr	r3, [pc, #8]	; (d5a80 <malloc+0xc>)
   d5a78:	681b      	ldr	r3, [r3, #0]
   d5a7a:	681b      	ldr	r3, [r3, #0]
   d5a7c:	9301      	str	r3, [sp, #4]
   d5a7e:	bd08      	pop	{r3, pc}
   d5a80:	0003021c 	.word	0x0003021c

000d5a84 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5a84:	b508      	push	{r3, lr}
   d5a86:	4b02      	ldr	r3, [pc, #8]	; (d5a90 <free+0xc>)
   d5a88:	681b      	ldr	r3, [r3, #0]
   d5a8a:	685b      	ldr	r3, [r3, #4]
   d5a8c:	9301      	str	r3, [sp, #4]
   d5a8e:	bd08      	pop	{r3, pc}
   d5a90:	0003021c 	.word	0x0003021c

000d5a94 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5a94:	b508      	push	{r3, lr}
   d5a96:	4b02      	ldr	r3, [pc, #8]	; (d5aa0 <realloc+0xc>)
   d5a98:	681b      	ldr	r3, [r3, #0]
   d5a9a:	689b      	ldr	r3, [r3, #8]
   d5a9c:	9301      	str	r3, [sp, #4]
   d5a9e:	bd08      	pop	{r3, pc}
   d5aa0:	0003021c 	.word	0x0003021c

000d5aa4 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d5aa4:	b508      	push	{r3, lr}
   d5aa6:	4b02      	ldr	r3, [pc, #8]	; (d5ab0 <abort+0xc>)
   d5aa8:	681b      	ldr	r3, [r3, #0]
   d5aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5aac:	9301      	str	r3, [sp, #4]
   d5aae:	bd08      	pop	{r3, pc}
   d5ab0:	0003021c 	.word	0x0003021c

000d5ab4 <__errno>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d5ab4:	b508      	push	{r3, lr}
   d5ab6:	4b02      	ldr	r3, [pc, #8]	; (d5ac0 <__errno+0xc>)
   d5ab8:	681b      	ldr	r3, [r3, #0]
   d5aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5abc:	9301      	str	r3, [sp, #4]
   d5abe:	bd08      	pop	{r3, pc}
   d5ac0:	0003021c 	.word	0x0003021c

000d5ac4 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5ac4:	b508      	push	{r3, lr}
   d5ac6:	4b02      	ldr	r3, [pc, #8]	; (d5ad0 <newlib_impure_ptr_callback+0xc>)
   d5ac8:	681b      	ldr	r3, [r3, #0]
   d5aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5acc:	9301      	str	r3, [sp, #4]
   d5ace:	bd08      	pop	{r3, pc}
   d5ad0:	0003021c 	.word	0x0003021c

000d5ad4 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5ad4:	2200      	movs	r2, #0
   d5ad6:	6840      	ldr	r0, [r0, #4]
   d5ad8:	4611      	mov	r1, r2
   d5ada:	f7ff bf73 	b.w	d59c4 <network_listening>

000d5ade <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5ade:	2200      	movs	r2, #0
   d5ae0:	6840      	ldr	r0, [r0, #4]
   d5ae2:	4611      	mov	r1, r2
   d5ae4:	f7ff bf7e 	b.w	d59e4 <network_get_listen_timeout>

000d5ae8 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5ae8:	6840      	ldr	r0, [r0, #4]
   d5aea:	2200      	movs	r2, #0
   d5aec:	f7ff bf72 	b.w	d59d4 <network_set_listen_timeout>

000d5af0 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5af0:	6840      	ldr	r0, [r0, #4]
   d5af2:	2200      	movs	r2, #0
   d5af4:	f081 0101 	eor.w	r1, r1, #1
   d5af8:	f7ff bf5c 	b.w	d59b4 <network_listen>

000d5afc <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5afc:	2300      	movs	r3, #0
   d5afe:	6840      	ldr	r0, [r0, #4]
   d5b00:	461a      	mov	r2, r3
   d5b02:	4619      	mov	r1, r3
   d5b04:	f7ff bf4e 	b.w	d59a4 <network_off>

000d5b08 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5b08:	2300      	movs	r3, #0
   d5b0a:	6840      	ldr	r0, [r0, #4]
   d5b0c:	461a      	mov	r2, r3
   d5b0e:	4619      	mov	r1, r3
   d5b10:	f7ff bf40 	b.w	d5994 <network_on>

000d5b14 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5b14:	2200      	movs	r2, #0
   d5b16:	6840      	ldr	r0, [r0, #4]
   d5b18:	4611      	mov	r1, r2
   d5b1a:	f7ff bf33 	b.w	d5984 <network_ready>

000d5b1e <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5b1e:	2200      	movs	r2, #0
   d5b20:	6840      	ldr	r0, [r0, #4]
   d5b22:	4611      	mov	r1, r2
   d5b24:	f7ff bf1e 	b.w	d5964 <network_connecting>

000d5b28 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5b28:	6840      	ldr	r0, [r0, #4]
   d5b2a:	2200      	movs	r2, #0
   d5b2c:	2102      	movs	r1, #2
   d5b2e:	f7ff bf21 	b.w	d5974 <network_disconnect>

000d5b32 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5b32:	2300      	movs	r3, #0
   d5b34:	6840      	ldr	r0, [r0, #4]
   d5b36:	461a      	mov	r2, r3
   d5b38:	f7ff bf0c 	b.w	d5954 <network_connect>

000d5b3c <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5b3c:	4b02      	ldr	r3, [pc, #8]	; (d5b48 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5b3e:	2203      	movs	r2, #3
   d5b40:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5b42:	4a02      	ldr	r2, [pc, #8]	; (d5b4c <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5b44:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5b46:	4770      	bx	lr
   d5b48:	2003e644 	.word	0x2003e644
   d5b4c:	000d9a14 	.word	0x000d9a14

000d5b50 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d5b50:	2100      	movs	r1, #0
   d5b52:	f7ff be69 	b.w	d5828 <hal_spi_acquire>

000d5b56 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d5b56:	2100      	movs	r1, #0
   d5b58:	f7ff be6e 	b.w	d5838 <hal_spi_release>

000d5b5c <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d5b5c:	b510      	push	{r4, lr}
   d5b5e:	4604      	mov	r4, r0
   d5b60:	4608      	mov	r0, r1
{
    _spi = spi;
   d5b62:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d5b64:	f7ff fe48 	bl	d57f8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d5b68:	2300      	movs	r3, #0
   d5b6a:	6063      	str	r3, [r4, #4]
}
   d5b6c:	4620      	mov	r0, r4
   d5b6e:	bd10      	pop	{r4, pc}

000d5b70 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d5b70:	b510      	push	{r4, lr}
   d5b72:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d5b74:	7800      	ldrb	r0, [r0, #0]
   d5b76:	f7ff ffeb 	bl	d5b50 <_ZN8SPIClass4lockEv.isra.0>
   d5b7a:	b948      	cbnz	r0, d5b90 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d5b7c:	7820      	ldrb	r0, [r4, #0]
   d5b7e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d5b82:	f7ff fe11 	bl	d57a8 <hal_spi_begin>
        unlock();
   d5b86:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5b8c:	f7ff bfe3 	b.w	d5b56 <_ZN8SPIClass6unlockEv.isra.0>
}
   d5b90:	bd10      	pop	{r4, pc}

000d5b92 <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d5b92:	b513      	push	{r0, r1, r4, lr}
   d5b94:	4604      	mov	r4, r0
    if (!lock())
   d5b96:	7800      	ldrb	r0, [r0, #0]
{
   d5b98:	9101      	str	r1, [sp, #4]
    if (!lock())
   d5b9a:	f7ff ffd9 	bl	d5b50 <_ZN8SPIClass4lockEv.isra.0>
   d5b9e:	9901      	ldr	r1, [sp, #4]
   d5ba0:	b940      	cbnz	r0, d5bb4 <_ZN8SPIClass11setBitOrderEh+0x22>
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   d5ba2:	7820      	ldrb	r0, [r4, #0]
   d5ba4:	f7ff fe08 	bl	d57b8 <hal_spi_set_bit_order>
        unlock();
   d5ba8:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5baa:	b002      	add	sp, #8
   d5bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5bb0:	f7ff bfd1 	b.w	d5b56 <_ZN8SPIClass6unlockEv.isra.0>
}
   d5bb4:	b002      	add	sp, #8
   d5bb6:	bd10      	pop	{r4, pc}

000d5bb8 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   d5bb8:	b513      	push	{r0, r1, r4, lr}
   d5bba:	4604      	mov	r4, r0
    if (!lock())
   d5bbc:	7800      	ldrb	r0, [r0, #0]
{
   d5bbe:	9101      	str	r1, [sp, #4]
    if (!lock())
   d5bc0:	f7ff ffc6 	bl	d5b50 <_ZN8SPIClass4lockEv.isra.0>
   d5bc4:	9901      	ldr	r1, [sp, #4]
   d5bc6:	b940      	cbnz	r0, d5bda <_ZN8SPIClass11setDataModeEh+0x22>
    {
        hal_spi_set_data_mode(_spi, mode);
   d5bc8:	7820      	ldrb	r0, [r4, #0]
   d5bca:	f7ff fdfd 	bl	d57c8 <hal_spi_set_data_mode>
        unlock();
   d5bce:	7820      	ldrb	r0, [r4, #0]
    }
}
   d5bd0:	b002      	add	sp, #8
   d5bd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d5bd6:	f7ff bfbe 	b.w	d5b56 <_ZN8SPIClass6unlockEv.isra.0>
}
   d5bda:	b002      	add	sp, #8
   d5bdc:	bd10      	pop	{r4, pc}
	...

000d5be0 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d5be0:	0840      	lsrs	r0, r0, #1
{
   d5be2:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d5be4:	6018      	str	r0, [r3, #0]
   d5be6:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d5be8:	6818      	ldr	r0, [r3, #0]
   d5bea:	4288      	cmp	r0, r1
   d5bec:	b2e5      	uxtb	r5, r4
   d5bee:	d906      	bls.n	d5bfe <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d5bf0:	3401      	adds	r4, #1
   d5bf2:	2c08      	cmp	r4, #8
   d5bf4:	d002      	beq.n	d5bfc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d5bf6:	0840      	lsrs	r0, r0, #1
   d5bf8:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d5bfa:	e7f5      	b.n	d5be8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d5bfc:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d5bfe:	4b02      	ldr	r3, [pc, #8]	; (d5c08 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d5c00:	5d5b      	ldrb	r3, [r3, r5]
   d5c02:	7013      	strb	r3, [r2, #0]
}
   d5c04:	bd30      	pop	{r4, r5, pc}
   d5c06:	bf00      	nop
   d5c08:	000d9a48 	.word	0x000d9a48

000d5c0c <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d5c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5c10:	b088      	sub	sp, #32
    unsigned clock = 0;
   d5c12:	2300      	movs	r3, #0
{
   d5c14:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d5c16:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   d5c18:	9302      	str	r3, [sp, #8]
{
   d5c1a:	460e      	mov	r6, r1
   d5c1c:	4617      	mov	r7, r2
    if (!lock())
   d5c1e:	f7ff ff97 	bl	d5b50 <_ZN8SPIClass4lockEv.isra.0>
   d5c22:	4605      	mov	r5, r0
   d5c24:	bb00      	cbnz	r0, d5c68 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d5c26:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   d5c2a:	4601      	mov	r1, r0
   d5c2c:	2214      	movs	r2, #20
   d5c2e:	a803      	add	r0, sp, #12
   d5c30:	f003 fc2a 	bl	d9488 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d5c34:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d5c36:	462a      	mov	r2, r5
   d5c38:	a903      	add	r1, sp, #12
   d5c3a:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   d5c3c:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   d5c40:	f7ff fdea 	bl	d5818 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d5c44:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   d5c46:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d5c4a:	ab02      	add	r3, sp, #8
   d5c4c:	f10d 0207 	add.w	r2, sp, #7
   d5c50:	fb07 f106 	mul.w	r1, r7, r6
   d5c54:	f7ff ffc4 	bl	d5be0 <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   d5c58:	7820      	ldrb	r0, [r4, #0]
   d5c5a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d5c5e:	f7ff fdbb 	bl	d57d8 <hal_spi_set_clock_divider>
        unlock();
   d5c62:	7820      	ldrb	r0, [r4, #0]
   d5c64:	f7ff ff77 	bl	d5b56 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   d5c68:	9802      	ldr	r0, [sp, #8]
   d5c6a:	b008      	add	sp, #32
   d5c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5c70 <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   d5c70:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d5c72:	7800      	ldrb	r0, [r0, #0]
   d5c74:	f7ff fdb8 	bl	d57e8 <hal_spi_transfer>
}
   d5c78:	b2c0      	uxtb	r0, r0
   d5c7a:	bd08      	pop	{r3, pc}

000d5c7c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d5c7c:	b510      	push	{r4, lr}
   d5c7e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d5c80:	6800      	ldr	r0, [r0, #0]
   d5c82:	b118      	cbz	r0, d5c8c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d5c84:	f7ff fefe 	bl	d5a84 <free>
            wakeupSource_ = nullptr;
   d5c88:	2300      	movs	r3, #0
   d5c8a:	6023      	str	r3, [r4, #0]
        }
    }
   d5c8c:	bd10      	pop	{r4, pc}

000d5c8e <_ZN17SystemSleepResultaSEOS_>:
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d5c8e:	b538      	push	{r3, r4, r5, lr}
        error_ = result.error_;
   d5c90:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
   d5c94:	8083      	strh	r3, [r0, #4]
        compatResult_ = result.compatResult_;
   d5c96:	460b      	mov	r3, r1
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d5c98:	460d      	mov	r5, r1
        compatResult_ = result.compatResult_;
   d5c9a:	f853 2f06 	ldr.w	r2, [r3, #6]!
   d5c9e:	f8c0 2006 	str.w	r2, [r0, #6]
   d5ca2:	889b      	ldrh	r3, [r3, #4]
   d5ca4:	8143      	strh	r3, [r0, #10]
    SystemSleepResult& operator=(SystemSleepResult&& result) {
   d5ca6:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d5ca8:	f7ff ffe8 	bl	d5c7c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (result.wakeupSource_) {
   d5cac:	682b      	ldr	r3, [r5, #0]
   d5cae:	b113      	cbz	r3, d5cb6 <_ZN17SystemSleepResultaSEOS_+0x28>
            wakeupSource_ = result.wakeupSource_;
   d5cb0:	6023      	str	r3, [r4, #0]
            result.wakeupSource_ = nullptr;
   d5cb2:	2300      	movs	r3, #0
   d5cb4:	602b      	str	r3, [r5, #0]
    }
   d5cb6:	4620      	mov	r0, r4
   d5cb8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5cbc <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>:

    int copyWakeupSource(hal_wakeup_source_base_t* source) {
   d5cbc:	b538      	push	{r3, r4, r5, lr}
   d5cbe:	460c      	mov	r4, r1
   d5cc0:	4605      	mov	r5, r0
        freeWakeupSourceMemory();
   d5cc2:	f7ff ffdb 	bl	d5c7c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
        if (source) {
   d5cc6:	b144      	cbz	r4, d5cda <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x1e>
            wakeupSource_ = (hal_wakeup_source_base_t*)malloc(source->size);
   d5cc8:	8820      	ldrh	r0, [r4, #0]
   d5cca:	f7ff fed3 	bl	d5a74 <malloc>
   d5cce:	6028      	str	r0, [r5, #0]
            if (wakeupSource_) {
   d5cd0:	b128      	cbz	r0, d5cde <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x22>
                memcpy(wakeupSource_, source, source->size);
   d5cd2:	8822      	ldrh	r2, [r4, #0]
   d5cd4:	4621      	mov	r1, r4
   d5cd6:	f003 fbaf 	bl	d9438 <memcpy>
            } else {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        return SYSTEM_ERROR_NONE;
   d5cda:	2000      	movs	r0, #0
    }
   d5cdc:	bd38      	pop	{r3, r4, r5, pc}
                return SYSTEM_ERROR_NO_MEMORY;
   d5cde:	4801      	ldr	r0, [pc, #4]	; (d5ce4 <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x28>)
   d5ce0:	e7fc      	b.n	d5cdc <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t+0x20>
   d5ce2:	bf00      	nop
   d5ce4:	fffffefc 	.word	0xfffffefc

000d5ce8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE>:
void SystemClass::enterSafeMode(SystemResetFlags flags)
{
    system_reset(SYSTEM_RESET_MODE_SAFE, 0, 0, flags.value(), nullptr);
}

SystemSleepResult SystemClass::sleep(const particle::SystemSleepConfiguration& config) {
   d5ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
   d5cea:	4d2d      	ldr	r5, [pc, #180]	; (d5da0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
    }

    // It doesn't guarantee the combination of sleep mode and
    // wakeup sources that the platform supports.
    bool valid() const {
        if (!valid_) {
   d5cec:	7d0b      	ldrb	r3, [r1, #20]
   d5cee:	4604      	mov	r4, r0
   d5cf0:	b08b      	sub	sp, #44	; 0x2c
   d5cf2:	4608      	mov	r0, r1
   d5cf4:	1daf      	adds	r7, r5, #6
   d5cf6:	2b00      	cmp	r3, #0
   d5cf8:	d038      	beq.n	d5d6c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
        return static_cast<SystemSleepMode>(config_->mode);
   d5cfa:	680b      	ldr	r3, [r1, #0]
            return valid_;
        }
        if (sleepMode() == SystemSleepMode::NONE) {
   d5cfc:	791b      	ldrb	r3, [r3, #4]
   d5cfe:	2b00      	cmp	r3, #0
   d5d00:	d034      	beq.n	d5d6c <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x84>
              error_(SYSTEM_ERROR_NONE) {
   d5d02:	2200      	movs	r2, #0
    SleepResult() {}
   d5d04:	4b27      	ldr	r3, [pc, #156]	; (d5da4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d5d06:	9304      	str	r3, [sp, #16]
    if (!config.valid()) {
        LOG(ERROR, "System sleep configuration is invalid.");
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
    } else {
        SystemSleepResult result;
        int ret = system_sleep_ext(config.halConfig(), result.halWakeupSource(), nullptr);
   d5d08:	a902      	add	r1, sp, #8
   d5d0a:	3004      	adds	r0, #4
              error_(SYSTEM_ERROR_NONE) {
   d5d0c:	9202      	str	r2, [sp, #8]
   d5d0e:	f8ad 200c 	strh.w	r2, [sp, #12]
    SleepResult() {}
   d5d12:	f88d 200e 	strb.w	r2, [sp, #14]
   d5d16:	f7ff fe13 	bl	d5940 <system_sleep_ext>
        compatResult_ = result.compatResult_;
   d5d1a:	f8dd 300e 	ldr.w	r3, [sp, #14]
   d5d1e:	f8c5 3006 	str.w	r3, [r5, #6]
        result.setError(static_cast<system_error_t>(ret));
   d5d22:	b200      	sxth	r0, r0
   d5d24:	f8bd 3012 	ldrh.w	r3, [sp, #18]
        error_ = error;
   d5d28:	f8ad 000c 	strh.w	r0, [sp, #12]
        error_ = result.error_;
   d5d2c:	80a8      	strh	r0, [r5, #4]
        copyWakeupSource(result.wakeupSource_);
   d5d2e:	9902      	ldr	r1, [sp, #8]
        compatResult_ = result.compatResult_;
   d5d30:	80bb      	strh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d5d32:	4628      	mov	r0, r5
   d5d34:	f7ff ffc2 	bl	d5cbc <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        freeWakeupSourceMemory();
   d5d38:	a802      	add	r0, sp, #8
   d5d3a:	f7ff ff9f 	bl	d5c7c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
              error_(SYSTEM_ERROR_NONE) {
   d5d3e:	2300      	movs	r3, #0
   d5d40:	6023      	str	r3, [r4, #0]
   d5d42:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d5d44:	71a3      	strb	r3, [r4, #6]
   d5d46:	8123      	strh	r3, [r4, #8]
   d5d48:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d5d4c:	8163      	strh	r3, [r4, #10]
        error_ = result.error_;
   d5d4e:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
   d5d52:	80a3      	strh	r3, [r4, #4]
        compatResult_ = result.compatResult_;
   d5d54:	683b      	ldr	r3, [r7, #0]
   d5d56:	f8c4 3006 	str.w	r3, [r4, #6]
   d5d5a:	88bb      	ldrh	r3, [r7, #4]
        copyWakeupSource(result.wakeupSource_);
   d5d5c:	6829      	ldr	r1, [r5, #0]
        compatResult_ = result.compatResult_;
   d5d5e:	8163      	strh	r3, [r4, #10]
        copyWakeupSource(result.wakeupSource_);
   d5d60:	4620      	mov	r0, r4
   d5d62:	f7ff ffab 	bl	d5cbc <_ZN17SystemSleepResult16copyWakeupSourceEP24hal_wakeup_source_base_t>
        System.systemSleepResult_ = result;
    }
    return System.systemSleepResult_;
}
   d5d66:	4620      	mov	r0, r4
   d5d68:	b00b      	add	sp, #44	; 0x2c
   d5d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        LOG(ERROR, "System sleep configuration is invalid.");
   d5d6c:	2600      	movs	r6, #0
   d5d6e:	2320      	movs	r3, #32
   d5d70:	e9cd 3602 	strd	r3, r6, [sp, #8]
   d5d74:	4b0c      	ldr	r3, [pc, #48]	; (d5da8 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc0>)
   d5d76:	9300      	str	r3, [sp, #0]
   d5d78:	490c      	ldr	r1, [pc, #48]	; (d5dac <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xc4>)
   d5d7a:	4633      	mov	r3, r6
   d5d7c:	aa02      	add	r2, sp, #8
   d5d7e:	2032      	movs	r0, #50	; 0x32
   d5d80:	f7ff fda2 	bl	d58c8 <log_message>
    SleepResult() {}
   d5d84:	4b07      	ldr	r3, [pc, #28]	; (d5da4 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xbc>)
   d5d86:	9304      	str	r3, [sp, #16]
        System.systemSleepResult_ = SystemSleepResult(SYSTEM_ERROR_INVALID_ARGUMENT);
   d5d88:	a902      	add	r1, sp, #8
        error_ = error;
   d5d8a:	f64f 63f2 	movw	r3, #65266	; 0xfef2
   d5d8e:	4804      	ldr	r0, [pc, #16]	; (d5da0 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0xb8>)
              error_(SYSTEM_ERROR_NONE) {
   d5d90:	9602      	str	r6, [sp, #8]
    SleepResult() {}
   d5d92:	f88d 600e 	strb.w	r6, [sp, #14]
        error_ = error;
   d5d96:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5d9a:	f7ff ff78 	bl	d5c8e <_ZN17SystemSleepResultaSEOS_>
   d5d9e:	e7cb      	b.n	d5d38 <_ZN11SystemClass5sleepERKN8particle24SystemSleepConfigurationE+0x50>
   d5da0:	2003e64c 	.word	0x2003e64c
   d5da4:	ffff0000 	.word	0xffff0000
   d5da8:	000d9a57 	.word	0x000d9a57
   d5dac:	000d9a50 	.word	0x000d9a50

000d5db0 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d5db0:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5db2:	4b09      	ldr	r3, [pc, #36]	; (d5dd8 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d5db4:	4c09      	ldr	r4, [pc, #36]	; (d5ddc <_GLOBAL__sub_I_System+0x2c>)
   d5db6:	2202      	movs	r2, #2
   d5db8:	2000      	movs	r0, #0
   d5dba:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d5dbc:	4b08      	ldr	r3, [pc, #32]	; (d5de0 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d5dbe:	6020      	str	r0, [r4, #0]
   d5dc0:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d5dc2:	71a0      	strb	r0, [r4, #6]
   d5dc4:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5dc6:	f7ff fd8f 	bl	d58e8 <set_system_mode>
SystemClass System;
   d5dca:	4620      	mov	r0, r4
   d5dcc:	4a05      	ldr	r2, [pc, #20]	; (d5de4 <_GLOBAL__sub_I_System+0x34>)
   d5dce:	4906      	ldr	r1, [pc, #24]	; (d5de8 <_GLOBAL__sub_I_System+0x38>)
   d5dd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d5dd4:	f002 bcd8 	b.w	d8788 <__aeabi_atexit>
   d5dd8:	2003e658 	.word	0x2003e658
   d5ddc:	2003e64c 	.word	0x2003e64c
   d5de0:	ffff0000 	.word	0xffff0000
   d5de4:	2003e0dc 	.word	0x2003e0dc
   d5de8:	000d4165 	.word	0x000d4165

000d5dec <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d5dec:	b510      	push	{r4, lr}
   d5dee:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d5df0:	f003 fb88 	bl	d9504 <strlen>
   d5df4:	3801      	subs	r0, #1
   d5df6:	1823      	adds	r3, r4, r0
   d5df8:	4620      	mov	r0, r4
	while(i<j){
   d5dfa:	4283      	cmp	r3, r0
   d5dfc:	d906      	bls.n	d5e0c <_Z11str_reversePc+0x20>
		c = *i;
   d5dfe:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d5e00:	7819      	ldrb	r1, [r3, #0]
   d5e02:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d5e06:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d5e0a:	e7f6      	b.n	d5dfa <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d5e0c:	bd10      	pop	{r4, pc}

000d5e0e <ltoa>:



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
   d5e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
   d5e12:	1e93      	subs	r3, r2, #2
{
   d5e14:	b08c      	sub	sp, #48	; 0x30
      if (36 < base || 2 > base)
   d5e16:	2b22      	cmp	r3, #34	; 0x22
   d5e18:	f04f 0300 	mov.w	r3, #0
{
   d5e1c:	460d      	mov	r5, r1
   d5e1e:	4614      	mov	r4, r2
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
   d5e20:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
      if (36 < base || 2 > base)
   d5e24:	d927      	bls.n	d5e76 <ltoa+0x68>

      if (10 == base && N < 0L)
   d5e26:	2800      	cmp	r0, #0
   d5e28:	da2a      	bge.n	d5e80 <ltoa+0x72>
      {
            *head++ = '-';
   d5e2a:	462e      	mov	r6, r5
   d5e2c:	232d      	movs	r3, #45	; 0x2d
   d5e2e:	f806 3b01 	strb.w	r3, [r6], #1
            uarg    = -N;
   d5e32:	4240      	negs	r0, r0
   d5e34:	240a      	movs	r4, #10
      *tail-- = '\0';
   d5e36:	f10d 072b 	add.w	r7, sp, #43	; 0x2b
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
   d5e3a:	f04f 0801 	mov.w	r8, #1
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
   d5e3e:	4622      	mov	r2, r4
   d5e40:	4601      	mov	r1, r0
   d5e42:	a801      	add	r0, sp, #4
   d5e44:	f003 fad6 	bl	d93f4 <ldiv>
   d5e48:	9b02      	ldr	r3, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
   d5e4a:	9801      	ldr	r0, [sp, #4]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
   d5e4c:	2b09      	cmp	r3, #9
   d5e4e:	bfcc      	ite	gt
   d5e50:	2237      	movgt	r2, #55	; 0x37
   d5e52:	2230      	movle	r2, #48	; 0x30
   d5e54:	fa52 f383 	uxtab	r3, r2, r3
   d5e58:	f807 3901 	strb.w	r3, [r7], #-1
            for (i = 1; uarg; ++i)
   d5e5c:	f108 0801 	add.w	r8, r8, #1
   d5e60:	2800      	cmp	r0, #0
   d5e62:	d1ec      	bne.n	d5e3e <ltoa+0x30>
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
   d5e64:	4642      	mov	r2, r8
   d5e66:	1c79      	adds	r1, r7, #1
   d5e68:	4630      	mov	r0, r6
   d5e6a:	f003 fae5 	bl	d9438 <memcpy>
      return str;
}
   d5e6e:	4628      	mov	r0, r5
   d5e70:	b00c      	add	sp, #48	; 0x30
   d5e72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (10 == base && N < 0L)
   d5e76:	2a0a      	cmp	r2, #10
   d5e78:	d0d5      	beq.n	d5e26 <ltoa+0x18>
      if (uarg)
   d5e7a:	b118      	cbz	r0, d5e84 <ltoa+0x76>
   d5e7c:	462e      	mov	r6, r5
   d5e7e:	e7da      	b.n	d5e36 <ltoa+0x28>
   d5e80:	240a      	movs	r4, #10
   d5e82:	e7fa      	b.n	d5e7a <ltoa+0x6c>
      else  *tail-- = '0';
   d5e84:	2330      	movs	r3, #48	; 0x30
   d5e86:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
   d5e8a:	462e      	mov	r6, r5
   d5e8c:	f10d 072a 	add.w	r7, sp, #42	; 0x2a
      int i = 2;
   d5e90:	f04f 0802 	mov.w	r8, #2
   d5e94:	e7e6      	b.n	d5e64 <ltoa+0x56>

000d5e96 <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5e96:	b570      	push	{r4, r5, r6, lr}
   d5e98:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d5e9a:	1e91      	subs	r1, r2, #2
   d5e9c:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d5e9e:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d5ea0:	d822      	bhi.n	d5ee8 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d5ea2:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d5ea4:	b16d      	cbz	r5, d5ec2 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d5ea6:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d5eaa:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d5eae:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d5eb0:	2d09      	cmp	r5, #9
                *ptr += '0';
   d5eb2:	bf94      	ite	ls
   d5eb4:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d5eb6:	3157      	addhi	r1, #87	; 0x57
   d5eb8:	b2c9      	uxtb	r1, r1
   d5eba:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d5ebe:	4635      	mov	r5, r6
	while(a){
   d5ec0:	e7f0      	b.n	d5ea4 <ultoa+0xe>
   d5ec2:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d5ec4:	4423      	add	r3, r4
            *ptr++ = '0';
   d5ec6:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d5ec8:	4293      	cmp	r3, r2
   d5eca:	d902      	bls.n	d5ed2 <ultoa+0x3c>
            *ptr++ = '0';
   d5ecc:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d5ed0:	e7fa      	b.n	d5ec8 <ultoa+0x32>
   d5ed2:	1a1a      	subs	r2, r3, r0
   d5ed4:	4283      	cmp	r3, r0
   d5ed6:	bf38      	it	cc
   d5ed8:	2200      	movcc	r2, #0

	*ptr = '\0';
   d5eda:	2300      	movs	r3, #0
   d5edc:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d5ede:	4620      	mov	r0, r4
   d5ee0:	f7ff ff84 	bl	d5dec <_Z11str_reversePc>
	return buffer;
   d5ee4:	4620      	mov	r0, r4
}
   d5ee6:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d5ee8:	2000      	movs	r0, #0
   d5eea:	e7fc      	b.n	d5ee6 <ultoa+0x50>

000d5eec <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d5eec:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
   d5eee:	1e03      	subs	r3, r0, #0
__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
   d5ef0:	460c      	mov	r4, r1
   d5ef2:	4615      	mov	r5, r2
	if(a<0){
   d5ef4:	da0e      	bge.n	d5f14 <itoa+0x28>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d5ef6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
		*buffer = '-';
   d5efa:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
   d5efe:	bf14      	ite	ne
   d5f00:	4258      	negne	r0, r3
   d5f02:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
   d5f04:	2301      	movs	r3, #1
		*buffer = '-';
   d5f06:	700a      	strb	r2, [r1, #0]
		ultoa((unsigned)v, buffer + 1, radix);
   d5f08:	462a      	mov	r2, r5
   d5f0a:	4419      	add	r1, r3
	}else{
		ultoa(a, buffer, radix);
   d5f0c:	f7ff ffc3 	bl	d5e96 <ultoa>
	}
	return buffer;
}
   d5f10:	4620      	mov	r0, r4
   d5f12:	bd38      	pop	{r3, r4, r5, pc}
		ultoa(a, buffer, radix);
   d5f14:	2301      	movs	r3, #1
   d5f16:	e7f9      	b.n	d5f0c <itoa+0x20>

000d5f18 <_ZN9IPAddressaSIPKhEERS_T_>:
    void set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3);


    // Overloaded copy operators to allow initialisation of IPAddress objects from other types
    template<typename T>
    IPAddress& operator=(T address) {
   d5f18:	b570      	push	{r4, r5, r6, lr}
   d5f1a:	b086      	sub	sp, #24
   d5f1c:	4606      	mov	r6, r0
class IPAddress : public Printable {
   d5f1e:	ad01      	add	r5, sp, #4
        return *this = IPAddress(address);
   d5f20:	4668      	mov	r0, sp
   d5f22:	f001 fe11 	bl	d7b48 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d5f26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5f28:	1d34      	adds	r4, r6, #4
   d5f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5f2c:	682b      	ldr	r3, [r5, #0]
   d5f2e:	7023      	strb	r3, [r4, #0]
    }
   d5f30:	4630      	mov	r0, r6
   d5f32:	b006      	add	sp, #24
   d5f34:	bd70      	pop	{r4, r5, r6, pc}

000d5f36 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5f36:	b510      	push	{r4, lr}
   d5f38:	4604      	mov	r4, r0
{
	free(buffer);
   d5f3a:	6800      	ldr	r0, [r0, #0]
   d5f3c:	f7ff fda2 	bl	d5a84 <free>
}
   d5f40:	4620      	mov	r0, r4
   d5f42:	bd10      	pop	{r4, pc}

000d5f44 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5f44:	b510      	push	{r4, lr}
   d5f46:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5f48:	6800      	ldr	r0, [r0, #0]
   d5f4a:	b108      	cbz	r0, d5f50 <_ZN6String10invalidateEv+0xc>
   d5f4c:	f7ff fd9a 	bl	d5a84 <free>
	buffer = NULL;
   d5f50:	2300      	movs	r3, #0
	capacity = len = 0;
   d5f52:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d5f56:	6023      	str	r3, [r4, #0]
}
   d5f58:	bd10      	pop	{r4, pc}

000d5f5a <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5f5a:	b538      	push	{r3, r4, r5, lr}
   d5f5c:	4604      	mov	r4, r0
   d5f5e:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5f60:	6800      	ldr	r0, [r0, #0]
   d5f62:	3101      	adds	r1, #1
   d5f64:	f7ff fd96 	bl	d5a94 <realloc>
	if (newbuffer) {
   d5f68:	b110      	cbz	r0, d5f70 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5f6a:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d5f6e:	2001      	movs	r0, #1
	}
	return 0;
}
   d5f70:	bd38      	pop	{r3, r4, r5, pc}

000d5f72 <_ZN6String7reserveEj>:
{
   d5f72:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5f74:	6803      	ldr	r3, [r0, #0]
{
   d5f76:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5f78:	b123      	cbz	r3, d5f84 <_ZN6String7reserveEj+0x12>
   d5f7a:	6843      	ldr	r3, [r0, #4]
   d5f7c:	428b      	cmp	r3, r1
   d5f7e:	d301      	bcc.n	d5f84 <_ZN6String7reserveEj+0x12>
   d5f80:	2001      	movs	r0, #1
}
   d5f82:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d5f84:	4620      	mov	r0, r4
   d5f86:	f7ff ffe8 	bl	d5f5a <_ZN6String12changeBufferEj>
   d5f8a:	2800      	cmp	r0, #0
   d5f8c:	d0f9      	beq.n	d5f82 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d5f8e:	68a3      	ldr	r3, [r4, #8]
   d5f90:	2b00      	cmp	r3, #0
   d5f92:	d1f5      	bne.n	d5f80 <_ZN6String7reserveEj+0xe>
   d5f94:	6822      	ldr	r2, [r4, #0]
   d5f96:	7013      	strb	r3, [r2, #0]
   d5f98:	e7f2      	b.n	d5f80 <_ZN6String7reserveEj+0xe>

000d5f9a <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5f9a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d5f9c:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d5f9e:	4611      	mov	r1, r2
   d5fa0:	9201      	str	r2, [sp, #4]
{
   d5fa2:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d5fa4:	f7ff ffe5 	bl	d5f72 <_ZN6String7reserveEj>
   d5fa8:	9a01      	ldr	r2, [sp, #4]
   d5faa:	b928      	cbnz	r0, d5fb8 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d5fac:	4620      	mov	r0, r4
   d5fae:	f7ff ffc9 	bl	d5f44 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d5fb2:	4620      	mov	r0, r4
   d5fb4:	b003      	add	sp, #12
   d5fb6:	bd30      	pop	{r4, r5, pc}
	len = length;
   d5fb8:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d5fba:	4629      	mov	r1, r5
   d5fbc:	6820      	ldr	r0, [r4, #0]
   d5fbe:	f003 fa3b 	bl	d9438 <memcpy>
	buffer[len] = 0;
   d5fc2:	6822      	ldr	r2, [r4, #0]
   d5fc4:	68a3      	ldr	r3, [r4, #8]
   d5fc6:	2100      	movs	r1, #0
   d5fc8:	54d1      	strb	r1, [r2, r3]
	return *this;
   d5fca:	e7f2      	b.n	d5fb2 <_ZN6String4copyEPKcj+0x18>

000d5fcc <_ZN6StringC1EPKc>:
	buffer = NULL;
   d5fcc:	2300      	movs	r3, #0
String::String(const char *cstr)
   d5fce:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d5fd0:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d5fd4:	4604      	mov	r4, r0
	len = 0;
   d5fd6:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5fd8:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d5fda:	b141      	cbz	r1, d5fee <_ZN6StringC1EPKc+0x22>
   d5fdc:	4608      	mov	r0, r1
   d5fde:	9101      	str	r1, [sp, #4]
   d5fe0:	f003 fa90 	bl	d9504 <strlen>
   d5fe4:	9901      	ldr	r1, [sp, #4]
   d5fe6:	4602      	mov	r2, r0
   d5fe8:	4620      	mov	r0, r4
   d5fea:	f7ff ffd6 	bl	d5f9a <_ZN6String4copyEPKcj>
}
   d5fee:	4620      	mov	r0, r4
   d5ff0:	b002      	add	sp, #8
   d5ff2:	bd10      	pop	{r4, pc}

000d5ff4 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d5ff4:	b538      	push	{r3, r4, r5, lr}
   d5ff6:	4605      	mov	r5, r0
	if (buffer) {
   d5ff8:	6800      	ldr	r0, [r0, #0]
{
   d5ffa:	460c      	mov	r4, r1
	if (buffer) {
   d5ffc:	b168      	cbz	r0, d601a <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d5ffe:	686a      	ldr	r2, [r5, #4]
   d6000:	688b      	ldr	r3, [r1, #8]
   d6002:	429a      	cmp	r2, r3
   d6004:	d307      	bcc.n	d6016 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d6006:	6809      	ldr	r1, [r1, #0]
   d6008:	f003 fa74 	bl	d94f4 <strcpy>
			len = rhs.len;
   d600c:	68a3      	ldr	r3, [r4, #8]
   d600e:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d6010:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d6012:	60a3      	str	r3, [r4, #8]
}
   d6014:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d6016:	f7ff fd35 	bl	d5a84 <free>
	buffer = rhs.buffer;
   d601a:	6823      	ldr	r3, [r4, #0]
   d601c:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d601e:	6863      	ldr	r3, [r4, #4]
   d6020:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d6022:	68a3      	ldr	r3, [r4, #8]
   d6024:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d6026:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d6028:	e9c4 3300 	strd	r3, r3, [r4]
   d602c:	e7f1      	b.n	d6012 <_ZN6String4moveERS_+0x1e>

000d602e <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d602e:	4288      	cmp	r0, r1
{
   d6030:	b510      	push	{r4, lr}
   d6032:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d6034:	d005      	beq.n	d6042 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d6036:	680b      	ldr	r3, [r1, #0]
   d6038:	b12b      	cbz	r3, d6046 <_ZN6StringaSERKS_+0x18>
   d603a:	688a      	ldr	r2, [r1, #8]
   d603c:	4619      	mov	r1, r3
   d603e:	f7ff ffac 	bl	d5f9a <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d6042:	4620      	mov	r0, r4
   d6044:	bd10      	pop	{r4, pc}
	else invalidate();
   d6046:	f7ff ff7d 	bl	d5f44 <_ZN6String10invalidateEv>
   d604a:	e7fa      	b.n	d6042 <_ZN6StringaSERKS_+0x14>

000d604c <_ZN6StringaSEO15StringSumHelper>:
	return *this;
}

String & String::operator = (StringSumHelper &&rval)
{
	if (this != &rval) move(rval);
   d604c:	4288      	cmp	r0, r1
{
   d604e:	b510      	push	{r4, lr}
   d6050:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d6052:	d001      	beq.n	d6058 <_ZN6StringaSEO15StringSumHelper+0xc>
   d6054:	f7ff ffce 	bl	d5ff4 <_ZN6String4moveERS_>
	return *this;
}
   d6058:	4620      	mov	r0, r4
   d605a:	bd10      	pop	{r4, pc}

000d605c <_ZN6StringaSEPKc>:
#endif

String & String::operator = (const char *cstr)
{
   d605c:	b513      	push	{r0, r1, r4, lr}
   d605e:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d6060:	b159      	cbz	r1, d607a <_ZN6StringaSEPKc+0x1e>
   d6062:	4608      	mov	r0, r1
   d6064:	9101      	str	r1, [sp, #4]
   d6066:	f003 fa4d 	bl	d9504 <strlen>
   d606a:	9901      	ldr	r1, [sp, #4]
   d606c:	4602      	mov	r2, r0
   d606e:	4620      	mov	r0, r4
   d6070:	f7ff ff93 	bl	d5f9a <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d6074:	4620      	mov	r0, r4
   d6076:	b002      	add	sp, #8
   d6078:	bd10      	pop	{r4, pc}
	else invalidate();
   d607a:	f7ff ff63 	bl	d5f44 <_ZN6String10invalidateEv>
   d607e:	e7f9      	b.n	d6074 <_ZN6StringaSEPKc+0x18>

000d6080 <_ZN6StringC1Eih>:
String::String(int value, unsigned char base)
   d6080:	b510      	push	{r4, lr}
   d6082:	4604      	mov	r4, r0
   d6084:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d6086:	2300      	movs	r3, #0
	capacity = 0;
   d6088:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d608c:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d608e:	7323      	strb	r3, [r4, #12]
String::String(int value, unsigned char base)
   d6090:	4608      	mov	r0, r1
	itoa(value, buf, base);
   d6092:	a901      	add	r1, sp, #4
   d6094:	f7ff ff2a 	bl	d5eec <itoa>
	*this = buf;
   d6098:	a901      	add	r1, sp, #4
   d609a:	4620      	mov	r0, r4
   d609c:	f7ff ffde 	bl	d605c <_ZN6StringaSEPKc>
}
   d60a0:	4620      	mov	r0, r4
   d60a2:	b00a      	add	sp, #40	; 0x28
   d60a4:	bd10      	pop	{r4, pc}

000d60a6 <_ZN6StringC1Elh>:
String::String(long value, unsigned char base)
   d60a6:	b510      	push	{r4, lr}
   d60a8:	4604      	mov	r4, r0
   d60aa:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d60ac:	2300      	movs	r3, #0
	capacity = 0;
   d60ae:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d60b2:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d60b4:	7323      	strb	r3, [r4, #12]
String::String(long value, unsigned char base)
   d60b6:	4608      	mov	r0, r1
	ltoa(value, buf, base);
   d60b8:	a901      	add	r1, sp, #4
   d60ba:	f7ff fea8 	bl	d5e0e <ltoa>
	*this = buf;
   d60be:	a901      	add	r1, sp, #4
   d60c0:	4620      	mov	r0, r4
   d60c2:	f7ff ffcb 	bl	d605c <_ZN6StringaSEPKc>
}
   d60c6:	4620      	mov	r0, r4
   d60c8:	b00a      	add	sp, #40	; 0x28
   d60ca:	bd10      	pop	{r4, pc}

000d60cc <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d60cc:	b570      	push	{r4, r5, r6, lr}
   d60ce:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d60d0:	460e      	mov	r6, r1
   d60d2:	b909      	cbnz	r1, d60d8 <_ZN6String6concatEPKcj+0xc>
   d60d4:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d60d6:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d60d8:	b16a      	cbz	r2, d60f6 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d60da:	6884      	ldr	r4, [r0, #8]
   d60dc:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d60de:	4621      	mov	r1, r4
   d60e0:	f7ff ff47 	bl	d5f72 <_ZN6String7reserveEj>
   d60e4:	2800      	cmp	r0, #0
   d60e6:	d0f5      	beq.n	d60d4 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d60e8:	6828      	ldr	r0, [r5, #0]
   d60ea:	68ab      	ldr	r3, [r5, #8]
   d60ec:	4631      	mov	r1, r6
   d60ee:	4418      	add	r0, r3
   d60f0:	f003 fa00 	bl	d94f4 <strcpy>
	len = newlen;
   d60f4:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d60f6:	2001      	movs	r0, #1
   d60f8:	e7ed      	b.n	d60d6 <_ZN6String6concatEPKcj+0xa>

000d60fa <_ZN6String6concatERKS_>:
	return concat(s.buffer, s.len);
   d60fa:	688a      	ldr	r2, [r1, #8]
   d60fc:	6809      	ldr	r1, [r1, #0]
   d60fe:	f7ff bfe5 	b.w	d60cc <_ZN6String6concatEPKcj>

000d6102 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d6102:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d6104:	688a      	ldr	r2, [r1, #8]
   d6106:	6809      	ldr	r1, [r1, #0]
{
   d6108:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d610a:	f7ff ffdf 	bl	d60cc <_ZN6String6concatEPKcj>
   d610e:	b910      	cbnz	r0, d6116 <_ZplRK15StringSumHelperRK6String+0x14>
   d6110:	4620      	mov	r0, r4
   d6112:	f7ff ff17 	bl	d5f44 <_ZN6String10invalidateEv>
	return a;
}
   d6116:	4620      	mov	r0, r4
   d6118:	bd10      	pop	{r4, pc}

000d611a <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
   d611a:	b513      	push	{r0, r1, r4, lr}
   d611c:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d611e:	b929      	cbnz	r1, d612c <_ZplRK15StringSumHelperPKc+0x12>
   d6120:	4620      	mov	r0, r4
   d6122:	f7ff ff0f 	bl	d5f44 <_ZN6String10invalidateEv>
	return a;
}
   d6126:	4620      	mov	r0, r4
   d6128:	b002      	add	sp, #8
   d612a:	bd10      	pop	{r4, pc}
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
   d612c:	4608      	mov	r0, r1
   d612e:	9101      	str	r1, [sp, #4]
   d6130:	f003 f9e8 	bl	d9504 <strlen>
   d6134:	9901      	ldr	r1, [sp, #4]
   d6136:	4602      	mov	r2, r0
   d6138:	4620      	mov	r0, r4
   d613a:	f7ff ffc7 	bl	d60cc <_ZN6String6concatEPKcj>
   d613e:	2800      	cmp	r0, #0
   d6140:	d0ee      	beq.n	d6120 <_ZplRK15StringSumHelperPKc+0x6>
   d6142:	e7f0      	b.n	d6126 <_ZplRK15StringSumHelperPKc+0xc>

000d6144 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
   d6144:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6146:	6882      	ldr	r2, [r0, #8]
   d6148:	b93a      	cbnz	r2, d615a <_ZNK6String6equalsEPKc+0x16>
   d614a:	b121      	cbz	r1, d6156 <_ZNK6String6equalsEPKc+0x12>
   d614c:	7808      	ldrb	r0, [r1, #0]
	if (cstr == NULL) return buffer[0] == 0;
	return strcmp(buffer, cstr) == 0;
   d614e:	fab0 f080 	clz	r0, r0
   d6152:	0940      	lsrs	r0, r0, #5
   d6154:	e000      	b.n	d6158 <_ZNK6String6equalsEPKc+0x14>
	if (len == 0) return (cstr == NULL || *cstr == 0);
   d6156:	2001      	movs	r0, #1
}
   d6158:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
   d615a:	6800      	ldr	r0, [r0, #0]
   d615c:	b909      	cbnz	r1, d6162 <_ZNK6String6equalsEPKc+0x1e>
   d615e:	7800      	ldrb	r0, [r0, #0]
   d6160:	e7f5      	b.n	d614e <_ZNK6String6equalsEPKc+0xa>
	return strcmp(buffer, cstr) == 0;
   d6162:	f003 f9bd 	bl	d94e0 <strcmp>
   d6166:	e7f2      	b.n	d614e <_ZNK6String6equalsEPKc+0xa>

000d6168 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
   d6168:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
   d616a:	6883      	ldr	r3, [r0, #8]
   d616c:	4293      	cmp	r3, r2
   d616e:	d907      	bls.n	d6180 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
   d6170:	6804      	ldr	r4, [r0, #0]
   d6172:	6809      	ldr	r1, [r1, #0]
   d6174:	18a0      	adds	r0, r4, r2
   d6176:	f003 f9ed 	bl	d9554 <strstr>
	if (found == NULL) return -1;
   d617a:	b108      	cbz	r0, d6180 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
   d617c:	1b00      	subs	r0, r0, r4
}
   d617e:	bd10      	pop	{r4, pc}
	if (fromIndex >= len) return -1;
   d6180:	f04f 30ff 	mov.w	r0, #4294967295
   d6184:	e7fb      	b.n	d617e <_ZNK6String7indexOfERKS_j+0x16>

000d6186 <_ZNK6String7indexOfERKS_>:
	return indexOf(s2, 0);
   d6186:	2200      	movs	r2, #0
   d6188:	f7ff bfee 	b.w	d6168 <_ZNK6String7indexOfERKS_j>

000d618c <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
   d618c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (left > right) {
   d618e:	429a      	cmp	r2, r3
{
   d6190:	460f      	mov	r7, r1
   d6192:	461d      	mov	r5, r3
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
   d6194:	490c      	ldr	r1, [pc, #48]	; (d61c8 <_ZNK6String9substringEjj+0x3c>)
	if (left > right) {
   d6196:	bf88      	it	hi
   d6198:	4613      	movhi	r3, r2
{
   d619a:	4614      	mov	r4, r2
   d619c:	4606      	mov	r6, r0
	if (left > right) {
   d619e:	bf84      	itt	hi
   d61a0:	462c      	movhi	r4, r5
   d61a2:	461d      	movhi	r5, r3
	String out;
   d61a4:	f7ff ff12 	bl	d5fcc <_ZN6StringC1EPKc>
	if (left > len) return out;
   d61a8:	68ba      	ldr	r2, [r7, #8]
   d61aa:	42a2      	cmp	r2, r4
   d61ac:	d30a      	bcc.n	d61c4 <_ZNK6String9substringEjj+0x38>
	if (right > len) right = len;
	out.copy(&buffer[left], right - left);
   d61ae:	6839      	ldr	r1, [r7, #0]
   d61b0:	42aa      	cmp	r2, r5
   d61b2:	bf94      	ite	ls
   d61b4:	ebc4 0202 	rsbls	r2, r4, r2
   d61b8:	ebc4 0205 	rsbhi	r2, r4, r5
   d61bc:	4421      	add	r1, r4
   d61be:	4630      	mov	r0, r6
   d61c0:	f7ff feeb 	bl	d5f9a <_ZN6String4copyEPKcj>
	return out;
}
   d61c4:	4630      	mov	r0, r6
   d61c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d61c8:	000d99d7 	.word	0x000d99d7

000d61cc <_ZNK6String9substringEj>:
{
   d61cc:	b510      	push	{r4, lr}
   d61ce:	4604      	mov	r4, r0
	return substring(left, len);
   d61d0:	688b      	ldr	r3, [r1, #8]
   d61d2:	f7ff ffdb 	bl	d618c <_ZNK6String9substringEjj>
}
   d61d6:	4620      	mov	r0, r4
   d61d8:	bd10      	pop	{r4, pc}

000d61da <_ZN6String6removeEjj>:
String& String::remove(unsigned int index){
        int count = len - index;
        return remove(index, count);
}

String& String::remove(unsigned int index, unsigned int count){
   d61da:	b538      	push	{r3, r4, r5, lr}
   d61dc:	4604      	mov	r4, r0
   d61de:	4608      	mov	r0, r1
	if (index >= len) { return *this; }
   d61e0:	68a3      	ldr	r3, [r4, #8]
   d61e2:	428b      	cmp	r3, r1
   d61e4:	d911      	bls.n	d620a <_ZN6String6removeEjj+0x30>
	if (count <= 0) { return *this; }
   d61e6:	b182      	cbz	r2, d620a <_ZN6String6removeEjj+0x30>
	if (index + count > len) { count = len - index; }
   d61e8:	4411      	add	r1, r2
   d61ea:	428b      	cmp	r3, r1
   d61ec:	bf38      	it	cc
   d61ee:	1a1a      	subcc	r2, r3, r0
	char *writeTo = buffer + index;
   d61f0:	6825      	ldr	r5, [r4, #0]
	len = len - count;
   d61f2:	1a99      	subs	r1, r3, r2
	memmove(writeTo, buffer + index + count,len - index);
   d61f4:	1813      	adds	r3, r2, r0
	len = len - count;
   d61f6:	60a1      	str	r1, [r4, #8]
	memmove(writeTo, buffer + index + count,len - index);
   d61f8:	1a0a      	subs	r2, r1, r0
   d61fa:	18e9      	adds	r1, r5, r3
   d61fc:	4428      	add	r0, r5
   d61fe:	f003 f929 	bl	d9454 <memmove>
	buffer[len] = 0;
   d6202:	6822      	ldr	r2, [r4, #0]
   d6204:	68a3      	ldr	r3, [r4, #8]
   d6206:	2100      	movs	r1, #0
   d6208:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d620a:	4620      	mov	r0, r4
   d620c:	bd38      	pop	{r3, r4, r5, pc}

000d620e <_ZN6String6removeEj>:
        int count = len - index;
   d620e:	6882      	ldr	r2, [r0, #8]
        return remove(index, count);
   d6210:	1a52      	subs	r2, r2, r1
   d6212:	f7ff bfe2 	b.w	d61da <_ZN6String6removeEjj>

000d6216 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d6216:	4770      	bx	lr

000d6218 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
   d6218:	4770      	bx	lr

000d621a <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      }
   d621a:	4770      	bx	lr

000d621c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d621c:	4770      	bx	lr
	...

000d6220 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d6220:	4b06      	ldr	r3, [pc, #24]	; (d623c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d6222:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d6224:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d6226:	f100 040c 	add.w	r4, r0, #12
	    ||
   d622a:	d005      	beq.n	d6238 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d622c:	4608      	mov	r0, r1
   d622e:	f002 fab9 	bl	d87a4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d6232:	2800      	cmp	r0, #0
	return nullptr;
   d6234:	bf08      	it	eq
   d6236:	2400      	moveq	r4, #0
      }
   d6238:	4620      	mov	r0, r4
   d623a:	bd10      	pop	{r4, pc}
   d623c:	000d9bc8 	.word	0x000d9bc8

000d6240 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d6240:	4b06      	ldr	r3, [pc, #24]	; (d625c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d6242:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d6244:	b510      	push	{r4, lr}
   d6246:	f100 040c 	add.w	r4, r0, #12
	    ||
   d624a:	d005      	beq.n	d6258 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d624c:	4608      	mov	r0, r1
   d624e:	f002 faa9 	bl	d87a4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d6252:	2800      	cmp	r0, #0
	return nullptr;
   d6254:	bf08      	it	eq
   d6256:	2400      	moveq	r4, #0
      }
   d6258:	4620      	mov	r0, r4
   d625a:	bd10      	pop	{r4, pc}
   d625c:	000d9bc8 	.word	0x000d9bc8

000d6260 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d6260:	4b06      	ldr	r3, [pc, #24]	; (d627c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d6262:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d6264:	b510      	push	{r4, lr}
   d6266:	f100 040c 	add.w	r4, r0, #12
	    ||
   d626a:	d005      	beq.n	d6278 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d626c:	4608      	mov	r0, r1
   d626e:	f002 fa99 	bl	d87a4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d6272:	2800      	cmp	r0, #0
	return nullptr;
   d6274:	bf08      	it	eq
   d6276:	2400      	moveq	r4, #0
      }
   d6278:	4620      	mov	r0, r4
   d627a:	bd10      	pop	{r4, pc}
   d627c:	000d9bc8 	.word	0x000d9bc8

000d6280 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d6280:	b510      	push	{r4, lr}
   d6282:	2168      	movs	r1, #104	; 0x68
   d6284:	4604      	mov	r4, r0
   d6286:	f002 fa84 	bl	d8792 <_ZdlPvj>
   d628a:	4620      	mov	r0, r4
   d628c:	bd10      	pop	{r4, pc}

000d628e <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d628e:	b510      	push	{r4, lr}
   d6290:	2128      	movs	r1, #40	; 0x28
   d6292:	4604      	mov	r4, r0
   d6294:	f002 fa7d 	bl	d8792 <_ZdlPvj>
   d6298:	4620      	mov	r0, r4
   d629a:	bd10      	pop	{r4, pc}

000d629c <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
   d629c:	b510      	push	{r4, lr}
   d629e:	2130      	movs	r1, #48	; 0x30
   d62a0:	4604      	mov	r4, r0
   d62a2:	f002 fa76 	bl	d8792 <_ZdlPvj>
   d62a6:	4620      	mov	r0, r4
   d62a8:	bd10      	pop	{r4, pc}

000d62aa <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d62aa:	f7fd bef8 	b.w	d409e <_ZdlPv>

000d62ae <_ZNSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d62ae:	f7fd bef6 	b.w	d409e <_ZdlPv>

000d62b2 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
   d62b2:	f7fd bef4 	b.w	d409e <_ZdlPv>

000d62b6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d62b6:	b510      	push	{r4, lr}
          _M_dispose();
   d62b8:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d62ba:	4604      	mov	r4, r0
          _M_dispose();
   d62bc:	689b      	ldr	r3, [r3, #8]
   d62be:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d62c0:	68a3      	ldr	r3, [r4, #8]
   d62c2:	3b01      	subs	r3, #1
   d62c4:	60a3      	str	r3, [r4, #8]
   d62c6:	b92b      	cbnz	r3, d62d4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d62c8:	6823      	ldr	r3, [r4, #0]
   d62ca:	4620      	mov	r0, r4
   d62cc:	68db      	ldr	r3, [r3, #12]
    }
   d62ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d62d2:	4718      	bx	r3
    }
   d62d4:	bd10      	pop	{r4, pc}

000d62d6 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d62d6:	b510      	push	{r4, lr}
   d62d8:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d62da:	6800      	ldr	r0, [r0, #0]
   d62dc:	b108      	cbz	r0, d62e2 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d62de:	f7ff f963 	bl	d55a8 <os_mutex_recursive_destroy>
    }
   d62e2:	4620      	mov	r0, r4
   d62e4:	bd10      	pop	{r4, pc}
	...

000d62e8 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>:
    WiringBleLock(WiringBleLock&& lock) :
            locked_(lock.locked_) {
        lock.locked_ = false;
    }

    void lock() {
   d62e8:	b510      	push	{r4, lr}
        mutex_.lock();
   d62ea:	4b04      	ldr	r3, [pc, #16]	; (d62fc <_ZN8particle3ble13WiringBleLock4lockEv.isra.0+0x14>)
    void lock() {
   d62ec:	4604      	mov	r4, r0
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d62ee:	6818      	ldr	r0, [r3, #0]
   d62f0:	f7ff f962 	bl	d55b8 <os_mutex_recursive_lock>
        locked_ = true;
   d62f4:	2301      	movs	r3, #1
   d62f6:	7023      	strb	r3, [r4, #0]
    }
   d62f8:	bd10      	pop	{r4, pc}
   d62fa:	bf00      	nop
   d62fc:	2003e664 	.word	0x2003e664

000d6300 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>:

    void unlock() {
   d6300:	b510      	push	{r4, lr}
        mutex_.unlock();
   d6302:	4b04      	ldr	r3, [pc, #16]	; (d6314 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0+0x14>)
    void unlock() {
   d6304:	4604      	mov	r4, r0
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d6306:	6818      	ldr	r0, [r3, #0]
   d6308:	f7ff f95e 	bl	d55c8 <os_mutex_recursive_unlock>
        locked_ = false;
   d630c:	2300      	movs	r3, #0
   d630e:	7023      	strb	r3, [r4, #0]
    }
   d6310:	bd10      	pop	{r4, pc}
   d6312:	bf00      	nop
   d6314:	2003e664 	.word	0x2003e664

000d6318 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>:
        break;
    }
    return uuids;
}

size_t BleAdvertisingData::locate(const uint8_t* buf, size_t len, BleAdvertisingDataType type, size_t* offset) {
   d6318:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (offset == nullptr) {
        return 0;
    }
    uint8_t adsType = static_cast<uint8_t>(type);
    size_t adsLen;
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d631a:	2500      	movs	r5, #0
   d631c:	1cec      	adds	r4, r5, #3
   d631e:	428c      	cmp	r4, r1
   d6320:	d80d      	bhi.n	d633e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
        adsLen = buf[i];
        if (buf[i + 1] == adsType) {
   d6322:	1c6e      	adds	r6, r5, #1
        adsLen = buf[i];
   d6324:	5d44      	ldrb	r4, [r0, r5]
        if (buf[i + 1] == adsType) {
   d6326:	5d87      	ldrb	r7, [r0, r6]
   d6328:	4297      	cmp	r7, r2
   d632a:	d105      	bne.n	d6338 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x20>
            // The value of adsLen doesn't include the length field of an AD structure.
            if ((i + adsLen + 1) <= len) {
   d632c:	4426      	add	r6, r4
   d632e:	42b1      	cmp	r1, r6
   d6330:	d305      	bcc.n	d633e <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x26>
                *offset = i;
   d6332:	601d      	str	r5, [r3, #0]
                adsLen += 1;
   d6334:	1c60      	adds	r0, r4, #1
            // Navigate to the next AD structure.
            i += (adsLen + 1);
        }
    }
    return 0;
}
   d6336:	bdf0      	pop	{r4, r5, r6, r7, pc}
            i += (adsLen + 1);
   d6338:	3401      	adds	r4, #1
   d633a:	4425      	add	r5, r4
    for (size_t i = 0; (i + 3) <= len; i = i) {
   d633c:	e7ee      	b.n	d631c <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x4>
    return 0;
   d633e:	2000      	movs	r0, #0
   d6340:	e7f9      	b.n	d6336 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0+0x1e>

000d6342 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d6342:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d6346:	4604      	mov	r4, r0
   d6348:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
   d634c:	461e      	mov	r6, r3
   d634e:	4689      	mov	r9, r1
   d6350:	ab01      	add	r3, sp, #4
   d6352:	4690      	mov	r8, r2
   d6354:	460a      	mov	r2, r1
   d6356:	6a01      	ldr	r1, [r0, #32]
   d6358:	f7ff ffde 	bl	d6318 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (!force && adsLen > 0) {
   d635c:	6a25      	ldr	r5, [r4, #32]
   d635e:	1cb3      	adds	r3, r6, #2
   d6360:	bb17      	cbnz	r7, d63a8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
   d6362:	b308      	cbz	r0, d63a8 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x66>
        if ((staLen + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d6364:	195f      	adds	r7, r3, r5
   d6366:	1a3f      	subs	r7, r7, r0
   d6368:	2f1f      	cmp	r7, #31
   d636a:	d819      	bhi.n	d63a0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d636c:	f8dd 9004 	ldr.w	r9, [sp, #4]
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d6370:	f109 0a02 	add.w	sl, r9, #2
            uint16_t moveLen = selfLen_ - offset - adsLen;
   d6374:	eba5 0209 	sub.w	r2, r5, r9
   d6378:	1a12      	subs	r2, r2, r0
            memmove(&selfData_[offset + len + 2], &selfData_[offset + adsLen], moveLen);
   d637a:	eb00 0109 	add.w	r1, r0, r9
   d637e:	eb06 000a 	add.w	r0, r6, sl
   d6382:	b292      	uxth	r2, r2
   d6384:	4421      	add	r1, r4
   d6386:	4420      	add	r0, r4
   d6388:	f003 f864 	bl	d9454 <memmove>
            selfData_[offset] = len + 1;
   d638c:	1c73      	adds	r3, r6, #1
   d638e:	f804 3009 	strb.w	r3, [r4, r9]
            memcpy(&selfData_[offset + 2], buf, len);
   d6392:	4632      	mov	r2, r6
   d6394:	4641      	mov	r1, r8
   d6396:	eb04 000a 	add.w	r0, r4, sl
   d639a:	f003 f84d 	bl	d9438 <memcpy>
            selfLen_ = staLen + len + 2;
   d639e:	6227      	str	r7, [r4, #32]
}
   d63a0:	6a20      	ldr	r0, [r4, #32]
   d63a2:	b002      	add	sp, #8
   d63a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    else if ((selfLen_ + len + 2) <= BLE_MAX_ADV_DATA_LEN) {
   d63a8:	442b      	add	r3, r5
   d63aa:	2b1f      	cmp	r3, #31
   d63ac:	d8f8      	bhi.n	d63a0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
        selfData_[selfLen_++] = len + 1;
   d63ae:	1c73      	adds	r3, r6, #1
   d63b0:	5563      	strb	r3, [r4, r5]
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d63b2:	1ca8      	adds	r0, r5, #2
   d63b4:	4425      	add	r5, r4
   d63b6:	6220      	str	r0, [r4, #32]
        memcpy(&selfData_[selfLen_], buf, len);
   d63b8:	4632      	mov	r2, r6
        selfData_[selfLen_++] = static_cast<uint8_t>(type);
   d63ba:	f885 9001 	strb.w	r9, [r5, #1]
        memcpy(&selfData_[selfLen_], buf, len);
   d63be:	4641      	mov	r1, r8
   d63c0:	4420      	add	r0, r4
   d63c2:	f003 f839 	bl	d9438 <memcpy>
        selfLen_ += len;
   d63c6:	6a23      	ldr	r3, [r4, #32]
   d63c8:	4433      	add	r3, r6
   d63ca:	6223      	str	r3, [r4, #32]
   d63cc:	e7e8      	b.n	d63a0 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0+0x5e>
	...

000d63d0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>:
}

BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
        : impl_(characteristic.impl_) {
    if (!impl()) {
        SPARK_ASSERT(false);
   d63d0:	4a02      	ldr	r2, [pc, #8]	; (d63dc <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0+0xc>)
   d63d2:	2100      	movs	r1, #0
   d63d4:	200a      	movs	r0, #10
   d63d6:	f7ff ba6f 	b.w	d58b8 <panic_>
   d63da:	bf00      	nop
   d63dc:	000d54a5 	.word	0x000d54a5

000d63e0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d63e0:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d63e2:	b538      	push	{r3, r4, r5, lr}
   d63e4:	4604      	mov	r4, r0
	  switch (__op)
   d63e6:	d007      	beq.n	d63f8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x18>
   d63e8:	2a03      	cmp	r2, #3
   d63ea:	d011      	beq.n	d6410 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x30>
   d63ec:	2a01      	cmp	r2, #1
   d63ee:	d101      	bne.n	d63f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d63f0:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d63f2:	6023      	str	r3, [r4, #0]
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d63f4:	2000      	movs	r0, #0
   d63f6:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d63f8:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   d63fa:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d63fc:	f7fd fe4b 	bl	d4096 <_Znwj>
   d6400:	4603      	mov	r3, r0
   d6402:	2800      	cmp	r0, #0
   d6404:	d0f5      	beq.n	d63f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
   d6406:	e895 0003 	ldmia.w	r5, {r0, r1}
   d640a:	e883 0003 	stmia.w	r3, {r0, r1}
   d640e:	e7f0      	b.n	d63f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d6410:	6800      	ldr	r0, [r0, #0]
   d6412:	2800      	cmp	r0, #0
   d6414:	d0ee      	beq.n	d63f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>
   d6416:	2108      	movs	r1, #8
   d6418:	f002 f9bb 	bl	d8792 <_ZdlPvj>
   d641c:	e7ea      	b.n	d63f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvPKhjRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE10_M_managerERSt9_Any_dataRKSI_St18_Manager_operation+0x14>

000d641e <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation>:
	  switch (__op)
   d641e:	2a02      	cmp	r2, #2
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6420:	b538      	push	{r3, r4, r5, lr}
   d6422:	4604      	mov	r4, r0
	  switch (__op)
   d6424:	d007      	beq.n	d6436 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x18>
   d6426:	2a03      	cmp	r2, #3
   d6428:	d011      	beq.n	d644e <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x30>
   d642a:	2a01      	cmp	r2, #1
   d642c:	d101      	bne.n	d6432 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
	    return __source._M_access<_Functor*>();
   d642e:	680b      	ldr	r3, [r1, #0]
	  __dest._M_access<_Functor*>() =
   d6430:	6023      	str	r3, [r4, #0]
	}
   d6432:	2000      	movs	r0, #0
   d6434:	bd38      	pop	{r3, r4, r5, pc}
	    new _Functor(*__source._M_access<const _Functor*>());
   d6436:	2008      	movs	r0, #8
	  __dest._M_access<_Functor*>() =
   d6438:	680d      	ldr	r5, [r1, #0]
	    new _Functor(*__source._M_access<const _Functor*>());
   d643a:	f7fd fe2c 	bl	d4096 <_Znwj>
   d643e:	4603      	mov	r3, r0
   d6440:	2800      	cmp	r0, #0
   d6442:	d0f5      	beq.n	d6430 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
   d6444:	e895 0003 	ldmia.w	r5, {r0, r1}
   d6448:	e883 0003 	stmia.w	r3, {r0, r1}
   d644c:	e7f0      	b.n	d6430 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x12>
	  delete __victim._M_access<_Functor*>();
   d644e:	6800      	ldr	r0, [r0, #0]
   d6450:	2800      	cmp	r0, #0
   d6452:	d0ee      	beq.n	d6432 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>
   d6454:	2108      	movs	r1, #8
   d6456:	f002 f99c 	bl	d8792 <_ZdlPvj>
   d645a:	e7ea      	b.n	d6432 <_ZNSt14_Function_base13_Base_managerISt5_BindIFPFvRKN8particle13BlePeerDeviceEPvESt12_PlaceholderILi1EES6_EEE10_M_managerERSt9_Any_dataRKSE_St18_Manager_operation+0x14>

000d645c <_ZNSt17_Function_handlerIFvPKhjRKN8particle13BlePeerDeviceEESt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESB_ILi2EESB_ILi3EES8_EEE9_M_invokeERKSt9_Any_dataOS1_OjS5_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d645c:	b430      	push	{r4, r5}
   d645e:	460d      	mov	r5, r1
   d6460:	4611      	mov	r1, r2
   d6462:	461a      	mov	r2, r3
	    return __source._M_access<_Functor*>();
   d6464:	6803      	ldr	r3, [r0, #0]
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
   d6466:	6809      	ldr	r1, [r1, #0]
   d6468:	6828      	ldr	r0, [r5, #0]
   d646a:	e9d3 4300 	ldrd	r4, r3, [r3]
   d646e:	46a4      	mov	ip, r4
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
   d6470:	bc30      	pop	{r4, r5}
   d6472:	4760      	bx	ip

000d6474 <_ZNSt17_Function_handlerIFvRKN8particle13BlePeerDeviceEESt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES6_EEE9_M_invokeERKSt9_Any_dataS3_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6474:	4603      	mov	r3, r0
   d6476:	4608      	mov	r0, r1
	    return __source._M_access<_Functor*>();
   d6478:	681b      	ldr	r3, [r3, #0]
   d647a:	e9d3 2100 	ldrd	r2, r1, [r3]
   d647e:	4710      	bx	r2

000d6480 <_ZNSt14_Function_baseD1Ev>:
    ~_Function_base()
   d6480:	b510      	push	{r4, lr}
      if (_M_manager)
   d6482:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d6484:	4604      	mov	r4, r0
      if (_M_manager)
   d6486:	b113      	cbz	r3, d648e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6488:	2203      	movs	r2, #3
   d648a:	4601      	mov	r1, r0
   d648c:	4798      	blx	r3
    }
   d648e:	4620      	mov	r0, r4
   d6490:	bd10      	pop	{r4, pc}

000d6492 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d6492:	b510      	push	{r4, lr}
   d6494:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6496:	3058      	adds	r0, #88	; 0x58
   d6498:	f7ff fff2 	bl	d6480 <_ZNSt14_Function_baseD1Ev>
    ~BleCharacteristicImpl() = default;
   d649c:	f104 0048 	add.w	r0, r4, #72	; 0x48
      }
   d64a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d64a4:	f7ff bd47 	b.w	d5f36 <_ZN6StringD1Ev>

000d64a8 <_ZN8particle11hexToNibbleEc>:
#include <cstdint>

namespace particle {

inline int hexToNibble(char c) {
    if (c >= '0' && c <= '9') {
   d64a8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d64ac:	b2da      	uxtb	r2, r3
   d64ae:	2a09      	cmp	r2, #9
   d64b0:	d801      	bhi.n	d64b6 <_ZN8particle11hexToNibbleEc+0xe>
        return (c - '0');
   d64b2:	4618      	mov	r0, r3
   d64b4:	4770      	bx	lr
    } else if (c >= 'a' && c <= 'f') {
   d64b6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   d64ba:	2b05      	cmp	r3, #5
   d64bc:	d801      	bhi.n	d64c2 <_ZN8particle11hexToNibbleEc+0x1a>
        return (c - 'a' + 0x0a);
   d64be:	3857      	subs	r0, #87	; 0x57
   d64c0:	4770      	bx	lr
    } else if (c >= 'A' && c <= 'F') {
   d64c2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d64c6:	2b05      	cmp	r3, #5
        return (c - 'A' + 0x0a);
   d64c8:	bf94      	ite	ls
   d64ca:	3837      	subls	r0, #55	; 0x37
    }
    return -1;
   d64cc:	f04f 30ff 	movhi.w	r0, #4294967295
}
   d64d0:	4770      	bx	lr

000d64d2 <_ZN8particle3ble13WiringBleLockC1Ev>:
    WiringBleLock() :
   d64d2:	b510      	push	{r4, lr}
            locked_(false) {
   d64d4:	2300      	movs	r3, #0
    WiringBleLock() :
   d64d6:	4604      	mov	r4, r0
            locked_(false) {
   d64d8:	7003      	strb	r3, [r0, #0]
        lock();
   d64da:	f7ff ff05 	bl	d62e8 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>
    }
   d64de:	4620      	mov	r0, r4
   d64e0:	bd10      	pop	{r4, pc}

000d64e2 <_ZN8particle3ble13WiringBleLockD1Ev>:
    ~WiringBleLock() {
   d64e2:	b510      	push	{r4, lr}
        if (locked_) {
   d64e4:	7803      	ldrb	r3, [r0, #0]
    ~WiringBleLock() {
   d64e6:	4604      	mov	r4, r0
        if (locked_) {
   d64e8:	b10b      	cbz	r3, d64ee <_ZN8particle3ble13WiringBleLockD1Ev+0xc>
            unlock();
   d64ea:	f7ff ff09 	bl	d6300 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>
    }
   d64ee:	4620      	mov	r0, r4
   d64f0:	bd10      	pop	{r4, pc}

000d64f2 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>:
BleAddress& BleAddress::operator=(const hal_ble_addr_t& addr) {
   d64f2:	b082      	sub	sp, #8
   d64f4:	4603      	mov	r3, r0
    address_ = addr;
   d64f6:	6808      	ldr	r0, [r1, #0]
   d64f8:	6849      	ldr	r1, [r1, #4]
   d64fa:	466a      	mov	r2, sp
   d64fc:	c203      	stmia	r2!, {r0, r1}
    address_ = addr.address_;
   d64fe:	466a      	mov	r2, sp
   d6500:	ca03      	ldmia	r2!, {r0, r1}
   d6502:	6018      	str	r0, [r3, #0]
}
   d6504:	4618      	mov	r0, r3
    address_ = addr.address_;
   d6506:	6059      	str	r1, [r3, #4]
}
   d6508:	b002      	add	sp, #8
   d650a:	4770      	bx	lr

000d650c <_ZNK8particle10BleAddresseqERKS0_>:
bool BleAddress::operator==(const BleAddress& addr) const {
   d650c:	b508      	push	{r3, lr}
    if (address_.addr_type == addr.address_.addr_type && !memcmp(address_.addr, addr.address_.addr, BLE_SIG_ADDR_LEN)) {
   d650e:	7982      	ldrb	r2, [r0, #6]
   d6510:	798b      	ldrb	r3, [r1, #6]
   d6512:	429a      	cmp	r2, r3
   d6514:	d106      	bne.n	d6524 <_ZNK8particle10BleAddresseqERKS0_+0x18>
   d6516:	2206      	movs	r2, #6
   d6518:	f002 ff80 	bl	d941c <memcmp>
   d651c:	fab0 f080 	clz	r0, r0
   d6520:	0940      	lsrs	r0, r0, #5
}
   d6522:	bd08      	pop	{r3, pc}
    return false;
   d6524:	2000      	movs	r0, #0
   d6526:	e7fc      	b.n	d6522 <_ZNK8particle10BleAddresseqERKS0_+0x16>

000d6528 <_ZN8particle10BleAddress5clearEv>:
    memset(address_.addr, 0xFF, BLE_SIG_ADDR_LEN);
   d6528:	f04f 33ff 	mov.w	r3, #4294967295
   d652c:	6003      	str	r3, [r0, #0]
   d652e:	8083      	strh	r3, [r0, #4]
}
   d6530:	2000      	movs	r0, #0
   d6532:	4770      	bx	lr

000d6534 <_ZN8particle10BleAddressC1Ev>:
        : address_{} {
   d6534:	2100      	movs	r1, #0
BleAddress::BleAddress()
   d6536:	b508      	push	{r3, lr}
        : address_{} {
   d6538:	6001      	str	r1, [r0, #0]
   d653a:	6041      	str	r1, [r0, #4]
BleAddress::BleAddress()
   d653c:	4602      	mov	r2, r0
    clear();
   d653e:	f7ff fff3 	bl	d6528 <_ZN8particle10BleAddress5clearEv>
    address_.addr_type = BLE_SIG_ADDR_TYPE_PUBLIC;
   d6542:	7191      	strb	r1, [r2, #6]
}
   d6544:	4610      	mov	r0, r2
   d6546:	bd08      	pop	{r3, pc}

000d6548 <_ZN8particle7BleUuidC1Ev>:
        : type_(BleUuidType::LONG) {
   d6548:	2201      	movs	r2, #1
   d654a:	6102      	str	r2, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d654c:	4a06      	ldr	r2, [pc, #24]	; (d6568 <_ZN8particle7BleUuidC1Ev+0x20>)
   d654e:	6811      	ldr	r1, [r2, #0]
   d6550:	6001      	str	r1, [r0, #0]
   d6552:	6851      	ldr	r1, [r2, #4]
   d6554:	6041      	str	r1, [r0, #4]
   d6556:	8911      	ldrh	r1, [r2, #8]
   d6558:	7a92      	ldrb	r2, [r2, #10]
   d655a:	7282      	strb	r2, [r0, #10]
   d655c:	2200      	movs	r2, #0
   d655e:	8101      	strh	r1, [r0, #8]
   d6560:	f8c0 200b 	str.w	r2, [r0, #11]
   d6564:	73c2      	strb	r2, [r0, #15]
}
   d6566:	4770      	bx	lr
   d6568:	000d9bd0 	.word	0x000d9bd0

000d656c <_ZN8particle7BleUuidC1ERKS0_>:
BleUuid::BleUuid(const BleUuid& uuid)
   d656c:	b510      	push	{r4, lr}
        : type_(uuid.type_) {
   d656e:	690b      	ldr	r3, [r1, #16]
   d6570:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d6572:	f101 0210 	add.w	r2, r1, #16
   d6576:	4603      	mov	r3, r0
   d6578:	f851 4b04 	ldr.w	r4, [r1], #4
   d657c:	f843 4b04 	str.w	r4, [r3], #4
   d6580:	4291      	cmp	r1, r2
   d6582:	d1f9      	bne.n	d6578 <_ZN8particle7BleUuidC1ERKS0_+0xc>
}
   d6584:	bd10      	pop	{r4, pc}

000d6586 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d6586:	b510      	push	{r4, lr}
    if (uuid128) {
   d6588:	460b      	mov	r3, r1
BleUuid::BleUuid(const uint8_t* uuid128, BleUuidOrder order) {
   d658a:	4604      	mov	r4, r0
    if (uuid128) {
   d658c:	b1b1      	cbz	r1, d65bc <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x36>
        if (order == BleUuidOrder::LSB) {
   d658e:	2a01      	cmp	r2, #1
   d6590:	f101 0210 	add.w	r2, r1, #16
   d6594:	d10a      	bne.n	d65ac <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x26>
            memcpy(uuid128_, uuid128, BLE_SIG_UUID_128BIT_LEN);
   d6596:	4601      	mov	r1, r0
   d6598:	f853 0b04 	ldr.w	r0, [r3], #4
   d659c:	f841 0b04 	str.w	r0, [r1], #4
   d65a0:	4293      	cmp	r3, r2
   d65a2:	d1f9      	bne.n	d6598 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x12>
        type_ = BleUuidType::LONG;
   d65a4:	2301      	movs	r3, #1
   d65a6:	6123      	str	r3, [r4, #16]
}
   d65a8:	4620      	mov	r0, r4
   d65aa:	bd10      	pop	{r4, pc}
   d65ac:	1e41      	subs	r1, r0, #1
                uuid128_[i] = uuid128[j];
   d65ae:	f812 0d01 	ldrb.w	r0, [r2, #-1]!
   d65b2:	f801 0f01 	strb.w	r0, [r1, #1]!
            for (uint8_t i = 0, j = BLE_SIG_UUID_128BIT_LEN - 1; i < BLE_SIG_UUID_128BIT_LEN; i++, j--) {
   d65b6:	429a      	cmp	r2, r3
   d65b8:	d1f9      	bne.n	d65ae <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x28>
   d65ba:	e7f3      	b.n	d65a4 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x1e>
        memset(uuid128_, 0x00, BLE_SIG_UUID_128BIT_LEN);
   d65bc:	2210      	movs	r2, #16
   d65be:	f002 ff63 	bl	d9488 <memset>
   d65c2:	e7f1      	b.n	d65a8 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE+0x22>

000d65c4 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>:
BleUuid::BleUuid(const uint8_t* uuid128, uint16_t uuid16, BleUuidOrder order)
   d65c4:	b538      	push	{r3, r4, r5, lr}
   d65c6:	4604      	mov	r4, r0
   d65c8:	4615      	mov	r5, r2
        : BleUuid(uuid128, order) {
   d65ca:	461a      	mov	r2, r3
   d65cc:	f7ff ffdb 	bl	d6586 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
    uuid128_[UUID16_LO] = (uint8_t)(uuid16 & 0x00FF);
   d65d0:	81a5      	strh	r5, [r4, #12]
}
   d65d2:	4620      	mov	r0, r4
   d65d4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d65d8 <_ZNK8particle7BleUuid7isValidEv>:
bool BleUuid::isValid() const {
   d65d8:	b508      	push	{r3, lr}
    if (type() == BleUuidType::SHORT) {
   d65da:	6902      	ldr	r2, [r0, #16]
   d65dc:	b922      	cbnz	r2, d65e8 <_ZNK8particle7BleUuid7isValidEv+0x10>
        return (uuid128_[UUID16_LO] != 0x00 || uuid128_[UUID16_HI] != 0x00);
   d65de:	8980      	ldrh	r0, [r0, #12]
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d65e0:	3800      	subs	r0, #0
   d65e2:	bf18      	it	ne
   d65e4:	2001      	movne	r0, #1
}
   d65e6:	bd08      	pop	{r3, pc}
        return memcmp(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d65e8:	4902      	ldr	r1, [pc, #8]	; (d65f4 <_ZNK8particle7BleUuid7isValidEv+0x1c>)
   d65ea:	2210      	movs	r2, #16
   d65ec:	f002 ff16 	bl	d941c <memcmp>
   d65f0:	e7f6      	b.n	d65e0 <_ZNK8particle7BleUuid7isValidEv+0x8>
   d65f2:	bf00      	nop
   d65f4:	000d9bf0 	.word	0x000d9bf0

000d65f8 <_ZNK8particle7BleUuid4typeEv>:
}
   d65f8:	6900      	ldr	r0, [r0, #16]
   d65fa:	4770      	bx	lr

000d65fc <_ZN8particle7BleUuid7halUUIDEv>:
hal_ble_uuid_t BleUuid::halUUID() {
   d65fc:	b538      	push	{r3, r4, r5, lr}
   d65fe:	460c      	mov	r4, r1
    hal_ble_uuid_t uuid = {};
   d6600:	2214      	movs	r2, #20
   d6602:	2100      	movs	r1, #0
hal_ble_uuid_t BleUuid::halUUID() {
   d6604:	4605      	mov	r5, r0
    hal_ble_uuid_t uuid = {};
   d6606:	f002 ff3f 	bl	d9488 <memset>
    if (type_ == BleUuidType::SHORT) {
   d660a:	6923      	ldr	r3, [r4, #16]
   d660c:	b93b      	cbnz	r3, d661e <_ZN8particle7BleUuid7halUUIDEv+0x22>
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d660e:	7b62      	ldrb	r2, [r4, #13]
        uuid.type = BLE_UUID_TYPE_16BIT;
   d6610:	742b      	strb	r3, [r5, #16]
        uuid.uuid16 = (uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8);
   d6612:	7b23      	ldrb	r3, [r4, #12]
   d6614:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d6618:	802b      	strh	r3, [r5, #0]
}
   d661a:	4628      	mov	r0, r5
   d661c:	bd38      	pop	{r3, r4, r5, pc}
        uuid.type = BLE_UUID_TYPE_128BIT;
   d661e:	2301      	movs	r3, #1
   d6620:	742b      	strb	r3, [r5, #16]
        memcpy(uuid.uuid128, uuid128_, BLE_SIG_UUID_128BIT_LEN);
   d6622:	f104 0210 	add.w	r2, r4, #16
   d6626:	462b      	mov	r3, r5
   d6628:	f854 1b04 	ldr.w	r1, [r4], #4
   d662c:	f843 1b04 	str.w	r1, [r3], #4
   d6630:	4294      	cmp	r4, r2
   d6632:	d1f9      	bne.n	d6628 <_ZN8particle7BleUuid7halUUIDEv+0x2c>
   d6634:	e7f1      	b.n	d661a <_ZN8particle7BleUuid7halUUIDEv+0x1e>

000d6636 <_ZNK8particle7BleUuid7shortedEv>:
    return ((uint16_t)uuid128_[UUID16_LO] | ((uint16_t)uuid128_[UUID16_HI] << 8));
   d6636:	7b42      	ldrb	r2, [r0, #13]
   d6638:	7b00      	ldrb	r0, [r0, #12]
}
   d663a:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
   d663e:	4770      	bx	lr

000d6640 <_ZNK8particle7BleUuid8rawBytesEv>:
}
   d6640:	4770      	bx	lr

000d6642 <_ZNK8particle7BleUuideqERKS0_>:
bool BleUuid::operator==(const BleUuid& uuid) const {
   d6642:	b508      	push	{r3, lr}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d6644:	6902      	ldr	r2, [r0, #16]
   d6646:	690b      	ldr	r3, [r1, #16]
   d6648:	429a      	cmp	r2, r3
   d664a:	d106      	bne.n	d665a <_ZNK8particle7BleUuideqERKS0_+0x18>
   d664c:	2210      	movs	r2, #16
   d664e:	f002 fee5 	bl	d941c <memcmp>
   d6652:	fab0 f080 	clz	r0, r0
   d6656:	0940      	lsrs	r0, r0, #5
}
   d6658:	bd08      	pop	{r3, pc}
    return ((type_ == uuid.type_) && !memcmp(uuid128_, uuid.uuid128_, BLE_SIG_UUID_128BIT_LEN));
   d665a:	2000      	movs	r0, #0
   d665c:	e7fc      	b.n	d6658 <_ZNK8particle7BleUuideqERKS0_+0x16>
	...

000d6660 <_ZN8particle7BleUuid9constructEPKc>:
    type_ = BleUuidType::LONG;
   d6660:	2301      	movs	r3, #1
void BleUuid::construct(const char* uuid) {
   d6662:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    type_ = BleUuidType::LONG;
   d6666:	6103      	str	r3, [r0, #16]
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d6668:	4b32      	ldr	r3, [pc, #200]	; (d6734 <_ZN8particle7BleUuid9constructEPKc+0xd4>)
   d666a:	681a      	ldr	r2, [r3, #0]
   d666c:	6002      	str	r2, [r0, #0]
   d666e:	685a      	ldr	r2, [r3, #4]
   d6670:	6042      	str	r2, [r0, #4]
   d6672:	2500      	movs	r5, #0
   d6674:	891a      	ldrh	r2, [r3, #8]
   d6676:	7a9b      	ldrb	r3, [r3, #10]
   d6678:	8102      	strh	r2, [r0, #8]
void BleUuid::construct(const char* uuid) {
   d667a:	4604      	mov	r4, r0
    memcpy(uuid128_, BASE_UUID, BLE_SIG_UUID_128BIT_LEN);
   d667c:	7283      	strb	r3, [r0, #10]
   d667e:	f8c0 500b 	str.w	r5, [r0, #11]
   d6682:	73c5      	strb	r5, [r0, #15]
    if (uuid == nullptr) {
   d6684:	460e      	mov	r6, r1
   d6686:	b321      	cbz	r1, d66d2 <_ZN8particle7BleUuid9constructEPKc+0x72>
    if (strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) == (BLE_SIG_UUID_16BIT_LEN * 2)) {
   d6688:	2124      	movs	r1, #36	; 0x24
   d668a:	4630      	mov	r0, r6
   d668c:	f002 ff55 	bl	d953a <strnlen>
   d6690:	2804      	cmp	r0, #4
   d6692:	d121      	bne.n	d66d8 <_ZN8particle7BleUuid9constructEPKc+0x78>
        char buf[2] = {};
   d6694:	f8ad 5004 	strh.w	r5, [sp, #4]
   d6698:	af01      	add	r7, sp, #4
   d669a:	1cb5      	adds	r5, r6, #2
   d669c:	3606      	adds	r6, #6

inline size_t hexToBytes(const char* src, char* dest, size_t size) {
    size_t n = 0;
    while (n < size) {
        const int h = hexToNibble(*src++);
   d669e:	f815 0c02 	ldrb.w	r0, [r5, #-2]
   d66a2:	f7ff ff01 	bl	d64a8 <_ZN8particle11hexToNibbleEc>
        if (h < 0) {
   d66a6:	f1b0 0800 	subs.w	r8, r0, #0
   d66aa:	db10      	blt.n	d66ce <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        const int l = hexToNibble(*src++);
   d66ac:	f815 0c01 	ldrb.w	r0, [r5, #-1]
   d66b0:	f7ff fefa 	bl	d64a8 <_ZN8particle11hexToNibbleEc>
        if (l < 0) {
   d66b4:	2800      	cmp	r0, #0
   d66b6:	db0a      	blt.n	d66ce <_ZN8particle7BleUuid9constructEPKc+0x6e>
            break;
        }
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d66b8:	3502      	adds	r5, #2
   d66ba:	ea40 1008 	orr.w	r0, r0, r8, lsl #4
    while (n < size) {
   d66be:	42ae      	cmp	r6, r5
        *dest++ = ((unsigned)h << 4) | (unsigned)l;
   d66c0:	f807 0b01 	strb.w	r0, [r7], #1
    while (n < size) {
   d66c4:	d1eb      	bne.n	d669e <_ZN8particle7BleUuid9constructEPKc+0x3e>
            uuid128_[UUID16_LO] = buf[1];
   d66c6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   d66ca:	ba5b      	rev16	r3, r3
   d66cc:	81a3      	strh	r3, [r4, #12]
        type_ = BleUuidType::SHORT;
   d66ce:	2300      	movs	r3, #0
   d66d0:	6123      	str	r3, [r4, #16]
}
   d66d2:	b002      	add	sp, #8
   d66d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    size_t len = BLE_SIG_UUID_128BIT_LEN;
   d66d8:	2710      	movs	r7, #16
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d66da:	2124      	movs	r1, #36	; 0x24
   d66dc:	4630      	mov	r0, r6
   d66de:	f002 ff2c 	bl	d953a <strnlen>
   d66e2:	42a8      	cmp	r0, r5
   d66e4:	d806      	bhi.n	d66f4 <_ZN8particle7BleUuid9constructEPKc+0x94>
   d66e6:	4427      	add	r7, r4
        uuid128_[len - 1] = 0x00;
   d66e8:	2300      	movs	r3, #0
    while (len > 0) {
   d66ea:	42bc      	cmp	r4, r7
   d66ec:	d0f1      	beq.n	d66d2 <_ZN8particle7BleUuid9constructEPKc+0x72>
        uuid128_[len - 1] = 0x00;
   d66ee:	f807 3d01 	strb.w	r3, [r7, #-1]!
    while (len > 0) {
   d66f2:	e7fa      	b.n	d66ea <_ZN8particle7BleUuid9constructEPKc+0x8a>
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d66f4:	2f00      	cmp	r7, #0
   d66f6:	d0ec      	beq.n	d66d2 <_ZN8particle7BleUuid9constructEPKc+0x72>
        int8_t hi = hexToNibble(uuid[i]);
   d66f8:	5d70      	ldrb	r0, [r6, r5]
   d66fa:	f7ff fed5 	bl	d64a8 <_ZN8particle11hexToNibbleEc>
        if (hi >= 0) {
   d66fe:	0603      	lsls	r3, r0, #24
   d6700:	d415      	bmi.n	d672e <_ZN8particle7BleUuid9constructEPKc+0xce>
            uuid128_[len - 1] = hi << 4;
   d6702:	0100      	lsls	r0, r0, #4
   d6704:	3f01      	subs	r7, #1
   d6706:	fa5f f880 	uxtb.w	r8, r0
   d670a:	f804 8007 	strb.w	r8, [r4, r7]
            if (++i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4)) {
   d670e:	2124      	movs	r1, #36	; 0x24
   d6710:	4630      	mov	r0, r6
   d6712:	f002 ff12 	bl	d953a <strnlen>
   d6716:	3501      	adds	r5, #1
   d6718:	42a8      	cmp	r0, r5
   d671a:	d908      	bls.n	d672e <_ZN8particle7BleUuid9constructEPKc+0xce>
                int8_t lo = hexToNibble(uuid[i]);
   d671c:	5d70      	ldrb	r0, [r6, r5]
   d671e:	f7ff fec3 	bl	d64a8 <_ZN8particle11hexToNibbleEc>
   d6722:	b240      	sxtb	r0, r0
                if (lo >= 0) {
   d6724:	2800      	cmp	r0, #0
                    uuid128_[len - 1] |= lo;
   d6726:	bfa4      	itt	ge
   d6728:	ea40 0008 	orrge.w	r0, r0, r8
   d672c:	55e0      	strbge	r0, [r4, r7]
    for (size_t i = 0; i < strnlen(uuid, BLE_SIG_UUID_128BIT_LEN * 2 + 4) && len > 0; i++) {
   d672e:	3501      	adds	r5, #1
   d6730:	e7d3      	b.n	d66da <_ZN8particle7BleUuid9constructEPKc+0x7a>
   d6732:	bf00      	nop
   d6734:	000d9bd0 	.word	0x000d9bd0

000d6738 <_ZN8particle7BleUuidC1EPKc>:
BleUuid::BleUuid(const char* uuid)
   d6738:	b513      	push	{r0, r1, r4, lr}
   d673a:	4604      	mov	r4, r0
   d673c:	9101      	str	r1, [sp, #4]
        : BleUuid() {
   d673e:	f7ff ff03 	bl	d6548 <_ZN8particle7BleUuidC1Ev>
    construct(uuid);
   d6742:	4620      	mov	r0, r4
   d6744:	9901      	ldr	r1, [sp, #4]
   d6746:	f7ff ff8b 	bl	d6660 <_ZN8particle7BleUuid9constructEPKc>
}
   d674a:	4620      	mov	r0, r4
   d674c:	b002      	add	sp, #8
   d674e:	bd10      	pop	{r4, pc}

000d6750 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>:
size_t BleAdvertisingData::append(BleAdvertisingDataType type, const uint8_t* buf, size_t len, bool force) {
   d6750:	b430      	push	{r4, r5}
   d6752:	f89d 5008 	ldrb.w	r5, [sp, #8]
    if (buf == nullptr) {
   d6756:	b912      	cbnz	r2, d675e <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb+0xe>
        return selfLen_;
   d6758:	6a00      	ldr	r0, [r0, #32]
}
   d675a:	bc30      	pop	{r4, r5}
   d675c:	4770      	bx	lr
   d675e:	9502      	str	r5, [sp, #8]
   d6760:	bc30      	pop	{r4, r5}
   d6762:	f7ff bdee 	b.w	d6342 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb.part.0>

000d6766 <_ZN8particle18BleAdvertisingDataC1Ev>:
BleAdvertisingData::BleAdvertisingData()
   d6766:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d6768:	4604      	mov	r4, r0
          selfLen_(0) {
   d676a:	4602      	mov	r2, r0
   d676c:	f100 011f 	add.w	r1, r0, #31
   d6770:	2300      	movs	r3, #0
   d6772:	f802 3b01 	strb.w	r3, [r2], #1
   d6776:	4291      	cmp	r1, r2
   d6778:	d1fb      	bne.n	d6772 <_ZN8particle18BleAdvertisingDataC1Ev+0xc>
   d677a:	6223      	str	r3, [r4, #32]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d677c:	9300      	str	r3, [sp, #0]
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d677e:	2206      	movs	r2, #6
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d6780:	2301      	movs	r3, #1
    uint8_t flag = BLE_SIG_ADV_FLAGS_LE_ONLY_GENERAL_DISC_MODE;
   d6782:	f88d 200f 	strb.w	r2, [sp, #15]
    append(BleAdvertisingDataType::FLAGS, &flag, sizeof(uint8_t));
   d6786:	4619      	mov	r1, r3
   d6788:	f10d 020f 	add.w	r2, sp, #15
   d678c:	4620      	mov	r0, r4
   d678e:	f7ff ffdf 	bl	d6750 <_ZN8particle18BleAdvertisingData6appendENS_22BleAdvertisingDataTypeEPKhjb>
}
   d6792:	4620      	mov	r0, r4
   d6794:	b004      	add	sp, #16
   d6796:	bd10      	pop	{r4, pc}

000d6798 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>:
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d6798:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (offset == nullptr) {
   d679a:	460a      	mov	r2, r1
void BleAdvertisingData::remove(BleAdvertisingDataType type) {
   d679c:	460e      	mov	r6, r1
   d679e:	ab01      	add	r3, sp, #4
   d67a0:	6a01      	ldr	r1, [r0, #32]
   d67a2:	4604      	mov	r4, r0
   d67a4:	f7ff fdb8 	bl	d6318 <_ZN8particle18BleAdvertisingData6locateEPKhjNS_22BleAdvertisingDataTypeEPj.part.0>
    if (len > 0) {
   d67a8:	4605      	mov	r5, r0
   d67aa:	b178      	cbz	r0, d67cc <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE+0x34>
        size_t moveLen = selfLen_ - offset - len;
   d67ac:	9801      	ldr	r0, [sp, #4]
   d67ae:	6a22      	ldr	r2, [r4, #32]
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d67b0:	1941      	adds	r1, r0, r5
        size_t moveLen = selfLen_ - offset - len;
   d67b2:	1a12      	subs	r2, r2, r0
        memcpy(&selfData_[offset], &selfData_[offset + len], moveLen);
   d67b4:	4421      	add	r1, r4
   d67b6:	1b52      	subs	r2, r2, r5
   d67b8:	4420      	add	r0, r4
   d67ba:	f002 fe3d 	bl	d9438 <memcpy>
        selfLen_ -= len;
   d67be:	6a20      	ldr	r0, [r4, #32]
   d67c0:	1b40      	subs	r0, r0, r5
   d67c2:	6220      	str	r0, [r4, #32]
        remove(type);
   d67c4:	4631      	mov	r1, r6
   d67c6:	4620      	mov	r0, r4
   d67c8:	f7ff ffe6 	bl	d6798 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
}
   d67cc:	b002      	add	sp, #8
   d67ce:	bd70      	pop	{r4, r5, r6, pc}

000d67d0 <_ZN8particle21BleCharacteristicImplC1Ev>:
    BleCharacteristicImpl()
   d67d0:	b538      	push	{r3, r4, r5, lr}
              dataReceivedCallback_(nullptr) {
   d67d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d67d6:	2500      	movs	r5, #0
    BleCharacteristicImpl()
   d67d8:	4604      	mov	r4, r0
              dataReceivedCallback_(nullptr) {
   d67da:	8043      	strh	r3, [r0, #2]
   d67dc:	220e      	movs	r2, #14
   d67de:	4629      	mov	r1, r5
   d67e0:	7005      	strb	r5, [r0, #0]
        : value_(0) {
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const T& value) {
    value_ = static_cast<ValueType>(value);
   d67e2:	7105      	strb	r5, [r0, #4]
   d67e4:	3006      	adds	r0, #6
   d67e6:	f002 fe4f 	bl	d9488 <memset>
   d67ea:	f104 0014 	add.w	r0, r4, #20
   d67ee:	f7ff feab 	bl	d6548 <_ZN8particle7BleUuidC1Ev>
   d67f2:	f104 0028 	add.w	r0, r4, #40	; 0x28
   d67f6:	f7ff fea7 	bl	d6548 <_ZN8particle7BleUuidC1Ev>
   d67fa:	4904      	ldr	r1, [pc, #16]	; (d680c <_ZN8particle21BleCharacteristicImplC1Ev+0x3c>)
   d67fc:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d6800:	f7ff fbe4 	bl	d5fcc <_ZN6StringC1EPKc>
    _Function_base() : _M_manager(nullptr) { }
   d6804:	6565      	str	r5, [r4, #84]	; 0x54
    }
   d6806:	4620      	mov	r0, r4
   d6808:	bd38      	pop	{r3, r4, r5, pc}
   d680a:	bf00      	nop
   d680c:	000d99d7 	.word	0x000d99d7

000d6810 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>:
    BlePeerDevice* findPeerDevice(BleConnectionHandle connHandle) {
   d6810:	b510      	push	{r4, lr}
    return data_;
}

template<typename T, typename AllocatorT>
T* spark::Vector<T, AllocatorT>::end() {
    return data_ + size_;
   d6812:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
   d6816:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
        for (auto& peer : peers_) {
   d681a:	4293      	cmp	r3, r2
   d681c:	4618      	mov	r0, r3
   d681e:	d006      	beq.n	d682e <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1e>
            if (peer.impl()->connHandle() == connHandle) {
   d6820:	6804      	ldr	r4, [r0, #0]
   d6822:	8824      	ldrh	r4, [r4, #0]
   d6824:	428c      	cmp	r4, r1
   d6826:	f103 0308 	add.w	r3, r3, #8
   d682a:	d1f6      	bne.n	d681a <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0xa>
    }
   d682c:	bd10      	pop	{r4, pc}
        return nullptr;
   d682e:	2000      	movs	r0, #0
   d6830:	e7fc      	b.n	d682c <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt+0x1c>
	...

000d6834 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>:
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}

BleService::BleService(const BleUuid& uuid)
   d6834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d6838:	2600      	movs	r6, #0
   d683a:	6006      	str	r6, [r0, #0]
   d683c:	4607      	mov	r7, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d683e:	2028      	movs	r0, #40	; 0x28
   d6840:	460c      	mov	r4, r1
   d6842:	f7fd fc28 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d6846:	1e05      	subs	r5, r0, #0
   d6848:	f105 080c 	add.w	r8, r5, #12
   d684c:	d00f      	beq.n	d686e <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x3a>
      : _M_use_count(1), _M_weak_count(1) { }
   d684e:	2301      	movs	r3, #1
   d6850:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d6854:	4b08      	ldr	r3, [pc, #32]	; (d6878 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE+0x44>)
   d6856:	602b      	str	r3, [r5, #0]
              characteristicsDiscovered_(false) {
   d6858:	4640      	mov	r0, r8
   d685a:	f7ff fe75 	bl	d6548 <_ZN8particle7BleUuidC1Ev>
        uuid_ = svcUuid;
   d685e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
              characteristicsDiscovered_(false) {
   d6860:	622e      	str	r6, [r5, #32]
   d6862:	f885 6024 	strb.w	r6, [r5, #36]	; 0x24
        uuid_ = svcUuid;
   d6866:	4646      	mov	r6, r8
   d6868:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d686a:	6823      	ldr	r3, [r4, #0]
   d686c:	6033      	str	r3, [r6, #0]
	  __p = __pi->_M_ptr();
   d686e:	e9c7 8500 	strd	r8, r5, [r7]
        : impl_(std::make_shared<BleServiceImpl>(uuid)) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d6872:	4638      	mov	r0, r7
   d6874:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6878:	000d9b98 	.word	0x000d9b98

000d687c <_ZN8particle13BlePeerDeviceC1Ev>:


/*******************************************************
 * BlePeerDevice class
 */
BlePeerDevice::BlePeerDevice()
   d687c:	b570      	push	{r4, r5, r6, lr}
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d687e:	2500      	movs	r5, #0
   d6880:	6005      	str	r5, [r0, #0]
   d6882:	4606      	mov	r6, r0
   d6884:	2030      	movs	r0, #48	; 0x30
   d6886:	f7fd fc06 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d688a:	4604      	mov	r4, r0
   d688c:	b188      	cbz	r0, d68b2 <_ZN8particle13BlePeerDeviceC1Ev+0x36>
      : _M_use_count(1), _M_weak_count(1) { }
   d688e:	2301      	movs	r3, #1
   d6890:	e9c0 3301 	strd	r3, r3, [r0, #4]
	: _M_impl(__a)
   d6894:	4b09      	ldr	r3, [pc, #36]	; (d68bc <_ZN8particle13BlePeerDeviceC1Ev+0x40>)
   d6896:	6003      	str	r3, [r0, #0]
              servicesDiscovered_(false) {
   d6898:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d689c:	8183      	strh	r3, [r0, #12]
   d689e:	300e      	adds	r0, #14
   d68a0:	f7ff fe48 	bl	d6534 <_ZN8particle10BleAddressC1Ev>
        capacity_(0) {
   d68a4:	e9c4 5506 	strd	r5, r5, [r4, #24]
   d68a8:	e9c4 5508 	strd	r5, r5, [r4, #32]
   d68ac:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
   d68b0:	75a5      	strb	r5, [r4, #22]
	  _M_pi = __pi;
   d68b2:	6074      	str	r4, [r6, #4]
   d68b4:	340c      	adds	r4, #12
	  __p = __pi->_M_ptr();
   d68b6:	6034      	str	r4, [r6, #0]
        : impl_(std::make_shared<BlePeerDeviceImpl>()) {
    if (!impl()) {
        SPARK_ASSERT(false);
    }
}
   d68b8:	4630      	mov	r0, r6
   d68ba:	bd70      	pop	{r4, r5, r6, pc}
   d68bc:	000d9bb4 	.word	0x000d9bb4

000d68c0 <_ZNK8particle13BlePeerDevice7addressEv>:
void BlePeerDevice::bind(const BleAddress& address) const {
    WiringBleLock lk;
    impl()->address() = address;
}

BleAddress BlePeerDevice::address() const {
   d68c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d68c2:	460d      	mov	r5, r1
   d68c4:	4604      	mov	r4, r0
    WiringBleLock lk;
   d68c6:	a801      	add	r0, sp, #4
   d68c8:	f7ff fe03 	bl	d64d2 <_ZN8particle3ble13WiringBleLockC1Ev>
    address_ = addr.address_;
   d68cc:	682a      	ldr	r2, [r5, #0]
   d68ce:	f852 3f02 	ldr.w	r3, [r2, #2]!
   d68d2:	6023      	str	r3, [r4, #0]
   d68d4:	6853      	ldr	r3, [r2, #4]
   d68d6:	6063      	str	r3, [r4, #4]
    WiringBleLock lk;
   d68d8:	a801      	add	r0, sp, #4
   d68da:	f7ff fe02 	bl	d64e2 <_ZN8particle3ble13WiringBleLockD1Ev>
    return impl()->address();
}
   d68de:	4620      	mov	r0, r4
   d68e0:	b003      	add	sp, #12
   d68e2:	bd30      	pop	{r4, r5, pc}

000d68e4 <_ZNK8particle13BlePeerDeviceeqERKS0_>:
bool BlePeerDevice::isValid() const {
    WiringBleLock lk;
    return impl()->connHandle() != BLE_INVALID_CONN_HANDLE;
}

bool BlePeerDevice::operator==(const BlePeerDevice& device) const {
   d68e4:	b530      	push	{r4, r5, lr}
   d68e6:	4605      	mov	r5, r0
   d68e8:	b087      	sub	sp, #28
   d68ea:	460c      	mov	r4, r1
    WiringBleLock lk;
   d68ec:	a801      	add	r0, sp, #4
   d68ee:	f7ff fdf0 	bl	d64d2 <_ZN8particle3ble13WiringBleLockC1Ev>
    if (impl()->connHandle() == device.impl()->connHandle() && address() == device.address()) {
   d68f2:	682a      	ldr	r2, [r5, #0]
   d68f4:	6823      	ldr	r3, [r4, #0]
   d68f6:	8812      	ldrh	r2, [r2, #0]
   d68f8:	881b      	ldrh	r3, [r3, #0]
   d68fa:	429a      	cmp	r2, r3
   d68fc:	d10d      	bne.n	d691a <_ZNK8particle13BlePeerDeviceeqERKS0_+0x36>
   d68fe:	4629      	mov	r1, r5
   d6900:	a802      	add	r0, sp, #8
   d6902:	f7ff ffdd 	bl	d68c0 <_ZNK8particle13BlePeerDevice7addressEv>
   d6906:	4621      	mov	r1, r4
   d6908:	a804      	add	r0, sp, #16
   d690a:	f7ff ffd9 	bl	d68c0 <_ZNK8particle13BlePeerDevice7addressEv>
   d690e:	a904      	add	r1, sp, #16
   d6910:	a802      	add	r0, sp, #8
   d6912:	f7ff fdfb 	bl	d650c <_ZNK8particle10BleAddresseqERKS0_>
   d6916:	4604      	mov	r4, r0
   d6918:	b900      	cbnz	r0, d691c <_ZNK8particle13BlePeerDeviceeqERKS0_+0x38>
        return true;
    }
    return false;
   d691a:	2400      	movs	r4, #0
    WiringBleLock lk;
   d691c:	a801      	add	r0, sp, #4
   d691e:	f7ff fde0 	bl	d64e2 <_ZN8particle3ble13WiringBleLockD1Ev>
}
   d6922:	4620      	mov	r0, r4
   d6924:	b007      	add	sp, #28
   d6926:	bd30      	pop	{r4, r5, pc}

000d6928 <_ZN8particle14BleLocalDeviceC1Ev>:


/*******************************************************
 * BleLocalDevice class
 */
BleLocalDevice::BleLocalDevice()
   d6928:	b510      	push	{r4, lr}
   d692a:	4604      	mov	r4, r0

  /// std::make_unique for single objects
  template<typename _Tp, typename... _Args>
    inline typename _MakeUniq<_Tp>::__single_object
    make_unique(_Args&&... __args)
    { return unique_ptr<_Tp>(new _Tp(std::forward<_Args>(__args)...)); }
   d692c:	2054      	movs	r0, #84	; 0x54
   d692e:	f7fd fbb2 	bl	d4096 <_Znwj>
   d6932:	4601      	mov	r1, r0
   d6934:	b160      	cbz	r0, d6950 <_ZN8particle14BleLocalDeviceC1Ev+0x28>
   d6936:	2300      	movs	r3, #0
   d6938:	e9c0 3300 	strd	r3, r3, [r0]
   d693c:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d6940:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d6944:	e9c0 3306 	strd	r3, r3, [r0, #24]
   d6948:	6203      	str	r3, [r0, #32]
   d694a:	62c3      	str	r3, [r0, #44]	; 0x2c
   d694c:	63c3      	str	r3, [r0, #60]	; 0x3c
   d694e:	64c3      	str	r3, [r0, #76]	; 0x4c
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
   d6950:	6021      	str	r1, [r4, #0]
        : impl_(std::make_unique<BleLocalDeviceImpl>()) {
    if (!impl()) {
   d6952:	b919      	cbnz	r1, d695c <_ZN8particle14BleLocalDeviceC1Ev+0x34>
        SPARK_ASSERT(false);
   d6954:	4a09      	ldr	r2, [pc, #36]	; (d697c <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d6956:	200a      	movs	r0, #10
   d6958:	f7fe ffae 	bl	d58b8 <panic_>
    }
    SPARK_ASSERT(hal_ble_stack_init(nullptr) == SYSTEM_ERROR_NONE);
   d695c:	2000      	movs	r0, #0
   d695e:	f7fe fdc1 	bl	d54e4 <hal_ble_stack_init>
   d6962:	b120      	cbz	r0, d696e <_ZN8particle14BleLocalDeviceC1Ev+0x46>
   d6964:	4a05      	ldr	r2, [pc, #20]	; (d697c <_ZN8particle14BleLocalDeviceC1Ev+0x54>)
   d6966:	2100      	movs	r1, #0
   d6968:	200a      	movs	r0, #10
   d696a:	f7fe ffa5 	bl	d58b8 <panic_>
    hal_ble_set_callback_on_periph_link_events(impl()->onBleLinkEvents, impl(), nullptr);
   d696e:	6821      	ldr	r1, [r4, #0]
   d6970:	4803      	ldr	r0, [pc, #12]	; (d6980 <_ZN8particle14BleLocalDeviceC1Ev+0x58>)
   d6972:	2200      	movs	r2, #0
   d6974:	f7fe fe06 	bl	d5584 <hal_ble_set_callback_on_periph_link_events>
}
   d6978:	4620      	mov	r0, r4
   d697a:	bd10      	pop	{r4, pc}
   d697c:	000d54a5 	.word	0x000d54a5
   d6980:	000d6dfd 	.word	0x000d6dfd

000d6984 <_ZN8particle14BleLocalDevice11getInstanceEv>:

BleLocalDevice& BleLocalDevice::getInstance() {
   d6984:	b510      	push	{r4, lr}
    static BleLocalDevice instance;
   d6986:	4c0b      	ldr	r4, [pc, #44]	; (d69b4 <_ZN8particle14BleLocalDevice11getInstanceEv+0x30>)
   d6988:	7823      	ldrb	r3, [r4, #0]
   d698a:	f3bf 8f5b 	dmb	ish
   d698e:	07db      	lsls	r3, r3, #31
   d6990:	d40e      	bmi.n	d69b0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d6992:	4620      	mov	r0, r4
   d6994:	f7fd fb85 	bl	d40a2 <__cxa_guard_acquire>
   d6998:	b150      	cbz	r0, d69b0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x2c>
   d699a:	4807      	ldr	r0, [pc, #28]	; (d69b8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d699c:	f7ff ffc4 	bl	d6928 <_ZN8particle14BleLocalDeviceC1Ev>
   d69a0:	4620      	mov	r0, r4
   d69a2:	f7fd fb83 	bl	d40ac <__cxa_guard_release>
   d69a6:	4a05      	ldr	r2, [pc, #20]	; (d69bc <_ZN8particle14BleLocalDevice11getInstanceEv+0x38>)
   d69a8:	4905      	ldr	r1, [pc, #20]	; (d69c0 <_ZN8particle14BleLocalDevice11getInstanceEv+0x3c>)
   d69aa:	4803      	ldr	r0, [pc, #12]	; (d69b8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d69ac:	f001 feec 	bl	d8788 <__aeabi_atexit>
    return instance;
}
   d69b0:	4801      	ldr	r0, [pc, #4]	; (d69b8 <_ZN8particle14BleLocalDevice11getInstanceEv+0x34>)
   d69b2:	bd10      	pop	{r4, pc}
   d69b4:	2003e65c 	.word	0x2003e65c
   d69b8:	2003e668 	.word	0x2003e668
   d69bc:	2003e0dc 	.word	0x2003e0dc
   d69c0:	000d6bbd 	.word	0x000d6bbd

000d69c4 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv>:
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d69c4:	b530      	push	{r4, r5, lr}
    switch (event->type) {
   d69c6:	6803      	ldr	r3, [r0, #0]
   d69c8:	3b09      	subs	r3, #9
   d69ca:	2b01      	cmp	r3, #1
void BleCharacteristicImpl::onBleCharEvents(const hal_ble_char_evt_t *event, void* context) {
   d69cc:	b08d      	sub	sp, #52	; 0x34
   d69ce:	4604      	mov	r4, r0
   d69d0:	460d      	mov	r5, r1
    switch (event->type) {
   d69d2:	d811      	bhi.n	d69f8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
            auto peer = BleLocalDevice::getInstance().impl()->findPeerDevice(event->conn_handle);
   d69d4:	f7ff ffd6 	bl	d6984 <_ZN8particle14BleLocalDevice11getInstanceEv>
   d69d8:	88a1      	ldrh	r1, [r4, #4]
   d69da:	6800      	ldr	r0, [r0, #0]
   d69dc:	f7ff ff18 	bl	d6810 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
            if (!peer) {
   d69e0:	4603      	mov	r3, r0
   d69e2:	b958      	cbnz	r0, d69fc <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x38>
                LOG(ERROR, "Peer device is missing!");
   d69e4:	2220      	movs	r2, #32
   d69e6:	e9cd 2004 	strd	r2, r0, [sp, #16]
   d69ea:	4a0b      	ldr	r2, [pc, #44]	; (d6a18 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x54>)
   d69ec:	9200      	str	r2, [sp, #0]
   d69ee:	490b      	ldr	r1, [pc, #44]	; (d6a1c <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x58>)
   d69f0:	aa04      	add	r2, sp, #16
   d69f2:	2032      	movs	r0, #50	; 0x32
   d69f4:	f7fe ff68 	bl	d58c8 <log_message>
}
   d69f8:	b00d      	add	sp, #52	; 0x34
   d69fa:	bd30      	pop	{r4, r5, pc}
            if (impl->dataReceivedCallback_) {
   d69fc:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   d69fe:	2a00      	cmp	r2, #0
   d6a00:	d0fa      	beq.n	d69f8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
                impl->dataReceivedCallback_(event->params.data_written.data, event->params.data_written.len, *peer);
   d6a02:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6a06:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   d6a0a:	e9cd 1203 	strd	r1, r2, [sp, #12]
   d6a0e:	6dac      	ldr	r4, [r5, #88]	; 0x58
   d6a10:	aa04      	add	r2, sp, #16
   d6a12:	a903      	add	r1, sp, #12
   d6a14:	47a0      	blx	r4
}
   d6a16:	e7ef      	b.n	d69f8 <_ZN8particle21BleCharacteristicImpl15onBleCharEventsEPK18hal_ble_char_evt_tPv+0x34>
   d6a18:	000d9aa5 	.word	0x000d9aa5
   d6a1c:	000d9a7e 	.word	0x000d9a7e

000d6a20 <_ZNK8particle14BleLocalDevice2onEv>:
    stopAdvertising(); // BLE HAL will guard that device keeps broadcasting if device is in the Listening mode.
    stopScanning();
    return SYSTEM_ERROR_NONE;
}

int BleLocalDevice::on() const {
   d6a20:	b508      	push	{r3, lr}
    CHECK(hal_ble_stack_init(nullptr));
   d6a22:	2000      	movs	r0, #0
   d6a24:	f7fe fd5e 	bl	d54e4 <hal_ble_stack_init>
    return SYSTEM_ERROR_NONE;
}
   d6a28:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d6a2c:	bd08      	pop	{r3, pc}

000d6a2e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>:
int BleLocalDevice::getAdvertisingParameters(BleAdvertisingParams& params) const {
    return getAdvertisingParameters(&params);
}

int BleLocalDevice::setAdvertisingData(BleAdvertisingData* advertisingData) const {
    if (advertisingData == nullptr) {
   d6a2e:	4608      	mov	r0, r1
   d6a30:	b911      	cbnz	r1, d6a38 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0xa>
        return hal_ble_gap_set_advertising_data(nullptr, 0, nullptr);
   d6a32:	460a      	mov	r2, r1
    } else {
        return hal_ble_gap_set_advertising_data(advertisingData->data(), advertisingData->length(), nullptr);
   d6a34:	f7fe bd66 	b.w	d5504 <hal_ble_gap_set_advertising_data>
   d6a38:	6a09      	ldr	r1, [r1, #32]
   d6a3a:	2200      	movs	r2, #0
   d6a3c:	e7fa      	b.n	d6a34 <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE+0x6>

000d6a3e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>:

int BleLocalDevice::setAdvertisingData(BleAdvertisingData& advertisingData) const {
    return setAdvertisingData(&advertisingData);
}

int BleLocalDevice::setScanResponseData(BleAdvertisingData* scanResponse) const {
   d6a3e:	b507      	push	{r0, r1, r2, lr}
    if (scanResponse == nullptr) {
   d6a40:	4608      	mov	r0, r1
   d6a42:	b929      	cbnz	r1, d6a50 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x12>
        return hal_ble_gap_set_scan_response_data(nullptr, 0, nullptr);
   d6a44:	460a      	mov	r2, r1
    } else {
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
    }
}
   d6a46:	b003      	add	sp, #12
   d6a48:	f85d eb04 	ldr.w	lr, [sp], #4
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d6a4c:	f7fe bd62 	b.w	d5514 <hal_ble_gap_set_scan_response_data>
        scanResponse->remove(BleAdvertisingDataType::FLAGS);
   d6a50:	2101      	movs	r1, #1
   d6a52:	9001      	str	r0, [sp, #4]
   d6a54:	f7ff fea0 	bl	d6798 <_ZN8particle18BleAdvertisingData6removeENS_22BleAdvertisingDataTypeE>
        return hal_ble_gap_set_scan_response_data(scanResponse->data(), scanResponse->length(), nullptr);
   d6a58:	9801      	ldr	r0, [sp, #4]
   d6a5a:	2200      	movs	r2, #0
   d6a5c:	6a01      	ldr	r1, [r0, #32]
   d6a5e:	e7f2      	b.n	d6a46 <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE+0x8>

000d6a60 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_>:

int BleLocalDevice::advertise() const {
    return hal_ble_gap_start_advertising(nullptr);
}

int BleLocalDevice::advertise(BleAdvertisingData* advertisingData, BleAdvertisingData* scanResponse) const {
   d6a60:	b538      	push	{r3, r4, r5, lr}
   d6a62:	4604      	mov	r4, r0
   d6a64:	4615      	mov	r5, r2
    CHECK(setAdvertisingData(advertisingData));
   d6a66:	f7ff ffe2 	bl	d6a2e <_ZNK8particle14BleLocalDevice18setAdvertisingDataEPNS_18BleAdvertisingDataE>
   d6a6a:	2800      	cmp	r0, #0
   d6a6c:	db0a      	blt.n	d6a84 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    CHECK(setScanResponseData(scanResponse));
   d6a6e:	4629      	mov	r1, r5
   d6a70:	4620      	mov	r0, r4
   d6a72:	f7ff ffe4 	bl	d6a3e <_ZNK8particle14BleLocalDevice19setScanResponseDataEPNS_18BleAdvertisingDataE>
   d6a76:	2800      	cmp	r0, #0
   d6a78:	db04      	blt.n	d6a84 <_ZNK8particle14BleLocalDevice9advertiseEPNS_18BleAdvertisingDataES2_+0x24>
    return advertise();
}
   d6a7a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return hal_ble_gap_start_advertising(nullptr);
   d6a7e:	2000      	movs	r0, #0
   d6a80:	f7fe bd50 	b.w	d5524 <hal_ble_gap_start_advertising>
}
   d6a84:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6a88 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   d6a88:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6a8a:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   d6a8c:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d6a8e:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6a90:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   d6a92:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6a94:	f7fd faff 	bl	d4096 <_Znwj>
   d6a98:	b118      	cbz	r0, d6aa2 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x1a>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
   d6a9a:	682b      	ldr	r3, [r5, #0]
   d6a9c:	6003      	str	r3, [r0, #0]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6a9e:	686b      	ldr	r3, [r5, #4]
   d6aa0:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   d6aa2:	4b03      	ldr	r3, [pc, #12]	; (d6ab0 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x28>)
   d6aa4:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6aa6:	4b03      	ldr	r3, [pc, #12]	; (d6ab4 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6aa8:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6aaa:	60a3      	str	r3, [r4, #8]
      }
   d6aac:	4620      	mov	r0, r4
   d6aae:	bd38      	pop	{r3, r4, r5, pc}
   d6ab0:	000d645d 	.word	0x000d645d
   d6ab4:	000d63e1 	.word	0x000d63e1

000d6ab8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>:
      function<_Res(_ArgTypes...)>::
   d6ab8:	b538      	push	{r3, r4, r5, lr}
    _Function_base() : _M_manager(nullptr) { }
   d6aba:	2300      	movs	r3, #0
      function<_Res(_ArgTypes...)>::
   d6abc:	4604      	mov	r4, r0
    _Function_base() : _M_manager(nullptr) { }
   d6abe:	6083      	str	r3, [r0, #8]
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6ac0:	2008      	movs	r0, #8
      function<_Res(_ArgTypes...)>::
   d6ac2:	460d      	mov	r5, r1
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6ac4:	f7fd fae7 	bl	d4096 <_Znwj>
   d6ac8:	b118      	cbz	r0, d6ad2 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x1a>
   d6aca:	682b      	ldr	r3, [r5, #0]
   d6acc:	6003      	str	r3, [r0, #0]
   d6ace:	686b      	ldr	r3, [r5, #4]
   d6ad0:	6043      	str	r3, [r0, #4]
	    _M_invoker = &_My_handler::_M_invoke;
   d6ad2:	4b03      	ldr	r3, [pc, #12]	; (d6ae0 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x28>)
   d6ad4:	60e3      	str	r3, [r4, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6ad6:	4b03      	ldr	r3, [pc, #12]	; (d6ae4 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_+0x2c>)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6ad8:	6020      	str	r0, [r4, #0]
	    _M_manager = &_My_handler::_M_manager;
   d6ada:	60a3      	str	r3, [r4, #8]
      }
   d6adc:	4620      	mov	r0, r4
   d6ade:	bd38      	pop	{r3, r4, r5, pc}
   d6ae0:	000d6475 	.word	0x000d6475
   d6ae4:	000d641f 	.word	0x000d641f

000d6ae8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
      : _M_pi(__r._M_pi)
   d6ae8:	680b      	ldr	r3, [r1, #0]
   d6aea:	6003      	str	r3, [r0, #0]
	if (_M_pi != 0)
   d6aec:	b113      	cbz	r3, d6af4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d6aee:	685a      	ldr	r2, [r3, #4]
   d6af0:	3201      	adds	r2, #1
   d6af2:	605a      	str	r2, [r3, #4]
      }
   d6af4:	4770      	bx	lr

000d6af6 <_ZN8particle17BleCharacteristicC1ERKS0_>:
BleCharacteristic::BleCharacteristic(const BleCharacteristic& characteristic)
   d6af6:	b510      	push	{r4, lr}
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6af8:	f851 3b04 	ldr.w	r3, [r1], #4
   d6afc:	4604      	mov	r4, r0
   d6afe:	f840 3b04 	str.w	r3, [r0], #4
   d6b02:	f7ff fff1 	bl	d6ae8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    if (!impl()) {
   d6b06:	6823      	ldr	r3, [r4, #0]
   d6b08:	b90b      	cbnz	r3, d6b0e <_ZN8particle17BleCharacteristicC1ERKS0_+0x18>
   d6b0a:	f7ff fc61 	bl	d63d0 <_ZN8particle10BleServiceC2ERKNS_7BleUuidE.part.0>
}
   d6b0e:	4620      	mov	r0, r4
   d6b10:	bd10      	pop	{r4, pc}

000d6b12 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d6b12:	b510      	push	{r4, lr}
   d6b14:	f851 3b04 	ldr.w	r3, [r1], #4
   d6b18:	4604      	mov	r4, r0
   d6b1a:	f840 3b04 	str.w	r3, [r0], #4
   d6b1e:	f7ff ffe3 	bl	d6ae8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d6b22:	4620      	mov	r0, r4
   d6b24:	bd10      	pop	{r4, pc}

000d6b26 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>:
   d6b26:	b510      	push	{r4, lr}
   d6b28:	f851 3b04 	ldr.w	r3, [r1], #4
   d6b2c:	4604      	mov	r4, r0
   d6b2e:	f840 3b04 	str.w	r3, [r0], #4
   d6b32:	f7ff ffd9 	bl	d6ae8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
   d6b36:	4620      	mov	r0, r4
   d6b38:	bd10      	pop	{r4, pc}

000d6b3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d6b3a:	b510      	push	{r4, lr}
   d6b3c:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d6b3e:	6800      	ldr	r0, [r0, #0]
   d6b40:	b128      	cbz	r0, d6b4e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d6b42:	6843      	ldr	r3, [r0, #4]
   d6b44:	3b01      	subs	r3, #1
   d6b46:	6043      	str	r3, [r0, #4]
   d6b48:	b90b      	cbnz	r3, d6b4e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d6b4a:	f7ff fbb4 	bl	d62b6 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d6b4e:	4620      	mov	r0, r4
   d6b50:	bd10      	pop	{r4, pc}

000d6b52 <_ZN8particle17BleCharacteristicD1Ev>:
BleCharacteristic::~BleCharacteristic() {
   d6b52:	b510      	push	{r4, lr}
   d6b54:	4604      	mov	r4, r0
      ~__shared_ptr() = default;
   d6b56:	3004      	adds	r0, #4
   d6b58:	f7ff ffef 	bl	d6b3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6b5c:	4620      	mov	r0, r4
   d6b5e:	bd10      	pop	{r4, pc}

000d6b60 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6b60:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6b62:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6b66:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d6b68:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d6b6c:	42ae      	cmp	r6, r5
   d6b6e:	d004      	beq.n	d6b7a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0x1a>
   d6b70:	1d28      	adds	r0, r5, #4
   d6b72:	f7ff ffe2 	bl	d6b3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6b76:	3508      	adds	r5, #8
   d6b78:	e7f8      	b.n	d6b6c <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d6b7a:	6820      	ldr	r0, [r4, #0]
   d6b7c:	f7fe ff82 	bl	d5a84 <free>
}
   d6b80:	4620      	mov	r0, r4
   d6b82:	bd70      	pop	{r4, r5, r6, pc}

000d6b84 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6b84:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6b86:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6b8a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d6b8c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d6b90:	42ae      	cmp	r6, r5
   d6b92:	d004      	beq.n	d6b9e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0x1a>
   d6b94:	1d28      	adds	r0, r5, #4
   d6b96:	f7ff ffd0 	bl	d6b3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6b9a:	3508      	adds	r5, #8
   d6b9c:	e7f8      	b.n	d6b90 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d6b9e:	6820      	ldr	r0, [r4, #0]
   d6ba0:	f7fe ff70 	bl	d5a84 <free>
}
   d6ba4:	4620      	mov	r0, r4
   d6ba6:	bd70      	pop	{r4, r5, r6, pc}

000d6ba8 <_ZNSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      _M_dispose() noexcept
   d6ba8:	b510      	push	{r4, lr}
   d6baa:	4604      	mov	r4, r0
    ~BlePeerDeviceImpl() = default;
   d6bac:	3024      	adds	r0, #36	; 0x24
   d6bae:	f7ff ffe9 	bl	d6b84 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d6bb2:	f104 0018 	add.w	r0, r4, #24
   d6bb6:	f7ff ffd3 	bl	d6b60 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
      }
   d6bba:	bd10      	pop	{r4, pc}

000d6bbc <_ZN8particle14BleLocalDeviceD1Ev>:
        return impl_.get();
    }

private:
    BleLocalDevice();
    ~BleLocalDevice() = default;
   d6bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (__ptr != nullptr)
   d6bbe:	6804      	ldr	r4, [r0, #0]
   d6bc0:	4606      	mov	r6, r0
   d6bc2:	b324      	cbz	r4, d6c0e <_ZN8particle14BleLocalDeviceD1Ev+0x52>
    class function<_Res(_ArgTypes...)>
   d6bc4:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d6bc8:	f7ff fc5a 	bl	d6480 <_ZNSt14_Function_baseD1Ev>
   d6bcc:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d6bd0:	f7ff fc56 	bl	d6480 <_ZNSt14_Function_baseD1Ev>
   d6bd4:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6bd8:	f7ff fc52 	bl	d6480 <_ZNSt14_Function_baseD1Ev>
    destruct(data_, data_ + size_);
   d6bdc:	e9d4 5306 	ldrd	r5, r3, [r4, #24]
   d6be0:	eb05 07c3 	add.w	r7, r5, r3, lsl #3
        for (; p != end; ++p) {
   d6be4:	42af      	cmp	r7, r5
   d6be6:	d004      	beq.n	d6bf2 <_ZN8particle14BleLocalDeviceD1Ev+0x36>
      ~__shared_ptr() = default;
   d6be8:	1d28      	adds	r0, r5, #4
   d6bea:	f7ff ffa6 	bl	d6b3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6bee:	3508      	adds	r5, #8
   d6bf0:	e7f8      	b.n	d6be4 <_ZN8particle14BleLocalDeviceD1Ev+0x28>
    ::free(ptr);
   d6bf2:	69a0      	ldr	r0, [r4, #24]
   d6bf4:	f7fe ff46 	bl	d5a84 <free>
    ~BleLocalDeviceImpl() = default;
   d6bf8:	f104 000c 	add.w	r0, r4, #12
   d6bfc:	f7ff ffc2 	bl	d6b84 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEED1Ev>
   d6c00:	4620      	mov	r0, r4
   d6c02:	f7ff ffad 	bl	d6b60 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEED1Ev>
	delete __ptr;
   d6c06:	2154      	movs	r1, #84	; 0x54
   d6c08:	4620      	mov	r0, r4
   d6c0a:	f001 fdc2 	bl	d8792 <_ZdlPvj>
   d6c0e:	4630      	mov	r0, r6
   d6c10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6c12 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>:
      if (_M_empty())
   d6c12:	6882      	ldr	r2, [r0, #8]
    function<_Res(_ArgTypes...)>::
   d6c14:	b510      	push	{r4, lr}
      if (_M_empty())
   d6c16:	b90a      	cbnz	r2, d6c1c <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_+0xa>
	__throw_bad_function_call();
   d6c18:	f001 fdc1 	bl	d879e <_ZSt25__throw_bad_function_callv>
    }
   d6c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6c20:	68c3      	ldr	r3, [r0, #12]
   d6c22:	4718      	bx	r3

000d6c24 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>:
inline void spark::Vector<T, AllocatorT>::clear() {
   d6c24:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6c26:	e9d0 5300 	ldrd	r5, r3, [r0]
inline void spark::Vector<T, AllocatorT>::clear() {
   d6c2a:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d6c2c:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
        for (; p != end; ++p) {
   d6c30:	42ae      	cmp	r6, r5
   d6c32:	d004      	beq.n	d6c3e <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0x1a>
   d6c34:	1d28      	adds	r0, r5, #4
   d6c36:	f7ff ff80 	bl	d6b3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6c3a:	3508      	adds	r5, #8
   d6c3c:	e7f8      	b.n	d6c30 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv+0xc>
    size_ = 0;
   d6c3e:	2300      	movs	r3, #0
   d6c40:	6063      	str	r3, [r4, #4]
}
   d6c42:	bd70      	pop	{r4, r5, r6, pc}

000d6c44 <_ZNK8particle14BleLocalDevice3offEv>:
int BleLocalDevice::off() const {
   d6c44:	b513      	push	{r0, r1, r4, lr}
   d6c46:	4604      	mov	r4, r0
    CHECK(hal_ble_stack_deinit(nullptr));
   d6c48:	2000      	movs	r0, #0
   d6c4a:	f7fe fc53 	bl	d54f4 <hal_ble_stack_deinit>
   d6c4e:	2800      	cmp	r0, #0
   d6c50:	db0a      	blt.n	d6c68 <_ZNK8particle14BleLocalDevice3offEv+0x24>
        WiringBleLock lk;
   d6c52:	a801      	add	r0, sp, #4
   d6c54:	f7ff fc3d 	bl	d64d2 <_ZN8particle3ble13WiringBleLockC1Ev>
        return peers_;
   d6c58:	6820      	ldr	r0, [r4, #0]
        impl()->peers().clear();
   d6c5a:	3018      	adds	r0, #24
   d6c5c:	f7ff ffe2 	bl	d6c24 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE5clearEv>
        WiringBleLock lk;
   d6c60:	a801      	add	r0, sp, #4
   d6c62:	f7ff fc3e 	bl	d64e2 <_ZN8particle3ble13WiringBleLockD1Ev>
    return SYSTEM_ERROR_NONE;
   d6c66:	2000      	movs	r0, #0
}
   d6c68:	b002      	add	sp, #8
   d6c6a:	bd10      	pop	{r4, pc}

000d6c6c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d6c6c:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d6c6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6c70:	4604      	mov	r4, r0
   d6c72:	460d      	mov	r5, r1
   d6c74:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d6c76:	d914      	bls.n	d6ca2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d6c78:	4290      	cmp	r0, r2
   d6c7a:	d213      	bcs.n	d6ca4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d6c7c:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d6c80:	1a75      	subs	r5, r6, r1
   d6c82:	f1a1 0708 	sub.w	r7, r1, #8
   d6c86:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d6c88:	42b7      	cmp	r7, r6
   d6c8a:	d018      	beq.n	d6cbe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d6c8c:	b11c      	cbz	r4, d6c96 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
       *  @brief  Construct an empty %shared_ptr.
       *  @post   use_count()==0 && get()==0
       */
      constexpr shared_ptr() noexcept : __shared_ptr<_Tp>() { }

      shared_ptr(const shared_ptr&) noexcept = default;
   d6c8e:	4631      	mov	r1, r6
   d6c90:	4620      	mov	r0, r4
   d6c92:	f7ff ff48 	bl	d6b26 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6c96:	1d30      	adds	r0, r6, #4
   d6c98:	f7ff ff4f 	bl	d6b3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d6c9c:	3e08      	subs	r6, #8
   d6c9e:	3c08      	subs	r4, #8
   d6ca0:	e7f2      	b.n	d6c88 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d6ca2:	d00c      	beq.n	d6cbe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d6ca4:	42b5      	cmp	r5, r6
   d6ca6:	d00a      	beq.n	d6cbe <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d6ca8:	b11c      	cbz	r4, d6cb2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d6caa:	4629      	mov	r1, r5
   d6cac:	4620      	mov	r0, r4
   d6cae:	f7ff ff3a 	bl	d6b26 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d6cb2:	1d28      	adds	r0, r5, #4
   d6cb4:	f7ff ff41 	bl	d6b3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d6cb8:	3508      	adds	r5, #8
   d6cba:	3408      	adds	r4, #8
   d6cbc:	e7f2      	b.n	d6ca4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d6cbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6cc0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    T* const p = find(data_, data_ + size_, value);
   d6cc4:	e9d0 4300 	ldrd	r4, r3, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6cc8:	4605      	mov	r5, r0
   d6cca:	4688      	mov	r8, r1
    T* const p = find(data_, data_ + size_, value);
   d6ccc:	eb04 07c3 	add.w	r7, r4, r3, lsl #3
        for (; p != end; ++p) {
   d6cd0:	42a7      	cmp	r7, r4
   d6cd2:	d103      	bne.n	d6cdc <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x1c>
        return false;
   d6cd4:	2600      	movs	r6, #0
}
   d6cd6:	4630      	mov	r0, r6
   d6cd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
            if (*p == value) {
   d6cdc:	4641      	mov	r1, r8
   d6cde:	4620      	mov	r0, r4
   d6ce0:	f7ff fe00 	bl	d68e4 <_ZNK8particle13BlePeerDeviceeqERKS0_>
   d6ce4:	4606      	mov	r6, r0
   d6ce6:	b908      	cbnz	r0, d6cec <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x2c>
        for (; p != end; ++p) {
   d6ce8:	3408      	adds	r4, #8
   d6cea:	e7f1      	b.n	d6cd0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x10>
    if (!p) {
   d6cec:	2c00      	cmp	r4, #0
   d6cee:	d0f1      	beq.n	d6cd4 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x14>
   d6cf0:	1d20      	adds	r0, r4, #4
   d6cf2:	f7ff ff22 	bl	d6b3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    move(p, p + 1, data_ + size_);
   d6cf6:	e9d5 3200 	ldrd	r3, r2, [r5]
   d6cfa:	f104 0108 	add.w	r1, r4, #8
   d6cfe:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6d02:	4620      	mov	r0, r4
   d6d04:	f7ff ffb2 	bl	d6c6c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    --size_;
   d6d08:	686b      	ldr	r3, [r5, #4]
   d6d0a:	3b01      	subs	r3, #1
   d6d0c:	606b      	str	r3, [r5, #4]
    return true;
   d6d0e:	e7e2      	b.n	d6cd6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_+0x16>

000d6d10 <_ZNK8particle14BleLocalDevice10disconnectEv>:

void BleLocalDevice::onPairingEvent(const BleOnPairingEventStdFunction& callback) const {
    impl()->onPairingEvent(callback);
}

int BleLocalDevice::disconnect() const {
   d6d10:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6d12:	4607      	mov	r7, r0
   d6d14:	b08b      	sub	sp, #44	; 0x2c
    WiringBleLock lk;
   d6d16:	4668      	mov	r0, sp
   d6d18:	f7ff fbdb 	bl	d64d2 <_ZN8particle3ble13WiringBleLockC1Ev>
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
   d6d1c:	683b      	ldr	r3, [r7, #0]
    return data_ + size_;
   d6d1e:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
   d6d22:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
    for (auto& p : impl()->peers()) {
   d6d26:	42ac      	cmp	r4, r5
   d6d28:	d02b      	beq.n	d6d82 <_ZNK8particle14BleLocalDevice10disconnectEv+0x72>
        hal_ble_conn_info_t connInfo = {};
   d6d2a:	2224      	movs	r2, #36	; 0x24
   d6d2c:	2100      	movs	r1, #0
   d6d2e:	a801      	add	r0, sp, #4
   d6d30:	f002 fbaa 	bl	d9488 <memset>
        if (hal_ble_gap_get_connection_info(p.impl()->connHandle(), &connInfo, nullptr) != SYSTEM_ERROR_NONE) {
   d6d34:	6823      	ldr	r3, [r4, #0]
   d6d36:	2200      	movs	r2, #0
   d6d38:	8818      	ldrh	r0, [r3, #0]
   d6d3a:	a901      	add	r1, sp, #4
   d6d3c:	f7fe fc0e 	bl	d555c <hal_ble_gap_get_connection_info>
   d6d40:	4606      	mov	r6, r0
   d6d42:	b108      	cbz	r0, d6d48 <_ZNK8particle14BleLocalDevice10disconnectEv+0x38>
    for (auto& p : impl()->peers()) {
   d6d44:	3408      	adds	r4, #8
   d6d46:	e7ee      	b.n	d6d26 <_ZNK8particle14BleLocalDevice10disconnectEv+0x16>
            continue;
        }
        if (connInfo.role == BLE_ROLE_PERIPHERAL) {
   d6d48:	f89d 3008 	ldrb.w	r3, [sp, #8]
   d6d4c:	2b01      	cmp	r3, #1
   d6d4e:	d1f9      	bne.n	d6d44 <_ZNK8particle14BleLocalDevice10disconnectEv+0x34>
            lk.unlock(); // To allow HAL BLE thread to invoke wiring callback
   d6d50:	4668      	mov	r0, sp
   d6d52:	f7ff fad5 	bl	d6300 <_ZN8particle3ble13WiringBleLock6unlockEv.isra.0>
            CHECK(hal_ble_gap_disconnect(p.impl()->connHandle(), nullptr));
   d6d56:	6823      	ldr	r3, [r4, #0]
   d6d58:	4631      	mov	r1, r6
   d6d5a:	8818      	ldrh	r0, [r3, #0]
   d6d5c:	f7fe fbea 	bl	d5534 <hal_ble_gap_disconnect>
   d6d60:	1e05      	subs	r5, r0, #0
   d6d62:	db08      	blt.n	d6d76 <_ZNK8particle14BleLocalDevice10disconnectEv+0x66>
            lk.lock();
   d6d64:	4668      	mov	r0, sp
   d6d66:	f7ff fabf 	bl	d62e8 <_ZN8particle3ble13WiringBleLock4lockEv.isra.0>
        return peers_;
   d6d6a:	6838      	ldr	r0, [r7, #0]
            impl()->peers().removeOne(p);
   d6d6c:	4621      	mov	r1, r4
   d6d6e:	3018      	adds	r0, #24
   d6d70:	f7ff ffa6 	bl	d6cc0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
            return SYSTEM_ERROR_NONE;
   d6d74:	4635      	mov	r5, r6
    WiringBleLock lk;
   d6d76:	4668      	mov	r0, sp
   d6d78:	f7ff fbb3 	bl	d64e2 <_ZN8particle3ble13WiringBleLockD1Ev>
        }
    }
    return SYSTEM_ERROR_NOT_FOUND;
}
   d6d7c:	4628      	mov	r0, r5
   d6d7e:	b00b      	add	sp, #44	; 0x2c
   d6d80:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return SYSTEM_ERROR_NOT_FOUND;
   d6d82:	f06f 05a9 	mvn.w	r5, #169	; 0xa9
   d6d86:	e7f6      	b.n	d6d76 <_ZNK8particle14BleLocalDevice10disconnectEv+0x66>

000d6d88 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d6d88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d6d8a:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d6d8c:	6846      	ldr	r6, [r0, #4]
   d6d8e:	4668      	mov	r0, sp
   d6d90:	f7ff fec9 	bl	d6b26 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6d94:	e9d4 7301 	ldrd	r7, r3, [r4, #4]
   d6d98:	429f      	cmp	r7, r3
   d6d9a:	db12      	blt.n	d6dc2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x3a>
   d6d9c:	3701      	adds	r7, #1
        if (n > 0) {
   d6d9e:	2f00      	cmp	r7, #0
   d6da0:	dd29      	ble.n	d6df6 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x6e>
    return ::malloc(size);
   d6da2:	00f8      	lsls	r0, r7, #3
   d6da4:	f7fe fe66 	bl	d5a74 <malloc>
            if (!d) {
   d6da8:	4605      	mov	r5, r0
   d6daa:	b1f0      	cbz	r0, d6dea <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x62>
            move(d, data_, data_ + size_);
   d6dac:	e9d4 1200 	ldrd	r1, r2, [r4]
   d6db0:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d6db4:	f7ff ff5a 	bl	d6c6c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d6db8:	6820      	ldr	r0, [r4, #0]
   d6dba:	f7fe fe63 	bl	d5a84 <free>
        data_ = d;
   d6dbe:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d6dc0:	60a7      	str	r7, [r4, #8]
    T* const p = data_ + i;
   d6dc2:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6dc4:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d6dc6:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
    move(p + 1, p, data_ + size_);
   d6dca:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d6dce:	4631      	mov	r1, r6
   d6dd0:	f106 0008 	add.w	r0, r6, #8
   d6dd4:	f7ff ff4a 	bl	d6c6c <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d6dd8:	b11e      	cbz	r6, d6de2 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x5a>
   d6dda:	4669      	mov	r1, sp
   d6ddc:	4630      	mov	r0, r6
   d6dde:	f7ff fea2 	bl	d6b26 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    ++size_;
   d6de2:	6863      	ldr	r3, [r4, #4]
   d6de4:	3301      	adds	r3, #1
   d6de6:	6063      	str	r3, [r4, #4]
    return true;
   d6de8:	2501      	movs	r5, #1
   d6dea:	a801      	add	r0, sp, #4
   d6dec:	f7ff fea5 	bl	d6b3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6df0:	4628      	mov	r0, r5
   d6df2:	b003      	add	sp, #12
   d6df4:	bdf0      	pop	{r4, r5, r6, r7, pc}
        T* d = nullptr;
   d6df6:	2500      	movs	r5, #0
   d6df8:	e7de      	b.n	d6db8 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_+0x30>
	...

000d6dfc <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv>:
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d6dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6e00:	4605      	mov	r5, r0
   d6e02:	b08e      	sub	sp, #56	; 0x38
        WiringBleLock lk;
   d6e04:	a803      	add	r0, sp, #12
    static void onBleLinkEvents(const hal_ble_link_evt_t* event, void* context) {
   d6e06:	460c      	mov	r4, r1
        WiringBleLock lk;
   d6e08:	f7ff fb63 	bl	d64d2 <_ZN8particle3ble13WiringBleLockC1Ev>
        switch (event->type) {
   d6e0c:	682e      	ldr	r6, [r5, #0]
   d6e0e:	2e04      	cmp	r6, #4
   d6e10:	d06b      	beq.n	d6eea <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xee>
   d6e12:	d807      	bhi.n	d6e24 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x28>
   d6e14:	2e03      	cmp	r6, #3
   d6e16:	d028      	beq.n	d6e6a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x6e>
        WiringBleLock lk;
   d6e18:	a803      	add	r0, sp, #12
   d6e1a:	f7ff fb62 	bl	d64e2 <_ZN8particle3ble13WiringBleLockD1Ev>
    }
   d6e1e:	b00e      	add	sp, #56	; 0x38
   d6e20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        switch (event->type) {
   d6e24:	f1a6 030c 	sub.w	r3, r6, #12
   d6e28:	2b03      	cmp	r3, #3
   d6e2a:	d8f5      	bhi.n	d6e18 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d6e2c:	89a9      	ldrh	r1, [r5, #12]
   d6e2e:	4620      	mov	r0, r4
   d6e30:	f7ff fcee 	bl	d6810 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d6e34:	4607      	mov	r7, r0
   d6e36:	2800      	cmp	r0, #0
   d6e38:	d0ee      	beq.n	d6e18 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                    if (impl->pairingEventCallback_) {
   d6e3a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
   d6e3c:	2b00      	cmp	r3, #0
   d6e3e:	d0eb      	beq.n	d6e18 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        BlePairingEvent pairingEvent = {
   d6e40:	2210      	movs	r2, #16
   d6e42:	2100      	movs	r1, #0
   d6e44:	a807      	add	r0, sp, #28
   d6e46:	f002 fb1f 	bl	d9488 <memset>
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d6e4a:	2e0d      	cmp	r6, #13
                        };
   d6e4c:	9706      	str	r7, [sp, #24]
                            .type = static_cast<BlePairingEventType>(event->type)
   d6e4e:	f88d 601c 	strb.w	r6, [sp, #28]
                        if (event->type == BLE_EVT_PAIRING_PASSKEY_DISPLAY) {
   d6e52:	f040 8092 	bne.w	d6f7a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x17e>
                            pairingEvent.payload.passkey = event->params.passkey_display.passkey;
   d6e56:	686b      	ldr	r3, [r5, #4]
   d6e58:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payloadLen = BLE_PAIRING_PASSKEY_LEN;
   d6e5a:	2306      	movs	r3, #6
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d6e5c:	9308      	str	r3, [sp, #32]
   d6e5e:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d6e60:	a906      	add	r1, sp, #24
   d6e62:	f104 0044 	add.w	r0, r4, #68	; 0x44
   d6e66:	4798      	blx	r3
   d6e68:	e7d6      	b.n	d6e18 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                BlePeerDevice peer;
   d6e6a:	a804      	add	r0, sp, #16
   d6e6c:	f7ff fd06 	bl	d687c <_ZN8particle13BlePeerDeviceC1Ev>
                peer.impl()->connHandle() = event->conn_handle;
   d6e70:	9b04      	ldr	r3, [sp, #16]
   d6e72:	89aa      	ldrh	r2, [r5, #12]
   d6e74:	801a      	strh	r2, [r3, #0]
                peer.impl()->address() = event->params.connected.info->address;
   d6e76:	6869      	ldr	r1, [r5, #4]
   d6e78:	9804      	ldr	r0, [sp, #16]
   d6e7a:	3108      	adds	r1, #8
   d6e7c:	3002      	adds	r0, #2
   d6e7e:	f7ff fb38 	bl	d64f2 <_ZN8particle10BleAddressaSERK14hal_ble_addr_t>
   d6e82:	a904      	add	r1, sp, #16
   d6e84:	a806      	add	r0, sp, #24
   d6e86:	f7ff fe4e 	bl	d6b26 <_ZNSt12__shared_ptrIN8particle17BlePeerDeviceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
                if (!impl->peers_.append(peer)) {
   d6e8a:	a906      	add	r1, sp, #24
   d6e8c:	f104 0018 	add.w	r0, r4, #24
   d6e90:	f7ff ff7a 	bl	d6d88 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE6appendES2_>
   d6e94:	4605      	mov	r5, r0
   d6e96:	a807      	add	r0, sp, #28
   d6e98:	f7ff fe4f 	bl	d6b3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6e9c:	2320      	movs	r3, #32
                    LOG(ERROR, "Failed to append peer Central device.");
   d6e9e:	9306      	str	r3, [sp, #24]
                if (!impl->peers_.append(peer)) {
   d6ea0:	b98d      	cbnz	r5, d6ec6 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xca>
                    LOG(ERROR, "Failed to append peer Central device.");
   d6ea2:	4b3e      	ldr	r3, [pc, #248]	; (d6f9c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a0>)
   d6ea4:	493e      	ldr	r1, [pc, #248]	; (d6fa0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d6ea6:	9300      	str	r3, [sp, #0]
   d6ea8:	2032      	movs	r0, #50	; 0x32
   d6eaa:	462b      	mov	r3, r5
   d6eac:	aa06      	add	r2, sp, #24
   d6eae:	9507      	str	r5, [sp, #28]
   d6eb0:	f7fe fd0a 	bl	d58c8 <log_message>
                    hal_ble_gap_disconnect(peer.impl()->connHandle(), nullptr);
   d6eb4:	9b04      	ldr	r3, [sp, #16]
   d6eb6:	4629      	mov	r1, r5
   d6eb8:	8818      	ldrh	r0, [r3, #0]
   d6eba:	f7fe fb3b 	bl	d5534 <hal_ble_gap_disconnect>
   d6ebe:	a805      	add	r0, sp, #20
   d6ec0:	f7ff fe3b 	bl	d6b3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6ec4:	e7a8      	b.n	d6e18 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                LOG(TRACE, "Connected by Central device.");
   d6ec6:	4a37      	ldr	r2, [pc, #220]	; (d6fa4 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a8>)
   d6ec8:	9200      	str	r2, [sp, #0]
   d6eca:	2300      	movs	r3, #0
   d6ecc:	4934      	ldr	r1, [pc, #208]	; (d6fa0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d6ece:	9307      	str	r3, [sp, #28]
   d6ed0:	aa06      	add	r2, sp, #24
   d6ed2:	2001      	movs	r0, #1
   d6ed4:	f7fe fcf8 	bl	d58c8 <log_message>
                if (impl->connectedCallback_) {
   d6ed8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   d6eda:	2b00      	cmp	r3, #0
   d6edc:	d0ef      	beq.n	d6ebe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                    impl->connectedCallback_(peer);
   d6ede:	a904      	add	r1, sp, #16
   d6ee0:	f104 0024 	add.w	r0, r4, #36	; 0x24
   d6ee4:	f7ff fe95 	bl	d6c12 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
   d6ee8:	e7e9      	b.n	d6ebe <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0xc2>
                BlePeerDevice* peer = impl->findPeerDevice(event->conn_handle);
   d6eea:	89a9      	ldrh	r1, [r5, #12]
   d6eec:	4620      	mov	r0, r4
   d6eee:	f7ff fc8f 	bl	d6810 <_ZN8particle18BleLocalDeviceImpl14findPeerDeviceEt>
                if (peer) {
   d6ef2:	4606      	mov	r6, r0
   d6ef4:	2800      	cmp	r0, #0
   d6ef6:	d08f      	beq.n	d6e18 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
        return impl_.get();
   d6ef8:	6805      	ldr	r5, [r0, #0]
    return data_ + size_;
   d6efa:	e9d5 3106 	ldrd	r3, r1, [r5, #24]
        connHandle_ = BLE_INVALID_CONN_HANDLE;
   d6efe:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d6f02:	802a      	strh	r2, [r5, #0]
   d6f04:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
        for (auto& characteristic : characteristics()) {
   d6f08:	4299      	cmp	r1, r3
   d6f0a:	d003      	beq.n	d6f14 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x118>
        return impl_.get();
   d6f0c:	f853 0b08 	ldr.w	r0, [r3], #8
            characteristic.impl()->connHandle() = BLE_INVALID_CONN_HANDLE;
   d6f10:	8042      	strh	r2, [r0, #2]
        for (auto& characteristic : characteristics()) {
   d6f12:	e7f9      	b.n	d6f08 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x10c>
    destruct(data_, data_ + size_);
   d6f14:	e9d5 7303 	ldrd	r7, r3, [r5, #12]
   d6f18:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d6f1c:	45b8      	cmp	r8, r7
   d6f1e:	d004      	beq.n	d6f2a <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x12e>
   d6f20:	1d38      	adds	r0, r7, #4
   d6f22:	f7ff fe0a 	bl	d6b3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6f26:	3708      	adds	r7, #8
   d6f28:	e7f8      	b.n	d6f1c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x120>
    size_ = 0;
   d6f2a:	2300      	movs	r3, #0
   d6f2c:	612b      	str	r3, [r5, #16]
    destruct(data_, data_ + size_);
   d6f2e:	e9d5 7306 	ldrd	r7, r3, [r5, #24]
   d6f32:	eb07 08c3 	add.w	r8, r7, r3, lsl #3
        for (; p != end; ++p) {
   d6f36:	45b8      	cmp	r8, r7
   d6f38:	d004      	beq.n	d6f44 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x148>
   d6f3a:	1d38      	adds	r0, r7, #4
   d6f3c:	f7ff fdfd 	bl	d6b3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6f40:	3708      	adds	r7, #8
   d6f42:	e7f8      	b.n	d6f36 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x13a>
    size_ = 0;
   d6f44:	2300      	movs	r3, #0
   d6f46:	61eb      	str	r3, [r5, #28]
        servicesDiscovered_ = false;
   d6f48:	72ab      	strb	r3, [r5, #10]
                    if (impl->disconnectedCallback_) {
   d6f4a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d6f4c:	b123      	cbz	r3, d6f58 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x15c>
                        impl->disconnectedCallback_(*peer);
   d6f4e:	4631      	mov	r1, r6
   d6f50:	f104 0034 	add.w	r0, r4, #52	; 0x34
   d6f54:	f7ff fe5d 	bl	d6c12 <_ZNKSt8functionIFvRKN8particle13BlePeerDeviceEEEclES3_>
                    LOG(TRACE, "Disconnected by remote device.");
   d6f58:	2300      	movs	r3, #0
   d6f5a:	2220      	movs	r2, #32
   d6f5c:	e9cd 2306 	strd	r2, r3, [sp, #24]
   d6f60:	4a11      	ldr	r2, [pc, #68]	; (d6fa8 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1ac>)
   d6f62:	9200      	str	r2, [sp, #0]
   d6f64:	490e      	ldr	r1, [pc, #56]	; (d6fa0 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1a4>)
   d6f66:	aa06      	add	r2, sp, #24
   d6f68:	2001      	movs	r0, #1
   d6f6a:	f7fe fcad 	bl	d58c8 <log_message>
                    impl->peers_.removeOne(*peer);
   d6f6e:	4631      	mov	r1, r6
   d6f70:	f104 0018 	add.w	r0, r4, #24
   d6f74:	f7ff fea4 	bl	d6cc0 <_ZN5spark6VectorIN8particle13BlePeerDeviceENS_16DefaultAllocatorEE9removeOneERKS2_>
   d6f78:	e74e      	b.n	d6e18 <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x1c>
                        } else if (event->type == BLE_EVT_PAIRING_STATUS_UPDATED) {
   d6f7a:	2e0f      	cmp	r6, #15
   d6f7c:	f47f af6f 	bne.w	d6e5e <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x62>
                            pairingEvent.payload.status.status = event->params.pairing_status.status;
   d6f80:	686b      	ldr	r3, [r5, #4]
   d6f82:	9309      	str	r3, [sp, #36]	; 0x24
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d6f84:	7a2b      	ldrb	r3, [r5, #8]
   d6f86:	f003 0201 	and.w	r2, r3, #1
                            pairingEvent.payload.status.lesc = event->params.pairing_status.lesc;
   d6f8a:	f3c3 0340 	ubfx	r3, r3, #1, #1
   d6f8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
                            pairingEvent.payload.status.bonded = event->params.pairing_status.bonded;
   d6f92:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
                            pairingEvent.payloadLen = sizeof(BlePairingStatus);
   d6f96:	2308      	movs	r3, #8
   d6f98:	e760      	b.n	d6e5c <_ZN8particle18BleLocalDeviceImpl15onBleLinkEventsEPK18hal_ble_link_evt_tPv+0x60>
   d6f9a:	bf00      	nop
   d6f9c:	000d9abd 	.word	0x000d9abd
   d6fa0:	000d9a7e 	.word	0x000d9a7e
   d6fa4:	000d9ae3 	.word	0x000d9ae3
   d6fa8:	000d9b00 	.word	0x000d9b00

000d6fac <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>:
      operator=(__shared_ptr&& __r) noexcept
   d6fac:	b513      	push	{r0, r1, r4, lr}
	__r._M_pi = _M_pi;
   d6fae:	2300      	movs	r3, #0
      operator=(__shared_ptr&& __r) noexcept
   d6fb0:	4604      	mov	r4, r0
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6fb2:	e9d1 0200 	ldrd	r0, r2, [r1]
	__r._M_ptr = 0;
   d6fb6:	e9c1 3300 	strd	r3, r3, [r1]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6fba:	6823      	ldr	r3, [r4, #0]
   d6fbc:	9300      	str	r3, [sp, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6fbe:	6020      	str	r0, [r4, #0]
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d6fc0:	6863      	ldr	r3, [r4, #4]
	__r._M_pi = _M_pi;
   d6fc2:	6062      	str	r2, [r4, #4]
      ~__shared_ptr() = default;
   d6fc4:	a801      	add	r0, sp, #4
	_M_pi = __tmp;
   d6fc6:	9301      	str	r3, [sp, #4]
      ~__shared_ptr() = default;
   d6fc8:	f7ff fdb7 	bl	d6b3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
   d6fcc:	4620      	mov	r0, r4
   d6fce:	b002      	add	sp, #8
   d6fd0:	bd10      	pop	{r4, pc}

000d6fd2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    swap(_Tp& __a, _Tp& __b)
   d6fd2:	b513      	push	{r0, r1, r4, lr}
   d6fd4:	460b      	mov	r3, r1
   d6fd6:	4602      	mov	r2, r0
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6fd8:	e9d0 0100 	ldrd	r0, r1, [r0]
   d6fdc:	466c      	mov	r4, sp
   d6fde:	e884 0003 	stmia.w	r4, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d6fe2:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6fe6:	e882 0003 	stmia.w	r2, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6fea:	e894 0003 	ldmia.w	r4, {r0, r1}
   d6fee:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d6ff2:	b002      	add	sp, #8
   d6ff4:	bd10      	pop	{r4, pc}

000d6ff6 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>:
      void swap(function& __x) noexcept
   d6ff6:	b538      	push	{r3, r4, r5, lr}
   d6ff8:	4605      	mov	r5, r0
   d6ffa:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   d6ffc:	f7ff ffe9 	bl	d6fd2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7000:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d7002:	68a2      	ldr	r2, [r4, #8]
   d7004:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7006:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7008:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d700a:	68e2      	ldr	r2, [r4, #12]
   d700c:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d700e:	60e3      	str	r3, [r4, #12]
      }
   d7010:	bd38      	pop	{r3, r4, r5, pc}

000d7012 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>:
      operator=(function&& __x) noexcept
   d7012:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _Function_base() : _M_manager(nullptr) { }
   d7014:	2300      	movs	r3, #0
      operator=(function&& __x) noexcept
   d7016:	4604      	mov	r4, r0
   d7018:	4608      	mov	r0, r1
	__x.swap(*this);
   d701a:	4669      	mov	r1, sp
    _Function_base() : _M_manager(nullptr) { }
   d701c:	9302      	str	r3, [sp, #8]
	__x.swap(*this);
   d701e:	f7ff ffea 	bl	d6ff6 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
	function(std::move(__x)).swap(*this);
   d7022:	4621      	mov	r1, r4
   d7024:	4668      	mov	r0, sp
   d7026:	f7ff ffe6 	bl	d6ff6 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEE4swapERS7_>
    class function<_Res(_ArgTypes...)>
   d702a:	4668      	mov	r0, sp
   d702c:	f7ff fa28 	bl	d6480 <_ZNSt14_Function_baseD1Ev>
      }
   d7030:	4620      	mov	r0, r4
   d7032:	b004      	add	sp, #16
   d7034:	bd10      	pop	{r4, pc}

000d7036 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>:
    BleCharacteristicImpl(EnumFlags<BleCharacteristicProperty> properties, const char* desc, BleOnDataReceivedCallback callback, void* context)
   d7036:	b570      	push	{r4, r5, r6, lr}
   d7038:	460e      	mov	r6, r1
   d703a:	b088      	sub	sp, #32
   d703c:	4604      	mov	r4, r0
   d703e:	9201      	str	r2, [sp, #4]
   d7040:	461d      	mov	r5, r3
            : BleCharacteristicImpl() {
   d7042:	f7ff fbc5 	bl	d67d0 <_ZN8particle21BleCharacteristicImplC1Ev>
        properties_ = properties;
   d7046:	7833      	ldrb	r3, [r6, #0]
        description_ = desc;
   d7048:	9901      	ldr	r1, [sp, #4]
        properties_ = properties;
   d704a:	7123      	strb	r3, [r4, #4]
        description_ = desc;
   d704c:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   d7050:	f7ff f804 	bl	d605c <_ZN6StringaSEPKc>
        dataReceivedCallback_ = callback ? std::bind(callback, _1, _2, _3, context) : (BleOnDataReceivedStdFunction)nullptr;
   d7054:	f104 064c 	add.w	r6, r4, #76	; 0x4c
   d7058:	b185      	cbz	r5, d707c <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x46>
   d705a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d705c:	9502      	str	r5, [sp, #8]
   d705e:	a902      	add	r1, sp, #8
   d7060:	a804      	add	r0, sp, #16
   d7062:	9303      	str	r3, [sp, #12]
   d7064:	f7ff fd10 	bl	d6a88 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS1_jS5_PvESt12_PlaceholderILi1EESD_ILi2EESD_ILi3EESA_EEvvEET_>
   d7068:	a904      	add	r1, sp, #16
   d706a:	4630      	mov	r0, r6
   d706c:	f7ff ffd1 	bl	d7012 <_ZNSt8functionIFvPKhjRKN8particle13BlePeerDeviceEEEaSEOS7_>
    class function<_Res(_ArgTypes...)>
   d7070:	a804      	add	r0, sp, #16
   d7072:	f7ff fa05 	bl	d6480 <_ZNSt14_Function_baseD1Ev>
    }
   d7076:	4620      	mov	r0, r4
   d7078:	b008      	add	sp, #32
   d707a:	bd70      	pop	{r4, r5, r6, pc}
    _Function_base() : _M_manager(nullptr) { }
   d707c:	9506      	str	r5, [sp, #24]
      : _Function_base() { }
   d707e:	e7f3      	b.n	d7068 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_+0x32>

000d7080 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_>:
void BleCharacteristic::construct(const char* desc, EnumFlags<BleCharacteristicProperty> properties, BleUuid& charUuid, BleUuid& svcUuid, BleOnDataReceivedCallback callback, void* context) {
   d7080:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7084:	b086      	sub	sp, #24
   d7086:	4607      	mov	r7, r0
   d7088:	461d      	mov	r5, r3
   d708a:	2068      	movs	r0, #104	; 0x68
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d708c:	2300      	movs	r3, #0
   d708e:	4689      	mov	r9, r1
   d7090:	4692      	mov	sl, r2
   d7092:	9304      	str	r3, [sp, #16]
   d7094:	f7fc ffff 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d7098:	1e06      	subs	r6, r0, #0
   d709a:	f106 080c 	add.w	r8, r6, #12
   d709e:	d01d      	beq.n	d70dc <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x5c>
      : _M_use_count(1), _M_weak_count(1) { }
   d70a0:	2301      	movs	r3, #1
	: _M_impl(__a)
   d70a2:	4634      	mov	r4, r6
      : _M_use_count(1), _M_weak_count(1) { }
   d70a4:	e9c6 3301 	strd	r3, r3, [r6, #4]
	: _M_impl(__a)
   d70a8:	4b15      	ldr	r3, [pc, #84]	; (d7100 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x80>)
   d70aa:	f844 3b20 	str.w	r3, [r4], #32
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
   d70ae:	f89a 3000 	ldrb.w	r3, [sl]
}

template<typename T>
inline particle::EnumFlags<T, typename std::enable_if_t<std::is_enum<T>::value>>::EnumFlags(const EnumFlags<T>& flags) {
    value_ = flags.value_;
   d70b2:	f88d 300c 	strb.w	r3, [sp, #12]
            : BleCharacteristicImpl(properties, desc, callback, context) {
   d70b6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   d70b8:	9300      	str	r3, [sp, #0]
   d70ba:	464a      	mov	r2, r9
   d70bc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   d70be:	a903      	add	r1, sp, #12
   d70c0:	4640      	mov	r0, r8
   d70c2:	f7ff ffb8 	bl	d7036 <_ZN8particle21BleCharacteristicImplC1ENS_9EnumFlagsINS_25BleCharacteristicPropertyEvEEPKcPFvPKhjRKNS_13BlePeerDeviceEPvESB_>
        charUuid_ = charUuid;
   d70c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d70c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d70ca:	682b      	ldr	r3, [r5, #0]
        svcUuid_ = svcUuid;
   d70cc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
        charUuid_ = charUuid;
   d70ce:	6023      	str	r3, [r4, #0]
        svcUuid_ = svcUuid;
   d70d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d70d2:	f106 0434 	add.w	r4, r6, #52	; 0x34
   d70d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d70d8:	682b      	ldr	r3, [r5, #0]
   d70da:	6023      	str	r3, [r4, #0]
#endif

      shared_ptr&
      operator=(shared_ptr&& __r) noexcept
      {
	this->__shared_ptr<_Tp>::operator=(std::move(__r));
   d70dc:	a904      	add	r1, sp, #16
   d70de:	4638      	mov	r0, r7
	  __p = __pi->_M_ptr();
   d70e0:	e9cd 8604 	strd	r8, r6, [sp, #16]
   d70e4:	f7ff ff62 	bl	d6fac <_ZNSt12__shared_ptrIN8particle21BleCharacteristicImplELN9__gnu_cxx12_Lock_policyE0EEaSEOS4_>
      ~__shared_ptr() = default;
   d70e8:	a805      	add	r0, sp, #20
   d70ea:	f7ff fd26 	bl	d6b3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    if (!impl()) {
   d70ee:	6839      	ldr	r1, [r7, #0]
   d70f0:	b919      	cbnz	r1, d70fa <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x7a>
        SPARK_ASSERT(false);
   d70f2:	4a04      	ldr	r2, [pc, #16]	; (d7104 <_ZN8particle17BleCharacteristic9constructEPKcNS_9EnumFlagsINS_25BleCharacteristicPropertyEvEERNS_7BleUuidES7_PFvPKhjRKNS_13BlePeerDeviceEPvESD_+0x84>)
   d70f4:	200a      	movs	r0, #10
   d70f6:	f7fe fbdf 	bl	d58b8 <panic_>
}
   d70fa:	b006      	add	sp, #24
   d70fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d7100:	000d9b7c 	.word	0x000d9b7c
   d7104:	000d54a5 	.word	0x000d54a5

000d7108 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>:
      void swap(function& __x) noexcept
   d7108:	b538      	push	{r3, r4, r5, lr}
   d710a:	4605      	mov	r5, r0
   d710c:	460c      	mov	r4, r1
	std::swap(_M_functor, __x._M_functor);
   d710e:	f7ff ff60 	bl	d6fd2 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7112:	68ab      	ldr	r3, [r5, #8]
      __a = _GLIBCXX_MOVE(__b);
   d7114:	68a2      	ldr	r2, [r4, #8]
   d7116:	60aa      	str	r2, [r5, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d7118:	60a3      	str	r3, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d711a:	68eb      	ldr	r3, [r5, #12]
      __a = _GLIBCXX_MOVE(__b);
   d711c:	68e2      	ldr	r2, [r4, #12]
   d711e:	60ea      	str	r2, [r5, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d7120:	60e3      	str	r3, [r4, #12]
      }
   d7122:	bd38      	pop	{r3, r4, r5, pc}

000d7124 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEaSEOS5_>:
      operator=(function&& __x) noexcept
   d7124:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    _Function_base() : _M_manager(nullptr) { }
   d7126:	2300      	movs	r3, #0
      operator=(function&& __x) noexcept
   d7128:	4604      	mov	r4, r0
   d712a:	4608      	mov	r0, r1
	__x.swap(*this);
   d712c:	4669      	mov	r1, sp
    _Function_base() : _M_manager(nullptr) { }
   d712e:	9302      	str	r3, [sp, #8]
	__x.swap(*this);
   d7130:	f7ff ffea 	bl	d7108 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
	function(std::move(__x)).swap(*this);
   d7134:	4621      	mov	r1, r4
   d7136:	4668      	mov	r0, sp
   d7138:	f7ff ffe6 	bl	d7108 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEE4swapERS5_>
    class function<_Res(_ArgTypes...)>
   d713c:	4668      	mov	r0, sp
   d713e:	f7ff f99f 	bl	d6480 <_ZNSt14_Function_baseD1Ev>
      }
   d7142:	4620      	mov	r0, r4
   d7144:	b004      	add	sp, #16
   d7146:	bd10      	pop	{r4, pc}

000d7148 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   d7148:	b510      	push	{r4, lr}
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   d714a:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onConnected(BleOnConnectedCallback callback, void* context) const {
   d714c:	b086      	sub	sp, #24
        connectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnConnectedStdFunction)nullptr;
   d714e:	3424      	adds	r4, #36	; 0x24
   d7150:	b171      	cbz	r1, d7170 <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x28>
   d7152:	e9cd 1200 	strd	r1, r2, [sp]
   d7156:	a802      	add	r0, sp, #8
   d7158:	4669      	mov	r1, sp
   d715a:	f7ff fcad 	bl	d6ab8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
   d715e:	a902      	add	r1, sp, #8
   d7160:	4620      	mov	r0, r4
   d7162:	f7ff ffdf 	bl	d7124 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEaSEOS5_>
    class function<_Res(_ArgTypes...)>
   d7166:	a802      	add	r0, sp, #8
   d7168:	f7ff f98a 	bl	d6480 <_ZNSt14_Function_baseD1Ev>
}
   d716c:	b006      	add	sp, #24
   d716e:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   d7170:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   d7172:	e7f4      	b.n	d715e <_ZNK8particle14BleLocalDevice11onConnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000d7174 <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_>:
void BleLocalDevice::onDisconnected(BleOnDisconnectedCallback callback, void* context) const {
   d7174:	b510      	push	{r4, lr}
        disconnectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnDisconnectedStdFunction)nullptr;
   d7176:	6804      	ldr	r4, [r0, #0]
void BleLocalDevice::onDisconnected(BleOnDisconnectedCallback callback, void* context) const {
   d7178:	b086      	sub	sp, #24
        disconnectedCallback_ = callback ? std::bind(callback, _1, context) : (BleOnDisconnectedStdFunction)nullptr;
   d717a:	3434      	adds	r4, #52	; 0x34
   d717c:	b171      	cbz	r1, d719c <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x28>
   d717e:	e9cd 1200 	strd	r1, r2, [sp]
   d7182:	a802      	add	r0, sp, #8
   d7184:	4669      	mov	r1, sp
   d7186:	f7ff fc97 	bl	d6ab8 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEC1ISt5_BindIFPFvS3_PvESt12_PlaceholderILi1EES8_EEvvEET_>
   d718a:	a902      	add	r1, sp, #8
   d718c:	4620      	mov	r0, r4
   d718e:	f7ff ffc9 	bl	d7124 <_ZNSt8functionIFvRKN8particle13BlePeerDeviceEEEaSEOS5_>
    class function<_Res(_ArgTypes...)>
   d7192:	a802      	add	r0, sp, #8
   d7194:	f7ff f974 	bl	d6480 <_ZNSt14_Function_baseD1Ev>
}
   d7198:	b006      	add	sp, #24
   d719a:	bd10      	pop	{r4, pc}
    _Function_base() : _M_manager(nullptr) { }
   d719c:	9104      	str	r1, [sp, #16]
      : _Function_base() { }
   d719e:	e7f4      	b.n	d718a <_ZNK8particle14BleLocalDevice14onDisconnectedEPFvRKNS_13BlePeerDeviceEPvES4_+0x16>

000d71a0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d71a0:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d71a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d71a4:	4604      	mov	r4, r0
   d71a6:	460d      	mov	r5, r1
   d71a8:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d71aa:	d914      	bls.n	d71d6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d71ac:	4290      	cmp	r0, r2
   d71ae:	d213      	bcs.n	d71d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d71b0:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d71b4:	1a75      	subs	r5, r6, r1
   d71b6:	f1a1 0708 	sub.w	r7, r1, #8
   d71ba:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d71bc:	42b7      	cmp	r7, r6
   d71be:	d018      	beq.n	d71f2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d71c0:	b11c      	cbz	r4, d71ca <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
      shared_ptr(const shared_ptr&) noexcept = default;
   d71c2:	4631      	mov	r1, r6
   d71c4:	4620      	mov	r0, r4
   d71c6:	f7ff fca4 	bl	d6b12 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d71ca:	1d30      	adds	r0, r6, #4
   d71cc:	f7ff fcb5 	bl	d6b3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d71d0:	3e08      	subs	r6, #8
   d71d2:	3c08      	subs	r4, #8
   d71d4:	e7f2      	b.n	d71bc <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d71d6:	d00c      	beq.n	d71f2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d71d8:	42b5      	cmp	r5, r6
   d71da:	d00a      	beq.n	d71f2 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d71dc:	b11c      	cbz	r4, d71e6 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d71de:	4629      	mov	r1, r5
   d71e0:	4620      	mov	r0, r4
   d71e2:	f7ff fc96 	bl	d6b12 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d71e6:	1d28      	adds	r0, r5, #4
   d71e8:	f7ff fca7 	bl	d6b3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d71ec:	3508      	adds	r5, #8
   d71ee:	3408      	adds	r4, #8
   d71f0:	e7f2      	b.n	d71d8 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d71f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d71f4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d71f4:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d71f6:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d71f8:	4605      	mov	r5, r0
        if (n > 0) {
   d71fa:	dd11      	ble.n	d7220 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d71fc:	00f0      	lsls	r0, r6, #3
   d71fe:	f7fe fc39 	bl	d5a74 <malloc>
            if (!d) {
   d7202:	4604      	mov	r4, r0
   d7204:	b158      	cbz	r0, d721e <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d7206:	e9d5 1200 	ldrd	r1, r2, [r5]
   d720a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d720e:	f7ff ffc7 	bl	d71a0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d7212:	6828      	ldr	r0, [r5, #0]
   d7214:	f7fe fc36 	bl	d5a84 <free>
        data_ = d;
   d7218:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d721a:	60ae      	str	r6, [r5, #8]
        return true;
   d721c:	2001      	movs	r0, #1
    }
   d721e:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d7220:	2400      	movs	r4, #0
   d7222:	e7f6      	b.n	d7212 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d7224 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d7224:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7226:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d7228:	6845      	ldr	r5, [r0, #4]
   d722a:	4668      	mov	r0, sp
   d722c:	f7ff fc71 	bl	d6b12 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7230:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d7234:	4299      	cmp	r1, r3
   d7236:	da10      	bge.n	d725a <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d7238:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d723a:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d723c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d7240:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d7244:	4629      	mov	r1, r5
   d7246:	f105 0008 	add.w	r0, r5, #8
   d724a:	f7ff ffa9 	bl	d71a0 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d724e:	b98d      	cbnz	r5, d7274 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d7250:	6863      	ldr	r3, [r4, #4]
   d7252:	3301      	adds	r3, #1
   d7254:	6063      	str	r3, [r4, #4]
    return true;
   d7256:	2601      	movs	r6, #1
   d7258:	e006      	b.n	d7268 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d725a:	3101      	adds	r1, #1
   d725c:	4620      	mov	r0, r4
   d725e:	f7ff ffc9 	bl	d71f4 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d7262:	4606      	mov	r6, r0
   d7264:	2800      	cmp	r0, #0
   d7266:	d1e7      	bne.n	d7238 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x14>
   d7268:	a801      	add	r0, sp, #4
   d726a:	f7ff fc66 	bl	d6b3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d726e:	4630      	mov	r0, r6
   d7270:	b002      	add	sp, #8
   d7272:	bd70      	pop	{r4, r5, r6, pc}
   d7274:	4669      	mov	r1, sp
   d7276:	4628      	mov	r0, r5
   d7278:	f7ff fc4b 	bl	d6b12 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
   d727c:	e7e8      	b.n	d7250 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d727e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>:
        if (dest > p && dest < end) {
   d727e:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d7280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7282:	4604      	mov	r4, r0
   d7284:	460d      	mov	r5, r1
   d7286:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d7288:	d914      	bls.n	d72b4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x36>
   d728a:	4290      	cmp	r0, r2
   d728c:	d213      	bcs.n	d72b6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
            --end;
   d728e:	f1a2 0608 	sub.w	r6, r2, #8
            dest += end - p - 1;
   d7292:	1a75      	subs	r5, r6, r1
   d7294:	f1a1 0708 	sub.w	r7, r1, #8
   d7298:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d729a:	42b7      	cmp	r7, r6
   d729c:	d018      	beq.n	d72d0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*end));
   d729e:	b11c      	cbz	r4, d72a8 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x2a>
   d72a0:	4631      	mov	r1, r6
   d72a2:	4620      	mov	r0, r4
   d72a4:	f7ff fc27 	bl	d6af6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d72a8:	1d30      	adds	r0, r6, #4
   d72aa:	f7ff fc46 	bl	d6b3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; end != p; --end, --dest) {
   d72ae:	3e08      	subs	r6, #8
   d72b0:	3c08      	subs	r4, #8
   d72b2:	e7f2      	b.n	d729a <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x1c>
        } else if (dest != p) {
   d72b4:	d00c      	beq.n	d72d0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
            for (; p != end; ++p, ++dest) {
   d72b6:	42b5      	cmp	r5, r6
   d72b8:	d00a      	beq.n	d72d0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x52>
                new(dest) T(std::move(*p));
   d72ba:	b11c      	cbz	r4, d72c4 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x46>
   d72bc:	4629      	mov	r1, r5
   d72be:	4620      	mov	r0, r4
   d72c0:	f7ff fc19 	bl	d6af6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d72c4:	1d28      	adds	r0, r5, #4
   d72c6:	f7ff fc38 	bl	d6b3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
            for (; p != end; ++p, ++dest) {
   d72ca:	3508      	adds	r5, #8
   d72cc:	3408      	adds	r4, #8
   d72ce:	e7f2      	b.n	d72b6 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_+0x38>
    }
   d72d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d72d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>:
    bool realloc(int n) {
   d72d2:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d72d4:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d72d6:	4605      	mov	r5, r0
        if (n > 0) {
   d72d8:	dd11      	ble.n	d72fe <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2c>
    return ::malloc(size);
   d72da:	00f0      	lsls	r0, r6, #3
   d72dc:	f7fe fbca 	bl	d5a74 <malloc>
            if (!d) {
   d72e0:	4604      	mov	r4, r0
   d72e2:	b158      	cbz	r0, d72fc <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d72e4:	e9d5 1200 	ldrd	r1, r2, [r5]
   d72e8:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
   d72ec:	f7ff ffc7 	bl	d727e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    ::free(ptr);
   d72f0:	6828      	ldr	r0, [r5, #0]
   d72f2:	f7fe fbc7 	bl	d5a84 <free>
        data_ = d;
   d72f6:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d72f8:	60ae      	str	r6, [r5, #8]
        return true;
   d72fa:	2001      	movs	r0, #1
    }
   d72fc:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d72fe:	2400      	movs	r4, #0
   d7300:	e7f6      	b.n	d72f0 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi+0x1e>

000d7302 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>:
inline bool spark::Vector<T, AllocatorT>::append(T value) {
   d7302:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7304:	4604      	mov	r4, r0
    return insert(size_, std::move(value));
   d7306:	6845      	ldr	r5, [r0, #4]
   d7308:	4668      	mov	r0, sp
   d730a:	f7ff fbf4 	bl	d6af6 <_ZN8particle17BleCharacteristicC1ERKS0_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d730e:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
   d7312:	4299      	cmp	r1, r3
   d7314:	da10      	bge.n	d7338 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x36>
    T* const p = data_ + i;
   d7316:	6823      	ldr	r3, [r4, #0]
    move(p + 1, p, data_ + size_);
   d7318:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d731a:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    move(p + 1, p, data_ + size_);
   d731e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   d7322:	4629      	mov	r1, r5
   d7324:	f105 0008 	add.w	r0, r5, #8
   d7328:	f7ff ffa9 	bl	d727e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE4moveIS2_Li0EEEvPS2_S6_S6_>
    new(p) T(std::move(value));
   d732c:	b98d      	cbnz	r5, d7352 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x50>
    ++size_;
   d732e:	6863      	ldr	r3, [r4, #4]
   d7330:	3301      	adds	r3, #1
   d7332:	6063      	str	r3, [r4, #4]
    return true;
   d7334:	2601      	movs	r6, #1
   d7336:	e006      	b.n	d7346 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x44>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d7338:	3101      	adds	r1, #1
   d733a:	4620      	mov	r0, r4
   d733c:	f7ff ffc9 	bl	d72d2 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE7reallocIS2_Li0EEEbi>
   d7340:	4606      	mov	r6, r0
   d7342:	2800      	cmp	r0, #0
   d7344:	d1e7      	bne.n	d7316 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x14>
   d7346:	a801      	add	r0, sp, #4
   d7348:	f7ff fbf7 	bl	d6b3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d734c:	4630      	mov	r0, r6
   d734e:	b002      	add	sp, #8
   d7350:	bd70      	pop	{r4, r5, r6, pc}
    new(p) T(std::move(value));
   d7352:	4669      	mov	r1, sp
   d7354:	4628      	mov	r0, r5
   d7356:	f7ff fbce 	bl	d6af6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d735a:	e7e8      	b.n	d732e <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_+0x2c>

000d735c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE>:
        }
    }
    return BlePeerDevice();
}

BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d735c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7360:	4617      	mov	r7, r2
   d7362:	b0a1      	sub	sp, #132	; 0x84
   d7364:	4680      	mov	r8, r0
    WiringBleLock lk;
   d7366:	a80a      	add	r0, sp, #40	; 0x28
BleCharacteristic BleLocalDevice::addCharacteristic(const BleCharacteristic& characteristic) {
   d7368:	460e      	mov	r6, r1
    WiringBleLock lk;
   d736a:	f7ff f8b2 	bl	d64d2 <_ZN8particle3ble13WiringBleLockC1Ev>
   d736e:	683c      	ldr	r4, [r7, #0]
    auto charImpl = characteristic.impl();
    if (charImpl->properties() == BleCharacteristicProperty::NONE) {
   d7370:	7923      	ldrb	r3, [r4, #4]
   d7372:	b953      	cbnz	r3, d738a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x2e>
        return characteristic;
    }
    for (const auto& existChar : impl()->characteristics()) {
        if (*charImpl == *existChar.impl()) {
            LOG(ERROR, "Duplicated characteristic cannot be added.");
            return characteristic;
   d7374:	4639      	mov	r1, r7
   d7376:	4640      	mov	r0, r8
   d7378:	f7ff fbbd 	bl	d6af6 <_ZN8particle17BleCharacteristicC1ERKS0_>
    WiringBleLock lk;
   d737c:	a80a      	add	r0, sp, #40	; 0x28
   d737e:	f7ff f8b0 	bl	d64e2 <_ZN8particle3ble13WiringBleLockD1Ev>
    LOG_DEBUG(TRACE, "Add new local characteristic.");
    if(!impl()->characteristics().append(characteristic)) {
        LOG(ERROR, "Failed to append local characteristic.");
    }
    return characteristic;
}
   d7382:	4640      	mov	r0, r8
   d7384:	b021      	add	sp, #132	; 0x84
   d7386:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d738a:	6833      	ldr	r3, [r6, #0]
    return data_ + size_;
   d738c:	e9d3 5303 	ldrd	r5, r3, [r3, #12]
   d7390:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   d7394:	9303      	str	r3, [sp, #12]
   d7396:	f104 0a28 	add.w	sl, r4, #40	; 0x28
        if (charUuid_ == impl.charUuid_ &&
   d739a:	f104 0b14 	add.w	fp, r4, #20
    for (const auto& existChar : impl()->characteristics()) {
   d739e:	9b03      	ldr	r3, [sp, #12]
   d73a0:	429d      	cmp	r5, r3
   d73a2:	d021      	beq.n	d73e8 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x8c>
   d73a4:	f8d5 9000 	ldr.w	r9, [r5]
        if (charUuid_ == impl.charUuid_ &&
   d73a8:	4658      	mov	r0, fp
   d73aa:	f109 0114 	add.w	r1, r9, #20
   d73ae:	f7ff f948 	bl	d6642 <_ZNK8particle7BleUuideqERKS0_>
                isLocal_ == impl.isLocal_ &&
   d73b2:	b1b8      	cbz	r0, d73e4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                svcUuid_ == impl.svcUuid_ &&
   d73b4:	f109 0128 	add.w	r1, r9, #40	; 0x28
   d73b8:	4650      	mov	r0, sl
   d73ba:	f7ff f942 	bl	d6642 <_ZNK8particle7BleUuideqERKS0_>
        if (charUuid_ == impl.charUuid_ &&
   d73be:	b188      	cbz	r0, d73e4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
                isLocal_ == impl.isLocal_ &&
   d73c0:	6823      	ldr	r3, [r4, #0]
   d73c2:	f8d9 2000 	ldr.w	r2, [r9]
   d73c6:	4053      	eors	r3, r2
   d73c8:	f433 437f 	bics.w	r3, r3, #65280	; 0xff00
   d73cc:	d10a      	bne.n	d73e4 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x88>
            LOG(ERROR, "Duplicated characteristic cannot be added.");
   d73ce:	2220      	movs	r2, #32
   d73d0:	e9cd 2315 	strd	r2, r3, [sp, #84]	; 0x54
   d73d4:	4a5e      	ldr	r2, [pc, #376]	; (d7550 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f4>)
   d73d6:	9200      	str	r2, [sp, #0]
   d73d8:	aa15      	add	r2, sp, #84	; 0x54
   d73da:	495e      	ldr	r1, [pc, #376]	; (d7554 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1f8>)
   d73dc:	2032      	movs	r0, #50	; 0x32
   d73de:	f7fe fa73 	bl	d58c8 <log_message>
   d73e2:	e7c7      	b.n	d7374 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
    for (const auto& existChar : impl()->characteristics()) {
   d73e4:	3508      	adds	r5, #8
   d73e6:	e7da      	b.n	d739e <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x42>
    if (!charImpl->svcUUID().isValid()) {
   d73e8:	4650      	mov	r0, sl
   d73ea:	f7ff f8f5 	bl	d65d8 <_ZNK8particle7BleUuid7isValidEv>
   d73ee:	b960      	cbnz	r0, d740a <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xae>
        return *this = BleUuid(uuid);
   d73f0:	4959      	ldr	r1, [pc, #356]	; (d7558 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
   d73f2:	2201      	movs	r2, #1
   d73f4:	a815      	add	r0, sp, #84	; 0x54
   d73f6:	ad15      	add	r5, sp, #84	; 0x54
   d73f8:	f7ff f8c5 	bl	d6586 <_ZN8particle7BleUuidC1EPKhNS_12BleUuidOrderE>
   d73fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d73fe:	46d4      	mov	ip, sl
   d7400:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d7404:	682b      	ldr	r3, [r5, #0]
   d7406:	f8cc 3000 	str.w	r3, [ip]
   d740a:	6833      	ldr	r3, [r6, #0]
   d740c:	e9d3 5300 	ldrd	r5, r3, [r3]
   d7410:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
    for (auto& svc : impl()->services()) {
   d7414:	455d      	cmp	r5, fp
   d7416:	46a9      	mov	r9, r5
        BleService svc(charImpl->svcUUID());
   d7418:	4651      	mov	r1, sl
    for (auto& svc : impl()->services()) {
   d741a:	d06e      	beq.n	d74fa <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x19e>
        if (svc.impl()->UUID() == charImpl->svcUUID()) {
   d741c:	f855 0b08 	ldr.w	r0, [r5], #8
   d7420:	f7ff f90f 	bl	d6642 <_ZNK8particle7BleUuideqERKS0_>
   d7424:	2800      	cmp	r0, #0
   d7426:	d0f5      	beq.n	d7414 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xb8>
        if (!charUuid_.isValid()) {
   d7428:	f104 0a14 	add.w	sl, r4, #20
   d742c:	4650      	mov	r0, sl
   d742e:	f7ff f8d3 	bl	d65d8 <_ZNK8particle7BleUuid7isValidEv>
   d7432:	b988      	cbnz	r0, d7458 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xfc>
            defaultUuidCharCount_++;
   d7434:	4b49      	ldr	r3, [pc, #292]	; (d755c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x200>)
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d7436:	4948      	ldr	r1, [pc, #288]	; (d7558 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x1fc>)
            defaultUuidCharCount_++;
   d7438:	881a      	ldrh	r2, [r3, #0]
   d743a:	3201      	adds	r2, #1
   d743c:	b292      	uxth	r2, r2
   d743e:	801a      	strh	r2, [r3, #0]
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d7440:	a815      	add	r0, sp, #84	; 0x54
   d7442:	2301      	movs	r3, #1
            charUuid_ = newUuid;
   d7444:	ad15      	add	r5, sp, #84	; 0x54
            BleUuid newUuid(PARTICLE_DEFAULT_BLE_SVC_UUID, defaultUuidCharCount_);
   d7446:	f7ff f8bd 	bl	d65c4 <_ZN8particle7BleUuidC1EPKhtNS_12BleUuidOrderE>
            charUuid_ = newUuid;
   d744a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d744c:	46d4      	mov	ip, sl
   d744e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   d7452:	682b      	ldr	r3, [r5, #0]
   d7454:	f8cc 3000 	str.w	r3, [ip]
    hal_ble_char_init_t charInit = {};
   d7458:	2228      	movs	r2, #40	; 0x28
   d745a:	2100      	movs	r1, #0
   d745c:	a816      	add	r0, sp, #88	; 0x58
   d745e:	f002 f813 	bl	d9488 <memset>
    charInit.version = BLE_API_VERSION;
   d7462:	4b3f      	ldr	r3, [pc, #252]	; (d7560 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x204>)
   d7464:	9315      	str	r3, [sp, #84]	; 0x54
    charInit.uuid = charImpl->charUUID().halUUID();
   d7466:	4651      	mov	r1, sl
   d7468:	a804      	add	r0, sp, #16
   d746a:	f7ff f8c7 	bl	d65fc <_ZN8particle7BleUuid7halUUIDEv>
   d746e:	ab04      	add	r3, sp, #16
   d7470:	aa18      	add	r2, sp, #96	; 0x60
   d7472:	f10d 0c20 	add.w	ip, sp, #32
   d7476:	6818      	ldr	r0, [r3, #0]
   d7478:	6859      	ldr	r1, [r3, #4]
   d747a:	4615      	mov	r5, r2
   d747c:	c503      	stmia	r5!, {r0, r1}
   d747e:	3308      	adds	r3, #8
   d7480:	4563      	cmp	r3, ip
   d7482:	462a      	mov	r2, r5
   d7484:	d1f7      	bne.n	d7476 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x11a>
   d7486:	6818      	ldr	r0, [r3, #0]
   d7488:	6028      	str	r0, [r5, #0]
    charInit.properties = charImpl->properties().value();
   d748a:	7923      	ldrb	r3, [r4, #4]
   d748c:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
    charInit.service_handle = service->impl()->startHandle();
   d7490:	f8d9 3000 	ldr.w	r3, [r9]
   d7494:	8a9b      	ldrh	r3, [r3, #20]
   d7496:	f8ad 3074 	strh.w	r3, [sp, #116]	; 0x74
    charInit.description = charImpl->description().c_str();
   d749a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d749c:	9317      	str	r3, [sp, #92]	; 0x5c
    charInit.callback = charImpl->onBleCharEvents;
   d749e:	4b31      	ldr	r3, [pc, #196]	; (d7564 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x208>)
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d74a0:	2200      	movs	r2, #0
   d74a2:	1da1      	adds	r1, r4, #6
   d74a4:	a815      	add	r0, sp, #84	; 0x54
    charInit.context = charImpl;
   d74a6:	e9cd 341e 	strd	r3, r4, [sp, #120]	; 0x78
    if (hal_ble_gatt_server_add_characteristic(&charInit, &charImpl->attrHandles(), nullptr) != SYSTEM_ERROR_NONE) {
   d74aa:	f7fe f861 	bl	d5570 <hal_ble_gatt_server_add_characteristic>
   d74ae:	2800      	cmp	r0, #0
   d74b0:	f47f af60 	bne.w	d7374 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        isLocal_ = local;
   d74b4:	2301      	movs	r3, #1
   d74b6:	7023      	strb	r3, [r4, #0]
        return characteristics_;
   d74b8:	6834      	ldr	r4, [r6, #0]
    if(!impl()->characteristics().append(characteristic)) {
   d74ba:	4639      	mov	r1, r7
        return characteristics_;
   d74bc:	340c      	adds	r4, #12
    if(!impl()->characteristics().append(characteristic)) {
   d74be:	a80d      	add	r0, sp, #52	; 0x34
   d74c0:	f7ff fb19 	bl	d6af6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d74c4:	4620      	mov	r0, r4
   d74c6:	a90d      	add	r1, sp, #52	; 0x34
   d74c8:	f7ff ff1b 	bl	d7302 <_ZN5spark6VectorIN8particle17BleCharacteristicENS_16DefaultAllocatorEE6appendES2_>
   d74cc:	4604      	mov	r4, r0
   d74ce:	a80e      	add	r0, sp, #56	; 0x38
   d74d0:	f7ff fb33 	bl	d6b3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d74d4:	2c00      	cmp	r4, #0
   d74d6:	f47f af4d 	bne.w	d7374 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18>
        LOG(ERROR, "Failed to append local characteristic.");
   d74da:	2320      	movs	r3, #32
   d74dc:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
   d74e0:	4b21      	ldr	r3, [pc, #132]	; (d7568 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20c>)
   d74e2:	9300      	str	r3, [sp, #0]
   d74e4:	aa0d      	add	r2, sp, #52	; 0x34
   d74e6:	4623      	mov	r3, r4
   d74e8:	e777      	b.n	d73da <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x7e>
            return characteristic;
   d74ea:	4639      	mov	r1, r7
   d74ec:	4640      	mov	r0, r8
   d74ee:	f7ff fb02 	bl	d6af6 <_ZN8particle17BleCharacteristicC1ERKS0_>
   d74f2:	a80c      	add	r0, sp, #48	; 0x30
   d74f4:	f7ff fb21 	bl	d6b3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d74f8:	e740      	b.n	d737c <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x20>
        BleService svc(charImpl->svcUUID());
   d74fa:	a80b      	add	r0, sp, #44	; 0x2c
   d74fc:	f7ff f99a 	bl	d6834 <_ZN8particle10BleServiceC1ERKNS_7BleUuidE>
        hal_ble_uuid_t halUuid = charImpl->svcUUID().halUUID();
   d7500:	4651      	mov	r1, sl
   d7502:	a815      	add	r0, sp, #84	; 0x54
   d7504:	f7ff f87a 	bl	d65fc <_ZN8particle7BleUuid7halUUIDEv>
        if (hal_ble_gatt_server_add_service(BLE_SERVICE_TYPE_PRIMARY, &halUuid, &svc.impl()->startHandle(), nullptr) != SYSTEM_ERROR_NONE) {
   d7508:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   d750a:	2300      	movs	r3, #0
   d750c:	3214      	adds	r2, #20
   d750e:	a915      	add	r1, sp, #84	; 0x54
   d7510:	2001      	movs	r0, #1
   d7512:	f7fe f819 	bl	d5548 <hal_ble_gatt_server_add_service>
   d7516:	2800      	cmp	r0, #0
   d7518:	d1e7      	bne.n	d74ea <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
        return services_;
   d751a:	6835      	ldr	r5, [r6, #0]
   d751c:	a90b      	add	r1, sp, #44	; 0x2c
   d751e:	a80d      	add	r0, sp, #52	; 0x34
   d7520:	f7ff faf7 	bl	d6b12 <_ZNSt12__shared_ptrIN8particle14BleServiceImplELN9__gnu_cxx12_Lock_policyE0EEC1ERKS4_>
        if(!impl()->services().append(svc)) {
   d7524:	4628      	mov	r0, r5
   d7526:	a90d      	add	r1, sp, #52	; 0x34
   d7528:	f7ff fe7c 	bl	d7224 <_ZN5spark6VectorIN8particle10BleServiceENS_16DefaultAllocatorEE6appendES2_>
   d752c:	4605      	mov	r5, r0
   d752e:	a80e      	add	r0, sp, #56	; 0x38
   d7530:	f7ff fb03 	bl	d6b3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d7534:	2d00      	cmp	r5, #0
   d7536:	d0d8      	beq.n	d74ea <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0x18e>
   d7538:	6832      	ldr	r2, [r6, #0]
    return data_[size_ - 1];
   d753a:	6853      	ldr	r3, [r2, #4]
   d753c:	6812      	ldr	r2, [r2, #0]
   d753e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
   d7542:	3b01      	subs	r3, #1
   d7544:	a80c      	add	r0, sp, #48	; 0x30
   d7546:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
   d754a:	f7ff faf6 	bl	d6b3a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d754e:	e76b      	b.n	d7428 <_ZN8particle14BleLocalDevice17addCharacteristicERKNS_17BleCharacteristicE+0xcc>
   d7550:	000d9b1f 	.word	0x000d9b1f
   d7554:	000d9a7e 	.word	0x000d9a7e
   d7558:	000d9be0 	.word	0x000d9be0
   d755c:	2003e660 	.word	0x2003e660
   d7560:	002c0001 	.word	0x002c0001
   d7564:	000d69c5 	.word	0x000d69c5
   d7568:	000d9b4a 	.word	0x000d9b4a

000d756c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d756c:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d756e:	4c06      	ldr	r4, [pc, #24]	; (d7588 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d7570:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d7572:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d7574:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d7576:	f7fe f80f 	bl	d5598 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d757a:	4620      	mov	r0, r4
   d757c:	4a03      	ldr	r2, [pc, #12]	; (d758c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d757e:	4904      	ldr	r1, [pc, #16]	; (d7590 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d7580:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d7584:	f001 b900 	b.w	d8788 <__aeabi_atexit>
   d7588:	2003e664 	.word	0x2003e664
   d758c:	2003e0dc 	.word	0x2003e0dc
   d7590:	000d62d7 	.word	0x000d62d7

000d7594 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d7594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7596:	4606      	mov	r6, r0
   d7598:	460d      	mov	r5, r1
  size_t n = 0;
   d759a:	188f      	adds	r7, r1, r2
   d759c:	2400      	movs	r4, #0
  while (size--) {
   d759e:	42bd      	cmp	r5, r7
   d75a0:	d00c      	beq.n	d75bc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d75a2:	6833      	ldr	r3, [r6, #0]
   d75a4:	f815 1b01 	ldrb.w	r1, [r5], #1
   d75a8:	689b      	ldr	r3, [r3, #8]
   d75aa:	4630      	mov	r0, r6
   d75ac:	4798      	blx	r3
     if (chunk>=0)
   d75ae:	1e03      	subs	r3, r0, #0
   d75b0:	db01      	blt.n	d75b6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d75b2:	441c      	add	r4, r3
  while (size--) {
   d75b4:	e7f3      	b.n	d759e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d75b6:	2c00      	cmp	r4, #0
   d75b8:	bf08      	it	eq
   d75ba:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d75bc:	4620      	mov	r0, r4
   d75be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d75c0 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d75c0:	b513      	push	{r0, r1, r4, lr}
   d75c2:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d75c4:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d75c6:	b159      	cbz	r1, d75e0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d75c8:	9101      	str	r1, [sp, #4]
   d75ca:	f001 ff9b 	bl	d9504 <strlen>
   d75ce:	6823      	ldr	r3, [r4, #0]
   d75d0:	9901      	ldr	r1, [sp, #4]
   d75d2:	68db      	ldr	r3, [r3, #12]
   d75d4:	4602      	mov	r2, r0
   d75d6:	4620      	mov	r0, r4
    }
   d75d8:	b002      	add	sp, #8
   d75da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d75de:	4718      	bx	r3
    }
   d75e0:	b002      	add	sp, #8
   d75e2:	bd10      	pop	{r4, pc}

000d75e4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d75e4:	b508      	push	{r3, lr}
  return write(str);
   d75e6:	f7ff ffeb 	bl	d75c0 <_ZN5Print5writeEPKc>
}
   d75ea:	bd08      	pop	{r3, pc}

000d75ec <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d75ec:	6803      	ldr	r3, [r0, #0]
   d75ee:	689b      	ldr	r3, [r3, #8]
   d75f0:	4718      	bx	r3

000d75f2 <_ZN5Print5printERK9Printable>:
  return printFloat(n, digits);
}

 size_t Print::print(const Printable& x)
 {
   return x.printTo(*this);
   d75f2:	680a      	ldr	r2, [r1, #0]
 {
   d75f4:	460b      	mov	r3, r1
   return x.printTo(*this);
   d75f6:	6812      	ldr	r2, [r2, #0]
   d75f8:	4601      	mov	r1, r0
   d75fa:	4618      	mov	r0, r3
   d75fc:	4710      	bx	r2

000d75fe <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d75fe:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7600:	210d      	movs	r1, #13
{
   d7602:	4605      	mov	r5, r0
  size_t n = print('\r');
   d7604:	f7ff fff2 	bl	d75ec <_ZN5Print5printEc>
  n += print('\n');
   d7608:	210a      	movs	r1, #10
  size_t n = print('\r');
   d760a:	4604      	mov	r4, r0
  n += print('\n');
   d760c:	4628      	mov	r0, r5
   d760e:	f7ff ffed 	bl	d75ec <_ZN5Print5printEc>
  return n;
}
   d7612:	4420      	add	r0, r4
   d7614:	bd38      	pop	{r3, r4, r5, pc}

000d7616 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d7616:	b538      	push	{r3, r4, r5, lr}
   d7618:	4605      	mov	r5, r0
  return write(str);
   d761a:	f7ff ffd1 	bl	d75c0 <_ZN5Print5writeEPKc>
   d761e:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d7620:	4628      	mov	r0, r5
   d7622:	f7ff ffec 	bl	d75fe <_ZN5Print7printlnEv>
  return n;
}
   d7626:	4420      	add	r0, r4
   d7628:	bd38      	pop	{r3, r4, r5, pc}

000d762a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d762a:	b530      	push	{r4, r5, lr}
   d762c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d762e:	2300      	movs	r3, #0
   d7630:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7634:	2a01      	cmp	r2, #1
   d7636:	bf98      	it	ls
   d7638:	220a      	movls	r2, #10
   d763a:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d763c:	460d      	mov	r5, r1
   d763e:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d7642:	fb01 5312 	mls	r3, r1, r2, r5
   d7646:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d764a:	2b09      	cmp	r3, #9
   d764c:	bf94      	ite	ls
   d764e:	3330      	addls	r3, #48	; 0x30
   d7650:	3337      	addhi	r3, #55	; 0x37
   d7652:	b2db      	uxtb	r3, r3
  } while(n);
   d7654:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7656:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d765a:	d9ef      	bls.n	d763c <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d765c:	4621      	mov	r1, r4
   d765e:	f7ff ffaf 	bl	d75c0 <_ZN5Print5writeEPKc>
}
   d7662:	b00b      	add	sp, #44	; 0x2c
   d7664:	bd30      	pop	{r4, r5, pc}
	...

000d7668 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d7668:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d766c:	ec55 4b10 	vmov	r4, r5, d0
   d7670:	4606      	mov	r6, r0
   d7672:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d7674:	ee10 2a10 	vmov	r2, s0
   d7678:	ee10 0a10 	vmov	r0, s0
   d767c:	462b      	mov	r3, r5
   d767e:	4629      	mov	r1, r5
   d7680:	f001 fdf8 	bl	d9274 <__aeabi_dcmpun>
   d7684:	b140      	cbz	r0, d7698 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d7686:	4953      	ldr	r1, [pc, #332]	; (d77d4 <_ZN5Print10printFloatEdh+0x16c>)
   d7688:	4630      	mov	r0, r6
   d768a:	f7ff ff99 	bl	d75c0 <_ZN5Print5writeEPKc>
   d768e:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d7690:	4650      	mov	r0, sl
   d7692:	b003      	add	sp, #12
   d7694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d7698:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d769c:	4b4e      	ldr	r3, [pc, #312]	; (d77d8 <_ZN5Print10printFloatEdh+0x170>)
   d769e:	f04f 32ff 	mov.w	r2, #4294967295
   d76a2:	4620      	mov	r0, r4
   d76a4:	4649      	mov	r1, r9
   d76a6:	f001 fde5 	bl	d9274 <__aeabi_dcmpun>
   d76aa:	b948      	cbnz	r0, d76c0 <_ZN5Print10printFloatEdh+0x58>
   d76ac:	4b4a      	ldr	r3, [pc, #296]	; (d77d8 <_ZN5Print10printFloatEdh+0x170>)
   d76ae:	f04f 32ff 	mov.w	r2, #4294967295
   d76b2:	4620      	mov	r0, r4
   d76b4:	4649      	mov	r1, r9
   d76b6:	f001 fdbf 	bl	d9238 <__aeabi_dcmple>
   d76ba:	b908      	cbnz	r0, d76c0 <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d76bc:	4947      	ldr	r1, [pc, #284]	; (d77dc <_ZN5Print10printFloatEdh+0x174>)
   d76be:	e7e3      	b.n	d7688 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d76c0:	4b47      	ldr	r3, [pc, #284]	; (d77e0 <_ZN5Print10printFloatEdh+0x178>)
   d76c2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d76c6:	4620      	mov	r0, r4
   d76c8:	4629      	mov	r1, r5
   d76ca:	f001 fdc9 	bl	d9260 <__aeabi_dcmpgt>
   d76ce:	b108      	cbz	r0, d76d4 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d76d0:	4944      	ldr	r1, [pc, #272]	; (d77e4 <_ZN5Print10printFloatEdh+0x17c>)
   d76d2:	e7d9      	b.n	d7688 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d76d4:	4b44      	ldr	r3, [pc, #272]	; (d77e8 <_ZN5Print10printFloatEdh+0x180>)
   d76d6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d76da:	4620      	mov	r0, r4
   d76dc:	4629      	mov	r1, r5
   d76de:	f001 fda1 	bl	d9224 <__aeabi_dcmplt>
   d76e2:	2800      	cmp	r0, #0
   d76e4:	d1f4      	bne.n	d76d0 <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d76e6:	2200      	movs	r2, #0
   d76e8:	2300      	movs	r3, #0
   d76ea:	4620      	mov	r0, r4
   d76ec:	4629      	mov	r1, r5
   d76ee:	f001 fd99 	bl	d9224 <__aeabi_dcmplt>
   d76f2:	b1d0      	cbz	r0, d772a <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d76f4:	212d      	movs	r1, #45	; 0x2d
   d76f6:	4630      	mov	r0, r6
   d76f8:	f7ff ff78 	bl	d75ec <_ZN5Print5printEc>
     number = -number;
   d76fc:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d7700:	4682      	mov	sl, r0
     number = -number;
   d7702:	461d      	mov	r5, r3
  double rounding = 0.5;
   d7704:	4939      	ldr	r1, [pc, #228]	; (d77ec <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d7706:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d77f4 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d770a:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d770e:	2000      	movs	r0, #0
    rounding /= 10.0;
   d7710:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d7714:	fa5f f38b 	uxtb.w	r3, fp
   d7718:	429f      	cmp	r7, r3
   d771a:	d908      	bls.n	d772e <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d771c:	4642      	mov	r2, r8
   d771e:	464b      	mov	r3, r9
   d7720:	f001 fc38 	bl	d8f94 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d7724:	f10b 0b01 	add.w	fp, fp, #1
   d7728:	e7f4      	b.n	d7714 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d772a:	4682      	mov	sl, r0
   d772c:	e7ea      	b.n	d7704 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d772e:	4622      	mov	r2, r4
   d7730:	462b      	mov	r3, r5
   d7732:	f001 f94f 	bl	d89d4 <__adddf3>
   d7736:	460d      	mov	r5, r1
   d7738:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d773a:	f001 fdd9 	bl	d92f0 <__aeabi_d2uiz>
   d773e:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d7740:	f001 fa84 	bl	d8c4c <__aeabi_ui2d>
   d7744:	4602      	mov	r2, r0
   d7746:	460b      	mov	r3, r1
   d7748:	4620      	mov	r0, r4
   d774a:	4629      	mov	r1, r5
   d774c:	f001 f940 	bl	d89d0 <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d7750:	220a      	movs	r2, #10
   d7752:	4604      	mov	r4, r0
   d7754:	460d      	mov	r5, r1
   d7756:	4630      	mov	r0, r6
   d7758:	4641      	mov	r1, r8
   d775a:	f7ff ff66 	bl	d762a <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d775e:	4482      	add	sl, r0
  if (digits > 0) {
   d7760:	b127      	cbz	r7, d776c <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d7762:	4923      	ldr	r1, [pc, #140]	; (d77f0 <_ZN5Print10printFloatEdh+0x188>)
   d7764:	4630      	mov	r0, r6
   d7766:	f7ff ff2b 	bl	d75c0 <_ZN5Print5writeEPKc>
    n += print(".");
   d776a:	4482      	add	sl, r0
    remainder *= 10.0;
   d776c:	f8df 9084 	ldr.w	r9, [pc, #132]	; d77f4 <_ZN5Print10printFloatEdh+0x18c>
   d7770:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d7774:	3f01      	subs	r7, #1
   d7776:	b2ff      	uxtb	r7, r7
   d7778:	2fff      	cmp	r7, #255	; 0xff
   d777a:	d089      	beq.n	d7690 <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d777c:	4642      	mov	r2, r8
   d777e:	464b      	mov	r3, r9
   d7780:	4620      	mov	r0, r4
   d7782:	4629      	mov	r1, r5
   d7784:	f001 fadc 	bl	d8d40 <__aeabi_dmul>
   d7788:	4604      	mov	r4, r0
   d778a:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d778c:	f001 fd88 	bl	d92a0 <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d7790:	f1b0 0b00 	subs.w	fp, r0, #0
   d7794:	da1a      	bge.n	d77cc <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d7796:	212d      	movs	r1, #45	; 0x2d
   d7798:	4630      	mov	r0, r6
   d779a:	f7ff ff27 	bl	d75ec <_ZN5Print5printEc>
            val = -n;
   d779e:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d77a2:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d77a4:	220a      	movs	r2, #10
   d77a6:	4630      	mov	r0, r6
   d77a8:	9301      	str	r3, [sp, #4]
   d77aa:	f7ff ff3e 	bl	d762a <_ZN5Print11printNumberEmh>
   d77ae:	9b01      	ldr	r3, [sp, #4]
   d77b0:	4418      	add	r0, r3
    n += print(toPrint);
   d77b2:	4482      	add	sl, r0
    remainder -= toPrint;
   d77b4:	4658      	mov	r0, fp
   d77b6:	f001 fa59 	bl	d8c6c <__aeabi_i2d>
   d77ba:	4602      	mov	r2, r0
   d77bc:	460b      	mov	r3, r1
   d77be:	4620      	mov	r0, r4
   d77c0:	4629      	mov	r1, r5
   d77c2:	f001 f905 	bl	d89d0 <__aeabi_dsub>
   d77c6:	4604      	mov	r4, r0
   d77c8:	460d      	mov	r5, r1
  while (digits-- > 0)
   d77ca:	e7d3      	b.n	d7774 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d77cc:	4659      	mov	r1, fp
        size_t t = 0;
   d77ce:	2300      	movs	r3, #0
   d77d0:	e7e8      	b.n	d77a4 <_ZN5Print10printFloatEdh+0x13c>
   d77d2:	bf00      	nop
   d77d4:	000d9c00 	.word	0x000d9c00
   d77d8:	7fefffff 	.word	0x7fefffff
   d77dc:	000d9c04 	.word	0x000d9c04
   d77e0:	41efffff 	.word	0x41efffff
   d77e4:	000d9c08 	.word	0x000d9c08
   d77e8:	c1efffff 	.word	0xc1efffff
   d77ec:	3fe00000 	.word	0x3fe00000
   d77f0:	000d99b7 	.word	0x000d99b7
   d77f4:	40240000 	.word	0x40240000

000d77f8 <_ZN5Print7printlnEdi>:
{
   d77f8:	b538      	push	{r3, r4, r5, lr}
  return printFloat(n, digits);
   d77fa:	b2c9      	uxtb	r1, r1
{
   d77fc:	4605      	mov	r5, r0
  return printFloat(n, digits);
   d77fe:	f7ff ff33 	bl	d7668 <_ZN5Print10printFloatEdh>
   d7802:	4604      	mov	r4, r0
  n += println();
   d7804:	4628      	mov	r0, r5
   d7806:	f7ff fefa 	bl	d75fe <_ZN5Print7printlnEv>
}
   d780a:	4420      	add	r0, r4
   d780c:	bd38      	pop	{r3, r4, r5, pc}

000d780e <_ZN5Print7printlnEfi>:
{
   d780e:	b538      	push	{r3, r4, r5, lr}
   d7810:	4604      	mov	r4, r0
   d7812:	ee10 0a10 	vmov	r0, s0
   d7816:	460d      	mov	r5, r1
    return println((double)num, digits);
   d7818:	f001 fa3a 	bl	d8c90 <__aeabi_f2d>
   d781c:	ec41 0b10 	vmov	d0, r0, r1
   d7820:	4629      	mov	r1, r5
   d7822:	4620      	mov	r0, r4
}
   d7824:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return println((double)num, digits);
   d7828:	f7ff bfe6 	b.w	d77f8 <_ZN5Print7printlnEdi>

000d782c <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d782c:	2300      	movs	r3, #0
   d782e:	6840      	ldr	r0, [r0, #4]
   d7830:	461a      	mov	r2, r3
   d7832:	4619      	mov	r1, r3
   d7834:	f7fe b8ae 	b.w	d5994 <network_on>

000d7838 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d7838:	4b01      	ldr	r3, [pc, #4]	; (d7840 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d783a:	4a02      	ldr	r2, [pc, #8]	; (d7844 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d783c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d783e:	4770      	bx	lr
   d7840:	2003e66c 	.word	0x2003e66c
   d7844:	000d9c0c 	.word	0x000d9c0c

000d7848 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d7848:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d784a:	2000      	movs	r0, #0
   d784c:	f7fe f8fa 	bl	d5a44 <spark_sync_time_pending>
   d7850:	b128      	cbz	r0, d785e <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d7852:	f7fe f8ef 	bl	d5a34 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d7856:	f080 0001 	eor.w	r0, r0, #1
   d785a:	b2c0      	uxtb	r0, r0
    }
   d785c:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d785e:	2001      	movs	r0, #1
   d7860:	e7fc      	b.n	d785c <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d7862 <_ZN9TimeClass7isValidEv>:
    strftime(buf, sizeof(buf), format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
   d7862:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d7864:	2000      	movs	r0, #0
   d7866:	f7fd fe2d 	bl	d54c4 <hal_rtc_time_is_valid>
    if (rtcstate)
   d786a:	4604      	mov	r4, r0
   d786c:	b9a0      	cbnz	r0, d7898 <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d786e:	f7fe f833 	bl	d58d8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d7872:	2801      	cmp	r0, #1
   d7874:	d110      	bne.n	d7898 <_ZN9TimeClass7isValidEv+0x36>
   d7876:	4620      	mov	r0, r4
   d7878:	f7fe f846 	bl	d5908 <system_thread_get_state>
   d787c:	b960      	cbnz	r0, d7898 <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d787e:	f7ff ffe3 	bl	d7848 <_ZN10CloudClass12syncTimeDoneEv.isra.0>

    static uint32_t freeMemory();

    template<typename Condition, typename While>
    static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d7882:	b910      	cbnz	r0, d788a <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d7884:	f7fe f8c6 	bl	d5a14 <spark_process>
        while (_while() && !_condition()) {
   d7888:	e7f9      	b.n	d787e <_ZN9TimeClass7isValidEv+0x1c>
   d788a:	f7ff ffdd 	bl	d7848 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d788e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d7892:	2000      	movs	r0, #0
   d7894:	f7fd be16 	b.w	d54c4 <hal_rtc_time_is_valid>
}
   d7898:	4620      	mov	r0, r4
   d789a:	bd10      	pop	{r4, pc}

000d789c <_ZN9TimeClass3nowEv>:
{
   d789c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    (void)isValid();
   d789e:	f7ff ffe0 	bl	d7862 <_ZN9TimeClass7isValidEv>
    struct timeval tv = {};
   d78a2:	2210      	movs	r2, #16
   d78a4:	2100      	movs	r1, #0
   d78a6:	4668      	mov	r0, sp
   d78a8:	f001 fdee 	bl	d9488 <memset>
    hal_rtc_get_time(&tv, nullptr);
   d78ac:	2100      	movs	r1, #0
   d78ae:	4668      	mov	r0, sp
   d78b0:	f7fd fe10 	bl	d54d4 <hal_rtc_get_time>
}
   d78b4:	9800      	ldr	r0, [sp, #0]
   d78b6:	b005      	add	sp, #20
   d78b8:	f85d fb04 	ldr.w	pc, [sp], #4

000d78bc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d78bc:	4b02      	ldr	r3, [pc, #8]	; (d78c8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d78be:	681a      	ldr	r2, [r3, #0]
   d78c0:	4b02      	ldr	r3, [pc, #8]	; (d78cc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d78c2:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d78c4:	4770      	bx	lr
   d78c6:	bf00      	nop
   d78c8:	2003e074 	.word	0x2003e074
   d78cc:	2003e670 	.word	0x2003e670

000d78d0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d78d0:	2100      	movs	r1, #0
   d78d2:	f7fe b811 	b.w	d58f8 <system_delay_ms>

000d78d6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d78d6:	b510      	push	{r4, lr}
   d78d8:	4604      	mov	r4, r0
    class function<_Res(_ArgTypes...)>
   d78da:	f7fe fdd1 	bl	d6480 <_ZNSt14_Function_baseD1Ev>
   d78de:	4620      	mov	r0, r4
   d78e0:	bd10      	pop	{r4, pc}
	...

000d78e4 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d78e4:	4803      	ldr	r0, [pc, #12]	; (d78f4 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d78e6:	4a04      	ldr	r2, [pc, #16]	; (d78f8 <_GLOBAL__sub_I_RGB+0x14>)
   d78e8:	4904      	ldr	r1, [pc, #16]	; (d78fc <_GLOBAL__sub_I_RGB+0x18>)
   d78ea:	2300      	movs	r3, #0
   d78ec:	6083      	str	r3, [r0, #8]
   d78ee:	f000 bf4b 	b.w	d8788 <__aeabi_atexit>
   d78f2:	bf00      	nop
   d78f4:	2003e674 	.word	0x2003e674
   d78f8:	2003e0dc 	.word	0x2003e0dc
   d78fc:	000d78d7 	.word	0x000d78d7

000d7900 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d7900:	4b01      	ldr	r3, [pc, #4]	; (d7908 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d7902:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d7904:	4770      	bx	lr
   d7906:	bf00      	nop
   d7908:	2003e078 	.word	0x2003e078

000d790c <serialEventRun>:
{
   d790c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d790e:	4b0b      	ldr	r3, [pc, #44]	; (d793c <serialEventRun+0x30>)
   d7910:	b143      	cbz	r3, d7924 <serialEventRun+0x18>
   d7912:	f000 f985 	bl	d7c20 <_Z16_fetch_usbserialv>
   d7916:	6803      	ldr	r3, [r0, #0]
   d7918:	691b      	ldr	r3, [r3, #16]
   d791a:	4798      	blx	r3
   d791c:	2800      	cmp	r0, #0
   d791e:	dd01      	ble.n	d7924 <serialEventRun+0x18>
        serialEvent();
   d7920:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d7924:	4b06      	ldr	r3, [pc, #24]	; (d7940 <serialEventRun+0x34>)
   d7926:	b143      	cbz	r3, d793a <serialEventRun+0x2e>
   d7928:	f000 f9f8 	bl	d7d1c <_Z22__fetch_global_Serial1v>
   d792c:	6803      	ldr	r3, [r0, #0]
   d792e:	691b      	ldr	r3, [r3, #16]
   d7930:	4798      	blx	r3
   d7932:	2800      	cmp	r0, #0
   d7934:	dd01      	ble.n	d793a <serialEventRun+0x2e>
        serialEvent1();
   d7936:	f3af 8000 	nop.w
}
   d793a:	bd08      	pop	{r3, pc}
	...

000d7944 <_post_loop>:
{
   d7944:	b508      	push	{r3, lr}
	serialEventRun();
   d7946:	f7ff ffe1 	bl	d790c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d794a:	f7fd fdb3 	bl	d54b4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d794e:	4b01      	ldr	r3, [pc, #4]	; (d7954 <_post_loop+0x10>)
   d7950:	6018      	str	r0, [r3, #0]
}
   d7952:	bd08      	pop	{r3, pc}
   d7954:	2003e7d4 	.word	0x2003e7d4

000d7958 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7958:	4802      	ldr	r0, [pc, #8]	; (d7964 <_Z33system_initialize_user_backup_ramv+0xc>)
   d795a:	4a03      	ldr	r2, [pc, #12]	; (d7968 <_Z33system_initialize_user_backup_ramv+0x10>)
   d795c:	4903      	ldr	r1, [pc, #12]	; (d796c <_Z33system_initialize_user_backup_ramv+0x14>)
   d795e:	1a12      	subs	r2, r2, r0
   d7960:	f001 bd6a 	b.w	d9438 <memcpy>
   d7964:	2003f400 	.word	0x2003f400
   d7968:	2003f404 	.word	0x2003f404
   d796c:	000d9fe0 	.word	0x000d9fe0

000d7970 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7970:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7972:	2300      	movs	r3, #0
   d7974:	9300      	str	r3, [sp, #0]
   d7976:	461a      	mov	r2, r3
   d7978:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d797c:	f7fd ffd6 	bl	d592c <system_ctrl_set_result>
}
   d7980:	b003      	add	sp, #12
   d7982:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7988 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d7988:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d798a:	8843      	ldrh	r3, [r0, #2]
   d798c:	2b0a      	cmp	r3, #10
   d798e:	d008      	beq.n	d79a2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7990:	2b50      	cmp	r3, #80	; 0x50
   d7992:	d10b      	bne.n	d79ac <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d7994:	4b09      	ldr	r3, [pc, #36]	; (d79bc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7996:	681b      	ldr	r3, [r3, #0]
   d7998:	b14b      	cbz	r3, d79ae <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d799a:	b003      	add	sp, #12
   d799c:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d79a0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d79a2:	f7ff ffe5 	bl	d7970 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d79a6:	b003      	add	sp, #12
   d79a8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d79ac:	2300      	movs	r3, #0
   d79ae:	9300      	str	r3, [sp, #0]
   d79b0:	461a      	mov	r2, r3
   d79b2:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d79b6:	f7fd ffb9 	bl	d592c <system_ctrl_set_result>
}
   d79ba:	e7f4      	b.n	d79a6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d79bc:	2003e688 	.word	0x2003e688

000d79c0 <module_user_init_hook>:
{
   d79c0:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d79c2:	4c12      	ldr	r4, [pc, #72]	; (d7a0c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d79c4:	4812      	ldr	r0, [pc, #72]	; (d7a10 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d79c6:	4d13      	ldr	r5, [pc, #76]	; (d7a14 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d79c8:	2100      	movs	r1, #0
   d79ca:	f7fe f87b 	bl	d5ac4 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d79ce:	6823      	ldr	r3, [r4, #0]
   d79d0:	42ab      	cmp	r3, r5
   d79d2:	4b11      	ldr	r3, [pc, #68]	; (d7a18 <module_user_init_hook+0x58>)
   d79d4:	bf0c      	ite	eq
   d79d6:	2201      	moveq	r2, #1
   d79d8:	2200      	movne	r2, #0
   d79da:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d79dc:	d002      	beq.n	d79e4 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d79de:	f7ff ffbb 	bl	d7958 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d79e2:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d79e4:	f7fd fd56 	bl	d5494 <HAL_RNG_GetRandomNumber>
   d79e8:	4604      	mov	r4, r0
    srand(seed);
   d79ea:	f001 fd55 	bl	d9498 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d79ee:	4b0b      	ldr	r3, [pc, #44]	; (d7a1c <module_user_init_hook+0x5c>)
   d79f0:	b113      	cbz	r3, d79f8 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d79f2:	4620      	mov	r0, r4
   d79f4:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d79f8:	2100      	movs	r1, #0
   d79fa:	4808      	ldr	r0, [pc, #32]	; (d7a1c <module_user_init_hook+0x5c>)
   d79fc:	f7fe f82a 	bl	d5a54 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d7a00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7a04:	4806      	ldr	r0, [pc, #24]	; (d7a20 <module_user_init_hook+0x60>)
   d7a06:	2100      	movs	r1, #0
   d7a08:	f7fd bf86 	b.w	d5918 <system_ctrl_set_app_request_handler>
   d7a0c:	2003f400 	.word	0x2003f400
   d7a10:	000d7901 	.word	0x000d7901
   d7a14:	9a271c1e 	.word	0x9a271c1e
   d7a18:	2003e684 	.word	0x2003e684
   d7a1c:	00000000 	.word	0x00000000
   d7a20:	000d7989 	.word	0x000d7989

000d7a24 <_ZN10CloudClass10disconnectERK22CloudDisconnectOptions>:

int CloudClass::publishVitals(system_tick_t period_s_) {
    return spark_publish_vitals(period_s_, nullptr);
}

void CloudClass::disconnect(const CloudDisconnectOptions& options) {
   d7a24:	b507      	push	{r0, r1, r2, lr}
    opts.size = sizeof(opts);
   d7a26:	2308      	movs	r3, #8
   d7a28:	f8ad 3000 	strh.w	r3, [sp]
    opts.flags = flags_;
   d7a2c:	6803      	ldr	r3, [r0, #0]
   d7a2e:	f88d 3002 	strb.w	r3, [sp, #2]
    opts.graceful = graceful_;
   d7a32:	7a03      	ldrb	r3, [r0, #8]
   d7a34:	f88d 3003 	strb.w	r3, [sp, #3]
    const auto opts = options.toSystemOptions();
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d7a38:	2100      	movs	r1, #0
    opts.timeout = timeout_;
   d7a3a:	6843      	ldr	r3, [r0, #4]
   d7a3c:	9301      	str	r3, [sp, #4]
    spark_cloud_disconnect(&opts, nullptr /* reserved */);
   d7a3e:	4668      	mov	r0, sp
   d7a40:	f7fe f810 	bl	d5a64 <spark_cloud_disconnect>
}
   d7a44:	b003      	add	sp, #12
   d7a46:	f85d fb04 	ldr.w	pc, [sp], #4

000d7a4a <_ZN9IPAddressD1Ev>:
    virtual ~IPAddress() {}
   d7a4a:	4770      	bx	lr

000d7a4c <_ZN9IPAddressD0Ev>:
   d7a4c:	b510      	push	{r4, lr}
   d7a4e:	2118      	movs	r1, #24
   d7a50:	4604      	mov	r4, r0
   d7a52:	f000 fe9e 	bl	d8792 <_ZdlPvj>
   d7a56:	4620      	mov	r0, r4
   d7a58:	bd10      	pop	{r4, pc}

000d7a5a <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d7a5a:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d7a5c:	7d03      	ldrb	r3, [r0, #20]
   d7a5e:	2b06      	cmp	r3, #6
{
   d7a60:	b08d      	sub	sp, #52	; 0x34
   d7a62:	460e      	mov	r6, r1
   d7a64:	f100 0704 	add.w	r7, r0, #4
   d7a68:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d7a6c:	d012      	beq.n	d7a94 <_ZNK9IPAddress7printToER5Print+0x3a>
   d7a6e:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d7a72:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d7a76:	220a      	movs	r2, #10
   d7a78:	4630      	mov	r0, r6
   d7a7a:	f7ff fdd6 	bl	d762a <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d7a7e:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d7a80:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d7a82:	d019      	beq.n	d7ab8 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d7a84:	2c00      	cmp	r4, #0
   d7a86:	d0f4      	beq.n	d7a72 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d7a88:	212e      	movs	r1, #46	; 0x2e
   d7a8a:	4630      	mov	r0, r6
   d7a8c:	f7ff fdae 	bl	d75ec <_ZN5Print5printEc>
   d7a90:	4404      	add	r4, r0
   d7a92:	e7ee      	b.n	d7a72 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7a94:	232f      	movs	r3, #47	; 0x2f
   d7a96:	466a      	mov	r2, sp
   d7a98:	4639      	mov	r1, r7
   d7a9a:	200a      	movs	r0, #10
		buf[0] = 0;
   d7a9c:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d7aa0:	f7fd fd9a 	bl	d55d8 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d7aa4:	4668      	mov	r0, sp
   d7aa6:	f001 fd2d 	bl	d9504 <strlen>
   d7aaa:	6833      	ldr	r3, [r6, #0]
   d7aac:	4602      	mov	r2, r0
   d7aae:	68db      	ldr	r3, [r3, #12]
   d7ab0:	4669      	mov	r1, sp
   d7ab2:	4630      	mov	r0, r6
   d7ab4:	4798      	blx	r3
   d7ab6:	4604      	mov	r4, r0
    }
    return n;
}
   d7ab8:	4620      	mov	r0, r4
   d7aba:	b00d      	add	sp, #52	; 0x34
   d7abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d7ac0 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d7ac0:	b510      	push	{r4, lr}
   d7ac2:	4b05      	ldr	r3, [pc, #20]	; (d7ad8 <_ZN9IPAddressC1Ev+0x18>)
   d7ac4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7ac6:	2211      	movs	r2, #17
   d7ac8:	f840 3b04 	str.w	r3, [r0], #4
   d7acc:	2100      	movs	r1, #0
   d7ace:	f001 fcdb 	bl	d9488 <memset>
}
   d7ad2:	4620      	mov	r0, r4
   d7ad4:	bd10      	pop	{r4, pc}
   d7ad6:	bf00      	nop
   d7ad8:	000d9c34 	.word	0x000d9c34

000d7adc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d7adc:	4603      	mov	r3, r0
   d7ade:	4a07      	ldr	r2, [pc, #28]	; (d7afc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d7ae0:	b510      	push	{r4, lr}
   d7ae2:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d7ae6:	f101 0210 	add.w	r2, r1, #16
   d7aea:	f851 4b04 	ldr.w	r4, [r1], #4
   d7aee:	f843 4b04 	str.w	r4, [r3], #4
   d7af2:	4291      	cmp	r1, r2
   d7af4:	d1f9      	bne.n	d7aea <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d7af6:	780a      	ldrb	r2, [r1, #0]
   d7af8:	701a      	strb	r2, [r3, #0]
}
   d7afa:	bd10      	pop	{r4, pc}
   d7afc:	000d9c34 	.word	0x000d9c34

000d7b00 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d7b00:	7d03      	ldrb	r3, [r0, #20]
   d7b02:	2b04      	cmp	r3, #4
   d7b04:	d104      	bne.n	d7b10 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d7b06:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7b08:	3800      	subs	r0, #0
   d7b0a:	bf18      	it	ne
   d7b0c:	2001      	movne	r0, #1
   d7b0e:	4770      	bx	lr
    } else if (version() == 6) {
   d7b10:	2b06      	cmp	r3, #6
   d7b12:	d107      	bne.n	d7b24 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7b14:	6843      	ldr	r3, [r0, #4]
   d7b16:	b93b      	cbnz	r3, d7b28 <_ZNK9IPAddresscvbEv+0x28>
   d7b18:	6883      	ldr	r3, [r0, #8]
   d7b1a:	b92b      	cbnz	r3, d7b28 <_ZNK9IPAddresscvbEv+0x28>
   d7b1c:	68c3      	ldr	r3, [r0, #12]
   d7b1e:	b91b      	cbnz	r3, d7b28 <_ZNK9IPAddresscvbEv+0x28>
   d7b20:	6900      	ldr	r0, [r0, #16]
   d7b22:	e7f1      	b.n	d7b08 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d7b24:	2000      	movs	r0, #0
   d7b26:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d7b28:	2001      	movs	r0, #1
}
   d7b2a:	4770      	bx	lr

000d7b2c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d7b2c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d7b2e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d7b32:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d7b36:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d7b3a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d7b3e:	2304      	movs	r3, #4
   d7b40:	6041      	str	r1, [r0, #4]
   d7b42:	7503      	strb	r3, [r0, #20]
}
   d7b44:	bd10      	pop	{r4, pc}
	...

000d7b48 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d7b48:	b513      	push	{r0, r1, r4, lr}
   d7b4a:	4b05      	ldr	r3, [pc, #20]	; (d7b60 <_ZN9IPAddressC1EPKh+0x18>)
   d7b4c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d7b4e:	78cb      	ldrb	r3, [r1, #3]
   d7b50:	9300      	str	r3, [sp, #0]
   d7b52:	788b      	ldrb	r3, [r1, #2]
   d7b54:	784a      	ldrb	r2, [r1, #1]
   d7b56:	7809      	ldrb	r1, [r1, #0]
   d7b58:	f7ff ffe8 	bl	d7b2c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d7b5c:	b002      	add	sp, #8
   d7b5e:	bd10      	pop	{r4, pc}
   d7b60:	000d9c34 	.word	0x000d9c34

000d7b64 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7b64:	7441      	strb	r1, [r0, #17]
}
   d7b66:	4770      	bx	lr

000d7b68 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7b68:	4770      	bx	lr

000d7b6a <_ZN9USBSerial4readEv>:
{
   d7b6a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7b6c:	2100      	movs	r1, #0
   d7b6e:	7c00      	ldrb	r0, [r0, #16]
   d7b70:	f7fd fe8a 	bl	d5888 <HAL_USB_USART_Receive_Data>
}
   d7b74:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7b78:	bd08      	pop	{r3, pc}

000d7b7a <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d7b7a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7b7c:	2101      	movs	r1, #1
   d7b7e:	7c00      	ldrb	r0, [r0, #16]
   d7b80:	f7fd fe82 	bl	d5888 <HAL_USB_USART_Receive_Data>
}
   d7b84:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7b88:	bd08      	pop	{r3, pc}

000d7b8a <_ZN9USBSerial17availableForWriteEv>:
{
   d7b8a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7b8c:	7c00      	ldrb	r0, [r0, #16]
   d7b8e:	f7fd fe73 	bl	d5878 <HAL_USB_USART_Available_Data_For_Write>
}
   d7b92:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7b96:	bd08      	pop	{r3, pc}

000d7b98 <_ZN9USBSerial9availableEv>:
{
   d7b98:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7b9a:	7c00      	ldrb	r0, [r0, #16]
   d7b9c:	f7fd fe64 	bl	d5868 <HAL_USB_USART_Available_Data>
}
   d7ba0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7ba4:	bd08      	pop	{r3, pc}

000d7ba6 <_ZN9USBSerial5writeEh>:
{
   d7ba6:	b513      	push	{r0, r1, r4, lr}
   d7ba8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7baa:	7c00      	ldrb	r0, [r0, #16]
{
   d7bac:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7bae:	f7fd fe63 	bl	d5878 <HAL_USB_USART_Available_Data_For_Write>
   d7bb2:	2800      	cmp	r0, #0
   d7bb4:	9901      	ldr	r1, [sp, #4]
   d7bb6:	dc01      	bgt.n	d7bbc <_ZN9USBSerial5writeEh+0x16>
   d7bb8:	7c60      	ldrb	r0, [r4, #17]
   d7bba:	b120      	cbz	r0, d7bc6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7bbc:	7c20      	ldrb	r0, [r4, #16]
   d7bbe:	f7fd fe6b 	bl	d5898 <HAL_USB_USART_Send_Data>
   d7bc2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d7bc6:	b002      	add	sp, #8
   d7bc8:	bd10      	pop	{r4, pc}

000d7bca <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d7bca:	7c00      	ldrb	r0, [r0, #16]
   d7bcc:	f7fd be6c 	b.w	d58a8 <HAL_USB_USART_Flush_Data>

000d7bd0 <_ZN9USBSerialD0Ev>:
   d7bd0:	b510      	push	{r4, lr}
   d7bd2:	2114      	movs	r1, #20
   d7bd4:	4604      	mov	r4, r0
   d7bd6:	f000 fddc 	bl	d8792 <_ZdlPvj>
   d7bda:	4620      	mov	r0, r4
   d7bdc:	bd10      	pop	{r4, pc}
	...

000d7be0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7be0:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d7be2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7be6:	4604      	mov	r4, r0
   d7be8:	4608      	mov	r0, r1
   d7bea:	2100      	movs	r1, #0
   d7bec:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7bf0:	4b04      	ldr	r3, [pc, #16]	; (d7c04 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7bf2:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d7bf4:	2301      	movs	r3, #1
  _serial = serial;
   d7bf6:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7bf8:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d7bfa:	4611      	mov	r1, r2
   d7bfc:	f7fd fe24 	bl	d5848 <HAL_USB_USART_Init>
}
   d7c00:	4620      	mov	r0, r4
   d7c02:	bd10      	pop	{r4, pc}
   d7c04:	000d9c48 	.word	0x000d9c48

000d7c08 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7c08:	7c00      	ldrb	r0, [r0, #16]
   d7c0a:	2200      	movs	r2, #0
   d7c0c:	f7fd be24 	b.w	d5858 <HAL_USB_USART_Begin>

000d7c10 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7c10:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7c12:	2214      	movs	r2, #20
{
   d7c14:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7c16:	2100      	movs	r1, #0
   d7c18:	f001 fc36 	bl	d9488 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7c1c:	4620      	mov	r0, r4
   d7c1e:	bd10      	pop	{r4, pc}

000d7c20 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7c20:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7c22:	4c10      	ldr	r4, [pc, #64]	; (d7c64 <_Z16_fetch_usbserialv+0x44>)
{
   d7c24:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7c26:	a803      	add	r0, sp, #12
   d7c28:	f7ff fff2 	bl	d7c10 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7c2c:	7821      	ldrb	r1, [r4, #0]
   d7c2e:	f3bf 8f5b 	dmb	ish
   d7c32:	f011 0101 	ands.w	r1, r1, #1
   d7c36:	d111      	bne.n	d7c5c <_Z16_fetch_usbserialv+0x3c>
   d7c38:	4620      	mov	r0, r4
   d7c3a:	9101      	str	r1, [sp, #4]
   d7c3c:	f7fc fa31 	bl	d40a2 <__cxa_guard_acquire>
   d7c40:	9901      	ldr	r1, [sp, #4]
   d7c42:	b158      	cbz	r0, d7c5c <_Z16_fetch_usbserialv+0x3c>
   d7c44:	aa03      	add	r2, sp, #12
   d7c46:	4808      	ldr	r0, [pc, #32]	; (d7c68 <_Z16_fetch_usbserialv+0x48>)
   d7c48:	f7ff ffca 	bl	d7be0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7c4c:	4620      	mov	r0, r4
   d7c4e:	f7fc fa2d 	bl	d40ac <__cxa_guard_release>
   d7c52:	4a06      	ldr	r2, [pc, #24]	; (d7c6c <_Z16_fetch_usbserialv+0x4c>)
   d7c54:	4906      	ldr	r1, [pc, #24]	; (d7c70 <_Z16_fetch_usbserialv+0x50>)
   d7c56:	4804      	ldr	r0, [pc, #16]	; (d7c68 <_Z16_fetch_usbserialv+0x48>)
   d7c58:	f000 fd96 	bl	d8788 <__aeabi_atexit>
	return _usbserial;
}
   d7c5c:	4802      	ldr	r0, [pc, #8]	; (d7c68 <_Z16_fetch_usbserialv+0x48>)
   d7c5e:	b008      	add	sp, #32
   d7c60:	bd10      	pop	{r4, pc}
   d7c62:	bf00      	nop
   d7c64:	2003e68c 	.word	0x2003e68c
   d7c68:	2003e690 	.word	0x2003e690
   d7c6c:	2003e0dc 	.word	0x2003e0dc
   d7c70:	000d7b69 	.word	0x000d7b69

000d7c74 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d7c74:	4770      	bx	lr

000d7c76 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7c76:	7441      	strb	r1, [r0, #17]
}
   d7c78:	4770      	bx	lr

000d7c7a <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d7c7a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d7c7c:	7c00      	ldrb	r0, [r0, #16]
   d7c7e:	f7fd fcfb 	bl	d5678 <hal_usart_available_data_for_write>
}
   d7c82:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7c86:	bd08      	pop	{r3, pc}

000d7c88 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d7c88:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d7c8a:	7c00      	ldrb	r0, [r0, #16]
   d7c8c:	f7fd fccc 	bl	d5628 <hal_usart_available>
}
   d7c90:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7c94:	bd08      	pop	{r3, pc}

000d7c96 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d7c96:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d7c98:	7c00      	ldrb	r0, [r0, #16]
   d7c9a:	f7fd fcd5 	bl	d5648 <hal_usart_peek>
}
   d7c9e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7ca2:	bd08      	pop	{r3, pc}

000d7ca4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d7ca4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d7ca6:	7c00      	ldrb	r0, [r0, #16]
   d7ca8:	f7fd fcc6 	bl	d5638 <hal_usart_read>
}
   d7cac:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7cb0:	bd08      	pop	{r3, pc}

000d7cb2 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d7cb2:	7c00      	ldrb	r0, [r0, #16]
   d7cb4:	f7fd bcd0 	b.w	d5658 <hal_usart_flush>

000d7cb8 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7cb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7cba:	7c45      	ldrb	r5, [r0, #17]
{
   d7cbc:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7cbe:	b12d      	cbz	r5, d7ccc <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d7cc0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d7cc2:	b003      	add	sp, #12
   d7cc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d7cc8:	f7fd bca6 	b.w	d5618 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7ccc:	7c00      	ldrb	r0, [r0, #16]
   d7cce:	9101      	str	r1, [sp, #4]
   d7cd0:	f7fd fcd2 	bl	d5678 <hal_usart_available_data_for_write>
   d7cd4:	2800      	cmp	r0, #0
   d7cd6:	9901      	ldr	r1, [sp, #4]
   d7cd8:	dcf2      	bgt.n	d7cc0 <_ZN11USARTSerial5writeEh+0x8>
}
   d7cda:	4628      	mov	r0, r5
   d7cdc:	b003      	add	sp, #12
   d7cde:	bd30      	pop	{r4, r5, pc}

000d7ce0 <_ZN11USARTSerialD0Ev>:
   d7ce0:	b510      	push	{r4, lr}
   d7ce2:	2114      	movs	r1, #20
   d7ce4:	4604      	mov	r4, r0
   d7ce6:	f000 fd54 	bl	d8792 <_ZdlPvj>
   d7cea:	4620      	mov	r0, r4
   d7cec:	bd10      	pop	{r4, pc}
	...

000d7cf0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d7cf0:	b510      	push	{r4, lr}
   d7cf2:	f04f 0c00 	mov.w	ip, #0
   d7cf6:	4604      	mov	r4, r0
   d7cf8:	4608      	mov	r0, r1
   d7cfa:	4611      	mov	r1, r2
   d7cfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7d00:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d7d04:	4a04      	ldr	r2, [pc, #16]	; (d7d18 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d7d06:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d7d08:	2201      	movs	r2, #1
  _serial = serial;
   d7d0a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7d0c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d7d0e:	461a      	mov	r2, r3
   d7d10:	f7fd fc7a 	bl	d5608 <hal_usart_init>
}
   d7d14:	4620      	mov	r0, r4
   d7d16:	bd10      	pop	{r4, pc}
   d7d18:	000d9c78 	.word	0x000d9c78

000d7d1c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7d1c:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7d1e:	4c0e      	ldr	r4, [pc, #56]	; (d7d58 <_Z22__fetch_global_Serial1v+0x3c>)
   d7d20:	7821      	ldrb	r1, [r4, #0]
   d7d22:	f3bf 8f5b 	dmb	ish
   d7d26:	f011 0101 	ands.w	r1, r1, #1
   d7d2a:	d112      	bne.n	d7d52 <_Z22__fetch_global_Serial1v+0x36>
   d7d2c:	4620      	mov	r0, r4
   d7d2e:	9101      	str	r1, [sp, #4]
   d7d30:	f7fc f9b7 	bl	d40a2 <__cxa_guard_acquire>
   d7d34:	9901      	ldr	r1, [sp, #4]
   d7d36:	b160      	cbz	r0, d7d52 <_Z22__fetch_global_Serial1v+0x36>
   d7d38:	4a08      	ldr	r2, [pc, #32]	; (d7d5c <_Z22__fetch_global_Serial1v+0x40>)
   d7d3a:	4b09      	ldr	r3, [pc, #36]	; (d7d60 <_Z22__fetch_global_Serial1v+0x44>)
   d7d3c:	4809      	ldr	r0, [pc, #36]	; (d7d64 <_Z22__fetch_global_Serial1v+0x48>)
   d7d3e:	f7ff ffd7 	bl	d7cf0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d7d42:	4620      	mov	r0, r4
   d7d44:	f7fc f9b2 	bl	d40ac <__cxa_guard_release>
   d7d48:	4a07      	ldr	r2, [pc, #28]	; (d7d68 <_Z22__fetch_global_Serial1v+0x4c>)
   d7d4a:	4908      	ldr	r1, [pc, #32]	; (d7d6c <_Z22__fetch_global_Serial1v+0x50>)
   d7d4c:	4805      	ldr	r0, [pc, #20]	; (d7d64 <_Z22__fetch_global_Serial1v+0x48>)
   d7d4e:	f000 fd1b 	bl	d8788 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7d52:	4804      	ldr	r0, [pc, #16]	; (d7d64 <_Z22__fetch_global_Serial1v+0x48>)
   d7d54:	b002      	add	sp, #8
   d7d56:	bd10      	pop	{r4, pc}
   d7d58:	2003e6a4 	.word	0x2003e6a4
   d7d5c:	2003e6a8 	.word	0x2003e6a8
   d7d60:	2003e72c 	.word	0x2003e72c
   d7d64:	2003e7b0 	.word	0x2003e7b0
   d7d68:	2003e0dc 	.word	0x2003e0dc
   d7d6c:	000d7c75 	.word	0x000d7c75

000d7d70 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d7d70:	4770      	bx	lr

000d7d72 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d7d72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7d74:	4606      	mov	r6, r0
   d7d76:	4615      	mov	r5, r2
   d7d78:	460c      	mov	r4, r1
   d7d7a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7d7c:	42bc      	cmp	r4, r7
   d7d7e:	d006      	beq.n	d7d8e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d7d80:	6833      	ldr	r3, [r6, #0]
   d7d82:	f814 1b01 	ldrb.w	r1, [r4], #1
   d7d86:	689b      	ldr	r3, [r3, #8]
   d7d88:	4630      	mov	r0, r6
   d7d8a:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d7d8c:	e7f6      	b.n	d7d7c <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d7d8e:	4628      	mov	r0, r5
   d7d90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7d92 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d7d92:	7c00      	ldrb	r0, [r0, #16]
   d7d94:	2200      	movs	r2, #0
   d7d96:	f7fd bc97 	b.w	d56c8 <hal_i2c_write>

000d7d9a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d7d9a:	7c00      	ldrb	r0, [r0, #16]
   d7d9c:	2100      	movs	r1, #0
   d7d9e:	f7fd bc9b 	b.w	d56d8 <hal_i2c_available>

000d7da2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d7da2:	7c00      	ldrb	r0, [r0, #16]
   d7da4:	2100      	movs	r1, #0
   d7da6:	f7fd bc9f 	b.w	d56e8 <hal_i2c_read>

000d7daa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d7daa:	7c00      	ldrb	r0, [r0, #16]
   d7dac:	2100      	movs	r1, #0
   d7dae:	f7fd bca3 	b.w	d56f8 <hal_i2c_peek>

000d7db2 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d7db2:	7c00      	ldrb	r0, [r0, #16]
   d7db4:	2100      	movs	r1, #0
   d7db6:	f7fd bca7 	b.w	d5708 <hal_i2c_flush>

000d7dba <_ZN7TwoWireD0Ev>:
   d7dba:	b510      	push	{r4, lr}
   d7dbc:	2114      	movs	r1, #20
   d7dbe:	4604      	mov	r4, r0
   d7dc0:	f000 fce7 	bl	d8792 <_ZdlPvj>
   d7dc4:	4620      	mov	r0, r4
   d7dc6:	bd10      	pop	{r4, pc}

000d7dc8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d7dc8:	b510      	push	{r4, lr}
   d7dca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7dce:	4604      	mov	r4, r0
   d7dd0:	4608      	mov	r0, r1
   d7dd2:	2100      	movs	r1, #0
   d7dd4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7dd8:	4b03      	ldr	r3, [pc, #12]	; (d7de8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d7dda:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d7ddc:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d7dde:	4611      	mov	r1, r2
   d7de0:	f7fd fca2 	bl	d5728 <hal_i2c_init>
}
   d7de4:	4620      	mov	r0, r4
   d7de6:	bd10      	pop	{r4, pc}
   d7de8:	000d9ca8 	.word	0x000d9ca8

000d7dec <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7dec:	2300      	movs	r3, #0
   d7dee:	7c00      	ldrb	r0, [r0, #16]
   d7df0:	461a      	mov	r2, r3
   d7df2:	4619      	mov	r1, r3
   d7df4:	f7fd bc48 	b.w	d5688 <hal_i2c_begin>

000d7df8 <_ZN7TwoWire3endEv>:
	hal_i2c_end(_i2c, NULL);
   d7df8:	7c00      	ldrb	r0, [r0, #16]
   d7dfa:	2100      	movs	r1, #0
   d7dfc:	f7fd bc4c 	b.w	d5698 <hal_i2c_end>

000d7e00 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d7e00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d7e02:	2200      	movs	r2, #0
   d7e04:	2314      	movs	r3, #20
   d7e06:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d7e0a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d7e0e:	780b      	ldrb	r3, [r1, #0]
   d7e10:	f88d 3008 	strb.w	r3, [sp, #8]
   d7e14:	684b      	ldr	r3, [r1, #4]
   d7e16:	9303      	str	r3, [sp, #12]
   d7e18:	68cb      	ldr	r3, [r1, #12]
   d7e1a:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d7e1c:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d7e1e:	7a0b      	ldrb	r3, [r1, #8]
   d7e20:	9305      	str	r3, [sp, #20]
   d7e22:	a901      	add	r1, sp, #4
   d7e24:	f7fd fc88 	bl	d5738 <hal_i2c_request_ex>
}
   d7e28:	b007      	add	sp, #28
   d7e2a:	f85d fb04 	ldr.w	pc, [sp], #4

000d7e2e <_ZN7TwoWire11requestFromEhjh>:
{
   d7e2e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d7e30:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d7e32:	f88d 1000 	strb.w	r1, [sp]
   d7e36:	f04f 0164 	mov.w	r1, #100	; 0x64
   d7e3a:	9103      	str	r1, [sp, #12]
   d7e3c:	bf18      	it	ne
   d7e3e:	2301      	movne	r3, #1
   d7e40:	4669      	mov	r1, sp
    size_ = size;
   d7e42:	9201      	str	r2, [sp, #4]
   d7e44:	f88d 3008 	strb.w	r3, [sp, #8]
   d7e48:	f7ff ffda 	bl	d7e00 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d7e4c:	b005      	add	sp, #20
   d7e4e:	f85d fb04 	ldr.w	pc, [sp], #4

000d7e52 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d7e52:	2301      	movs	r3, #1
   d7e54:	f7ff bfeb 	b.w	d7e2e <_ZN7TwoWire11requestFromEhjh>

000d7e58 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d7e58:	7c00      	ldrb	r0, [r0, #16]
   d7e5a:	2200      	movs	r2, #0
   d7e5c:	f7fd bc24 	b.w	d56a8 <hal_i2c_begin_transmission>

000d7e60 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d7e60:	b2c9      	uxtb	r1, r1
   d7e62:	f7ff bff9 	b.w	d7e58 <_ZN7TwoWire17beginTransmissionEh>

000d7e66 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d7e66:	7c00      	ldrb	r0, [r0, #16]
   d7e68:	2200      	movs	r2, #0
   d7e6a:	f7fd bc25 	b.w	d56b8 <hal_i2c_end_transmission>

000d7e6e <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d7e6e:	2101      	movs	r1, #1
   d7e70:	f7ff bff9 	b.w	d7e66 <_ZN7TwoWire15endTransmissionEh>

000d7e74 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d7e74:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7e76:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d7e78:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7e7c:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d7e7e:	2201      	movs	r2, #1
   d7e80:	f04f 33ff 	mov.w	r3, #4294967295
   d7e84:	f10d 0107 	add.w	r1, sp, #7
   d7e88:	47a0      	blx	r4
}
   d7e8a:	b002      	add	sp, #8
   d7e8c:	bd10      	pop	{r4, pc}

000d7e8e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d7e8e:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7e90:	6803      	ldr	r3, [r0, #0]
   d7e92:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d7e94:	f04f 33ff 	mov.w	r3, #4294967295
   d7e98:	46a4      	mov	ip, r4
}
   d7e9a:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7e9e:	4760      	bx	ip

000d7ea0 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7ea0:	b513      	push	{r0, r1, r4, lr}
   d7ea2:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d7ea4:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7ea6:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d7eaa:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d7eac:	f10d 0107 	add.w	r1, sp, #7
   d7eb0:	2201      	movs	r2, #1
   d7eb2:	47a0      	blx	r4
}
   d7eb4:	b002      	add	sp, #8
   d7eb6:	bd10      	pop	{r4, pc}

000d7eb8 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d7eb8:	4770      	bx	lr

000d7eba <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d7eba:	b538      	push	{r3, r4, r5, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7ebc:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d7ebe:	681a      	ldr	r2, [r3, #0]
   d7ec0:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d7ec2:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d7ec4:	da10      	bge.n	d7ee8 <_ZN9TCPClient9connectedEv+0x2e>
   d7ec6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7eca:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7ece:	429a      	cmp	r2, r3
   d7ed0:	d10a      	bne.n	d7ee8 <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d7ed2:	6803      	ldr	r3, [r0, #0]
   d7ed4:	691b      	ldr	r3, [r3, #16]
   d7ed6:	4798      	blx	r3
        if (!rv) {
   d7ed8:	4604      	mov	r4, r0
   d7eda:	b928      	cbnz	r0, d7ee8 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d7edc:	682b      	ldr	r3, [r5, #0]
   d7ede:	4628      	mov	r0, r5
   d7ee0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7ee2:	4798      	blx	r3
        rv = available();
   d7ee4:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d7ee6:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d7ee8:	2001      	movs	r0, #1
   d7eea:	e7fc      	b.n	d7ee6 <_ZN9TCPClient9connectedEv+0x2c>

000d7eec <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d7eec:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d7eee:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d7ef0:	43c0      	mvns	r0, r0
   d7ef2:	0fc0      	lsrs	r0, r0, #31
   d7ef4:	4770      	bx	lr

000d7ef6 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d7ef6:	4770      	bx	lr

000d7ef8 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d7ef8:	4b06      	ldr	r3, [pc, #24]	; (d7f14 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d7efa:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d7efc:	b510      	push	{r4, lr}
   d7efe:	f100 040c 	add.w	r4, r0, #12
	    ||
   d7f02:	d005      	beq.n	d7f10 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d7f04:	4608      	mov	r0, r1
   d7f06:	f000 fc4d 	bl	d87a4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d7f0a:	2800      	cmp	r0, #0
	return nullptr;
   d7f0c:	bf08      	it	eq
   d7f0e:	2400      	moveq	r4, #0
      }
   d7f10:	4620      	mov	r0, r4
   d7f12:	bd10      	pop	{r4, pc}
   d7f14:	000d9bc8 	.word	0x000d9bc8

000d7f18 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d7f18:	b510      	push	{r4, lr}
   d7f1a:	21ac      	movs	r1, #172	; 0xac
   d7f1c:	4604      	mov	r4, r0
   d7f1e:	f000 fc38 	bl	d8792 <_ZdlPvj>
   d7f22:	4620      	mov	r0, r4
   d7f24:	bd10      	pop	{r4, pc}

000d7f26 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	::operator delete(__p);
   d7f26:	f7fc b8ba 	b.w	d409e <_ZdlPv>

000d7f2a <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d7f2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d7f2e:	f04f 0800 	mov.w	r8, #0
   d7f32:	b086      	sub	sp, #24
   d7f34:	461d      	mov	r5, r3
   d7f36:	f8c0 8004 	str.w	r8, [r0, #4]
   d7f3a:	4604      	mov	r4, r0
   d7f3c:	460e      	mov	r6, r1
   d7f3e:	4617      	mov	r7, r2
    struct timeval tv = {};
   d7f40:	4641      	mov	r1, r8
   d7f42:	2210      	movs	r2, #16
   d7f44:	a802      	add	r0, sp, #8
   d7f46:	f001 fa9f 	bl	d9488 <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d7f4a:	1c6b      	adds	r3, r5, #1
   d7f4c:	d009      	beq.n	d7f62 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d7f4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d7f52:	fbb5 f3f0 	udiv	r3, r5, r0
   d7f56:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d7f5a:	fb00 5313 	mls	r3, r0, r3, r5
   d7f5e:	4358      	muls	r0, r3
   d7f60:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d7f62:	6960      	ldr	r0, [r4, #20]
   d7f64:	2310      	movs	r3, #16
   d7f66:	9300      	str	r3, [sp, #0]
   d7f68:	6800      	ldr	r0, [r0, #0]
   d7f6a:	ab02      	add	r3, sp, #8
   d7f6c:	f241 0205 	movw	r2, #4101	; 0x1005
   d7f70:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7f74:	f7fd fbe8 	bl	d5748 <sock_setsockopt>
    if (ret < 0) {
   d7f78:	2800      	cmp	r0, #0
   d7f7a:	da07      	bge.n	d7f8c <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d7f7c:	f7fd fd9a 	bl	d5ab4 <__errno>
   d7f80:	6803      	ldr	r3, [r0, #0]
   d7f82:	6063      	str	r3, [r4, #4]
        return 0;
   d7f84:	2000      	movs	r0, #0
}
   d7f86:	b006      	add	sp, #24
   d7f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d7f8c:	6960      	ldr	r0, [r4, #20]
   d7f8e:	2300      	movs	r3, #0
   d7f90:	6800      	ldr	r0, [r0, #0]
   d7f92:	463a      	mov	r2, r7
   d7f94:	4631      	mov	r1, r6
   d7f96:	f7fd fbf7 	bl	d5788 <sock_send>
    if (ret < 0) {
   d7f9a:	1e03      	subs	r3, r0, #0
   d7f9c:	dbee      	blt.n	d7f7c <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d7f9e:	4618      	mov	r0, r3
   d7fa0:	e7f1      	b.n	d7f86 <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d7fa4 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d7fa4:	b538      	push	{r3, r4, r5, lr}
	if (_M_pi != nullptr)
   d7fa6:	6984      	ldr	r4, [r0, #24]
   d7fa8:	4b0a      	ldr	r3, [pc, #40]	; (d7fd4 <_ZN9TCPClientD1Ev+0x30>)
   d7faa:	6003      	str	r3, [r0, #0]
   d7fac:	4605      	mov	r5, r0
   d7fae:	b17c      	cbz	r4, d7fd0 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d7fb0:	6863      	ldr	r3, [r4, #4]
   d7fb2:	3b01      	subs	r3, #1
   d7fb4:	6063      	str	r3, [r4, #4]
   d7fb6:	b95b      	cbnz	r3, d7fd0 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d7fb8:	6823      	ldr	r3, [r4, #0]
   d7fba:	4620      	mov	r0, r4
   d7fbc:	689b      	ldr	r3, [r3, #8]
   d7fbe:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d7fc0:	68a3      	ldr	r3, [r4, #8]
   d7fc2:	3b01      	subs	r3, #1
   d7fc4:	60a3      	str	r3, [r4, #8]
   d7fc6:	b91b      	cbnz	r3, d7fd0 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d7fc8:	6823      	ldr	r3, [r4, #0]
   d7fca:	4620      	mov	r0, r4
   d7fcc:	68db      	ldr	r3, [r3, #12]
   d7fce:	4798      	blx	r3
   d7fd0:	4628      	mov	r0, r5
   d7fd2:	bd38      	pop	{r3, r4, r5, pc}
   d7fd4:	000d9cfc 	.word	0x000d9cfc

000d7fd8 <_ZN9TCPClientD0Ev>:
   d7fd8:	b510      	push	{r4, lr}
   d7fda:	4604      	mov	r4, r0
   d7fdc:	f7ff ffe2 	bl	d7fa4 <_ZN9TCPClientD1Ev>
   d7fe0:	4620      	mov	r0, r4
   d7fe2:	211c      	movs	r1, #28
   d7fe4:	f000 fbd5 	bl	d8792 <_ZdlPvj>
   d7fe8:	4620      	mov	r0, r4
   d7fea:	bd10      	pop	{r4, pc}

000d7fec <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d7fec:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d7fee:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d7ff0:	4b05      	ldr	r3, [pc, #20]	; (d8008 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d7ff2:	4604      	mov	r4, r0
   d7ff4:	358c      	adds	r5, #140	; 0x8c
   d7ff6:	f844 3b04 	str.w	r3, [r4], #4
   d7ffa:	4606      	mov	r6, r0
   d7ffc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8000:	682b      	ldr	r3, [r5, #0]
   d8002:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d8004:	4630      	mov	r0, r6
   d8006:	bd70      	pop	{r4, r5, r6, pc}
   d8008:	000d9c34 	.word	0x000d9c34

000d800c <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d800c:	b510      	push	{r4, lr}
   d800e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d8010:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8014:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8018:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d801a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d801c:	d005      	beq.n	d802a <_ZN9TCPClient4peekEv+0x1e>
   d801e:	6963      	ldr	r3, [r4, #20]
   d8020:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d8024:	4413      	add	r3, r2
   d8026:	7918      	ldrb	r0, [r3, #4]
}
   d8028:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d802a:	6803      	ldr	r3, [r0, #0]
   d802c:	691b      	ldr	r3, [r3, #16]
   d802e:	4798      	blx	r3
   d8030:	2800      	cmp	r0, #0
   d8032:	d1f4      	bne.n	d801e <_ZN9TCPClient4peekEv+0x12>
   d8034:	f04f 30ff 	mov.w	r0, #4294967295
   d8038:	e7f6      	b.n	d8028 <_ZN9TCPClient4peekEv+0x1c>

000d803a <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d803a:	b510      	push	{r4, lr}
   d803c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d803e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8042:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d8046:	429a      	cmp	r2, r3
int TCPClient::read() {
   d8048:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d804a:	d008      	beq.n	d805e <_ZN9TCPClient4readEv+0x24>
   d804c:	6963      	ldr	r3, [r4, #20]
   d804e:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d8052:	1c51      	adds	r1, r2, #1
   d8054:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d8058:	4413      	add	r3, r2
   d805a:	7918      	ldrb	r0, [r3, #4]
}
   d805c:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d805e:	6803      	ldr	r3, [r0, #0]
   d8060:	691b      	ldr	r3, [r3, #16]
   d8062:	4798      	blx	r3
   d8064:	2800      	cmp	r0, #0
   d8066:	d1f1      	bne.n	d804c <_ZN9TCPClient4readEv+0x12>
   d8068:	f04f 30ff 	mov.w	r0, #4294967295
   d806c:	e7f6      	b.n	d805c <_ZN9TCPClient4readEv+0x22>

000d806e <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d806e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8070:	6943      	ldr	r3, [r0, #20]
   d8072:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d8074:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8078:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d807c:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d807e:	4605      	mov	r5, r0
   d8080:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d8082:	d016      	beq.n	d80b2 <_ZN9TCPClient4readEPhj+0x44>
   d8084:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d8086:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d808a:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d808e:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d8090:	42bc      	cmp	r4, r7
   d8092:	bf28      	it	cs
   d8094:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d8096:	3304      	adds	r3, #4
   d8098:	4622      	mov	r2, r4
   d809a:	4419      	add	r1, r3
   d809c:	4630      	mov	r0, r6
   d809e:	f001 f9cb 	bl	d9438 <memcpy>
   d80a2:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d80a4:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d80a8:	4423      	add	r3, r4
   d80aa:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d80ae:	4620      	mov	r0, r4
   d80b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d80b2:	6803      	ldr	r3, [r0, #0]
   d80b4:	691b      	ldr	r3, [r3, #16]
   d80b6:	4798      	blx	r3
   d80b8:	2800      	cmp	r0, #0
   d80ba:	d1e3      	bne.n	d8084 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d80bc:	f04f 34ff 	mov.w	r4, #4294967295
   d80c0:	e7f5      	b.n	d80ae <_ZN9TCPClient4readEPhj+0x40>

000d80c2 <_ZN9TCPClient12flush_bufferEv>:
   d80c2:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d80c4:	2300      	movs	r3, #0
   d80c6:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d80ca:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d80cc:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d80d0:	4770      	bx	lr

000d80d2 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d80d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d80d6:	461f      	mov	r7, r3
    stop();
   d80d8:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d80da:	460c      	mov	r4, r1
    stop();
   d80dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d80de:	b08a      	sub	sp, #40	; 0x28
   d80e0:	4605      	mov	r5, r0
   d80e2:	4616      	mov	r6, r2
    stop();
   d80e4:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d80e6:	7d23      	ldrb	r3, [r4, #20]
   d80e8:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d80ec:	2b04      	cmp	r3, #4
   d80ee:	bf0c      	ite	eq
   d80f0:	2002      	moveq	r0, #2
   d80f2:	200a      	movne	r0, #10
   d80f4:	2206      	movs	r2, #6
   d80f6:	2101      	movs	r1, #1
   d80f8:	f7fd fb4e 	bl	d5798 <sock_socket>
   d80fc:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d8100:	696b      	ldr	r3, [r5, #20]
   d8102:	681b      	ldr	r3, [r3, #0]
   d8104:	2b00      	cmp	r3, #0
   d8106:	da08      	bge.n	d811a <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d8108:	682b      	ldr	r3, [r5, #0]
   d810a:	4628      	mov	r0, r5
   d810c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d810e:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d8110:	4798      	blx	r3
}
   d8112:	4620      	mov	r0, r4
   d8114:	b00a      	add	sp, #40	; 0x28
   d8116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d811a:	4628      	mov	r0, r5
   d811c:	f7ff ffd1 	bl	d80c2 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d8120:	b1b7      	cbz	r7, d8150 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d8122:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d8124:	a903      	add	r1, sp, #12
   d8126:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d8128:	9303      	str	r3, [sp, #12]
   d812a:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d812e:	f7fd f9a9 	bl	d5484 <if_index_to_name>
   d8132:	2800      	cmp	r0, #0
   d8134:	d1e8      	bne.n	d8108 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d8136:	6968      	ldr	r0, [r5, #20]
   d8138:	2306      	movs	r3, #6
   d813a:	9300      	str	r3, [sp, #0]
   d813c:	6800      	ldr	r0, [r0, #0]
   d813e:	ab03      	add	r3, sp, #12
   d8140:	f241 020b 	movw	r2, #4107	; 0x100b
   d8144:	f640 71ff 	movw	r1, #4095	; 0xfff
   d8148:	f7fd fafe 	bl	d5748 <sock_setsockopt>
   d814c:	2800      	cmp	r0, #0
   d814e:	d1db      	bne.n	d8108 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d8150:	221c      	movs	r2, #28
   d8152:	2100      	movs	r1, #0
   d8154:	a803      	add	r0, sp, #12
   d8156:	f001 f997 	bl	d9488 <memset>
    if (ip.version() == 4) {
   d815a:	7d23      	ldrb	r3, [r4, #20]
   d815c:	2b04      	cmp	r3, #4
   d815e:	d11d      	bne.n	d819c <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d8160:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d8164:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d8166:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d816a:	f7fd fa45 	bl	d55f8 <inet_htons>
   d816e:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d8172:	6860      	ldr	r0, [r4, #4]
   d8174:	f7fd fa38 	bl	d55e8 <inet_htonl>
   d8178:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d817a:	696b      	ldr	r3, [r5, #20]
   d817c:	221c      	movs	r2, #28
   d817e:	6818      	ldr	r0, [r3, #0]
   d8180:	a903      	add	r1, sp, #12
   d8182:	f7fd faf1 	bl	d5768 <sock_connect>
   d8186:	2800      	cmp	r0, #0
   d8188:	d1be      	bne.n	d8108 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d818a:	3404      	adds	r4, #4
   d818c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d818e:	696d      	ldr	r5, [r5, #20]
   d8190:	358c      	adds	r5, #140	; 0x8c
   d8192:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d8194:	6823      	ldr	r3, [r4, #0]
   d8196:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d8198:	2401      	movs	r4, #1
   d819a:	e7ba      	b.n	d8112 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d819c:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d81a0:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d81a2:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d81a6:	f7fd fa27 	bl	d55f8 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d81aa:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d81ac:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d81b0:	1d23      	adds	r3, r4, #4
   d81b2:	f104 0714 	add.w	r7, r4, #20
   d81b6:	6818      	ldr	r0, [r3, #0]
   d81b8:	6859      	ldr	r1, [r3, #4]
   d81ba:	4632      	mov	r2, r6
   d81bc:	c203      	stmia	r2!, {r0, r1}
   d81be:	3308      	adds	r3, #8
   d81c0:	42bb      	cmp	r3, r7
   d81c2:	4616      	mov	r6, r2
   d81c4:	d1f7      	bne.n	d81b6 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d81c6:	e7d8      	b.n	d817a <_ZN9TCPClient7connectE9IPAddresstm+0xa8>

000d81c8 <_ZN9TCPClient9availableEv>:
{
   d81c8:	b530      	push	{r4, r5, lr}
   d81ca:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d81cc:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d81d0:	b08b      	sub	sp, #44	; 0x2c
   d81d2:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d81d4:	b12b      	cbz	r3, d81e2 <_ZN9TCPClient9availableEv+0x1a>
   d81d6:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d81da:	429a      	cmp	r2, r3
   d81dc:	d101      	bne.n	d81e2 <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d81de:	f7ff ff70 	bl	d80c2 <_ZN9TCPClient12flush_bufferEv>
   d81e2:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d81e4:	6808      	ldr	r0, [r1, #0]
   d81e6:	2800      	cmp	r0, #0
   d81e8:	db18      	blt.n	d821c <_ZN9TCPClient9availableEv+0x54>
   d81ea:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d81ee:	2d7f      	cmp	r5, #127	; 0x7f
   d81f0:	d814      	bhi.n	d821c <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d81f2:	3104      	adds	r1, #4
   d81f4:	2308      	movs	r3, #8
   d81f6:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d81fa:	4429      	add	r1, r5
   d81fc:	f7fd fabc 	bl	d5778 <sock_recv>
            if (ret > 0) {
   d8200:	2800      	cmp	r0, #0
   d8202:	dd13      	ble.n	d822c <_ZN9TCPClient9availableEv+0x64>
   d8204:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d8206:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d820a:	b90a      	cbnz	r2, d8210 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d820c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d8210:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d8212:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d8216:	4410      	add	r0, r2
   d8218:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d821c:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d821e:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d8222:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d8226:	1ac0      	subs	r0, r0, r3
   d8228:	b00b      	add	sp, #44	; 0x2c
   d822a:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d822c:	f7fd fc42 	bl	d5ab4 <__errno>
   d8230:	6803      	ldr	r3, [r0, #0]
   d8232:	2b0b      	cmp	r3, #11
   d8234:	d0f2      	beq.n	d821c <_ZN9TCPClient9availableEv+0x54>
   d8236:	f7fd fc3d 	bl	d5ab4 <__errno>
   d823a:	6803      	ldr	r3, [r0, #0]
   d823c:	2b0b      	cmp	r3, #11
   d823e:	d0ed      	beq.n	d821c <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d8240:	2320      	movs	r3, #32
   d8242:	2500      	movs	r5, #0
   d8244:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d8248:	f7fd fc34 	bl	d5ab4 <__errno>
   d824c:	6803      	ldr	r3, [r0, #0]
   d824e:	9301      	str	r3, [sp, #4]
   d8250:	4b08      	ldr	r3, [pc, #32]	; (d8274 <_ZN9TCPClient9availableEv+0xac>)
   d8252:	4909      	ldr	r1, [pc, #36]	; (d8278 <_ZN9TCPClient9availableEv+0xb0>)
   d8254:	9300      	str	r3, [sp, #0]
   d8256:	aa02      	add	r2, sp, #8
   d8258:	462b      	mov	r3, r5
   d825a:	2032      	movs	r0, #50	; 0x32
   d825c:	f7fd fb34 	bl	d58c8 <log_message>
                    sock_close(d_->sock);
   d8260:	6963      	ldr	r3, [r4, #20]
   d8262:	6818      	ldr	r0, [r3, #0]
   d8264:	f7fd fa78 	bl	d5758 <sock_close>
   d8268:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d826a:	f04f 32ff 	mov.w	r2, #4294967295
   d826e:	601a      	str	r2, [r3, #0]
   d8270:	e7d4      	b.n	d821c <_ZN9TCPClient9availableEv+0x54>
   d8272:	bf00      	nop
   d8274:	000d9cc8 	.word	0x000d9cc8
   d8278:	000d9a50 	.word	0x000d9a50

000d827c <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d827c:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d827e:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d8280:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d8282:	6818      	ldr	r0, [r3, #0]
   d8284:	2800      	cmp	r0, #0
   d8286:	db01      	blt.n	d828c <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d8288:	f7fd fa66 	bl	d5758 <sock_close>
   d828c:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d828e:	f04f 32ff 	mov.w	r2, #4294967295
   d8292:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d8294:	6960      	ldr	r0, [r4, #20]
   d8296:	2211      	movs	r2, #17
   d8298:	2100      	movs	r1, #0
   d829a:	308c      	adds	r0, #140	; 0x8c
   d829c:	f001 f8f4 	bl	d9488 <memset>
    flush_buffer();
   d82a0:	4620      	mov	r0, r4
}
   d82a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d82a6:	f7ff bf0c 	b.w	d80c2 <_ZN9TCPClient12flush_bufferEv>

000d82aa <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d82aa:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d82ac:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d82ae:	4604      	mov	r4, r0
          total(0) {
   d82b0:	6001      	str	r1, [r0, #0]
   d82b2:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d82b6:	3088      	adds	r0, #136	; 0x88
   d82b8:	f7ff fc02 	bl	d7ac0 <_ZN9IPAddressC1Ev>
}
   d82bc:	4620      	mov	r0, r4
   d82be:	bd10      	pop	{r4, pc}

000d82c0 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d82c0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d82c2:	2300      	movs	r3, #0
   d82c4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d82c8:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d82cc:	4a0e      	ldr	r2, [pc, #56]	; (d8308 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d82ce:	6103      	str	r3, [r0, #16]
   d82d0:	6002      	str	r2, [r0, #0]
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d82d2:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d82d4:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d82d6:	20ac      	movs	r0, #172	; 0xac
   d82d8:	9101      	str	r1, [sp, #4]
   d82da:	f7fb fedc 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d82de:	1e05      	subs	r5, r0, #0
   d82e0:	f105 060c 	add.w	r6, r5, #12
   d82e4:	d008      	beq.n	d82f8 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d82e6:	2301      	movs	r3, #1
   d82e8:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d82ec:	4b07      	ldr	r3, [pc, #28]	; (d830c <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d82ee:	9901      	ldr	r1, [sp, #4]
   d82f0:	602b      	str	r3, [r5, #0]
   d82f2:	4630      	mov	r0, r6
   d82f4:	f7ff ffd9 	bl	d82aa <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d82f8:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d82fa:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d82fe:	f7ff fee0 	bl	d80c2 <_ZN9TCPClient12flush_bufferEv>
}
   d8302:	b002      	add	sp, #8
   d8304:	bd70      	pop	{r4, r5, r6, pc}
   d8306:	bf00      	nop
   d8308:	000d9cfc 	.word	0x000d9cfc
   d830c:	000d9ce0 	.word	0x000d9ce0

000d8310 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d8310:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d8312:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d8316:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d8318:	f7ff ffd2 	bl	d82c0 <_ZN9TCPClientC1Ei>
}
   d831c:	4620      	mov	r0, r4
   d831e:	bd10      	pop	{r4, pc}

000d8320 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d8320:	b510      	push	{r4, lr}
   d8322:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d8324:	6800      	ldr	r0, [r0, #0]
   d8326:	2800      	cmp	r0, #0
   d8328:	db01      	blt.n	d832e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d832a:	f7fd fa15 	bl	d5758 <sock_close>
    }
}
   d832e:	4620      	mov	r0, r4
   d8330:	bd10      	pop	{r4, pc}

000d8332 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d8332:	300c      	adds	r0, #12
   d8334:	f7ff bff4 	b.w	d8320 <_ZN9TCPClient4DataD1Ev>

000d8338 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8338:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d833c:	4698      	mov	r8, r3
    stop();
   d833e:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8340:	b093      	sub	sp, #76	; 0x4c
   d8342:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d8344:	2400      	movs	r4, #0
    stop();
   d8346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d8348:	4606      	mov	r6, r0
   d834a:	4617      	mov	r7, r2
    stop();
   d834c:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d834e:	4628      	mov	r0, r5
   d8350:	466b      	mov	r3, sp
   d8352:	4622      	mov	r2, r4
   d8354:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d8356:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d8358:	f7fd f86c 	bl	d5434 <netdb_getaddrinfo>
   d835c:	4605      	mov	r5, r0
   d835e:	2800      	cmp	r0, #0
   d8360:	d163      	bne.n	d842a <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d8362:	9b00      	ldr	r3, [sp, #0]
   d8364:	2b00      	cmp	r3, #0
   d8366:	d04b      	beq.n	d8400 <_ZN9TCPClient7connectEPKctm+0xc8>
   d8368:	695b      	ldr	r3, [r3, #20]
   d836a:	2b00      	cmp	r3, #0
   d836c:	d048      	beq.n	d8400 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d836e:	a806      	add	r0, sp, #24
   d8370:	f7ff fba6 	bl	d7ac0 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d8374:	9b00      	ldr	r3, [sp, #0]
   d8376:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d8378:	7863      	ldrb	r3, [r4, #1]
   d837a:	2b02      	cmp	r3, #2
   d837c:	d104      	bne.n	d8388 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d837e:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d8380:	a806      	add	r0, sp, #24
   d8382:	f7fd fdc9 	bl	d5f18 <_ZN9IPAddressaSIPKhEERS_T_>
        }
        if (port) {
   d8386:	e026      	b.n	d83d6 <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d8388:	2b0a      	cmp	r3, #10
   d838a:	d124      	bne.n	d83d6 <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d838c:	2211      	movs	r2, #17
   d838e:	4629      	mov	r1, r5
   d8390:	a801      	add	r0, sp, #4
   d8392:	f001 f879 	bl	d9488 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d8396:	68a3      	ldr	r3, [r4, #8]
   d8398:	2b00      	cmp	r3, #0
   d839a:	d038      	beq.n	d840e <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d839c:	f104 0308 	add.w	r3, r4, #8
   d83a0:	f10d 0c04 	add.w	ip, sp, #4
   d83a4:	3418      	adds	r4, #24
   d83a6:	6818      	ldr	r0, [r3, #0]
   d83a8:	6859      	ldr	r1, [r3, #4]
   d83aa:	4662      	mov	r2, ip
   d83ac:	c203      	stmia	r2!, {r0, r1}
   d83ae:	3308      	adds	r3, #8
   d83b0:	42a3      	cmp	r3, r4
   d83b2:	4694      	mov	ip, r2
   d83b4:	d1f7      	bne.n	d83a6 <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d83b6:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d83b8:	a901      	add	r1, sp, #4
   d83ba:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d83bc:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d83c0:	f7ff fb8c 	bl	d7adc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
class IPAddress : public Printable {
   d83c4:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d83c8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d83cc:	ac07      	add	r4, sp, #28
   d83ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d83d0:	f8dc 3000 	ldr.w	r3, [ip]
   d83d4:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d83d6:	a806      	add	r0, sp, #24
   d83d8:	f7ff fb92 	bl	d7b00 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d83dc:	b180      	cbz	r0, d8400 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d83de:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d83e0:	ad07      	add	r5, sp, #28
   d83e2:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d83e6:	4b12      	ldr	r3, [pc, #72]	; (d8430 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d83e8:	930c      	str	r3, [sp, #48]	; 0x30
   d83ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d83ec:	ac0d      	add	r4, sp, #52	; 0x34
   d83ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d83f0:	682b      	ldr	r3, [r5, #0]
   d83f2:	7023      	strb	r3, [r4, #0]
   d83f4:	463a      	mov	r2, r7
   d83f6:	4643      	mov	r3, r8
   d83f8:	a90c      	add	r1, sp, #48	; 0x30
   d83fa:	4630      	mov	r0, r6
   d83fc:	47c8      	blx	r9
   d83fe:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d8400:	9800      	ldr	r0, [sp, #0]
   d8402:	f7fd f80f 	bl	d5424 <netdb_freeaddrinfo>
}
   d8406:	4628      	mov	r0, r5
   d8408:	b013      	add	sp, #76	; 0x4c
   d840a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d840e:	68e3      	ldr	r3, [r4, #12]
   d8410:	2b00      	cmp	r3, #0
   d8412:	d1c3      	bne.n	d839c <_ZN9TCPClient7connectEPKctm+0x64>
   d8414:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d8418:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d841c:	f7fd f8e4 	bl	d55e8 <inet_htonl>
   d8420:	4581      	cmp	r9, r0
   d8422:	d1bb      	bne.n	d839c <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d8424:	f104 0114 	add.w	r1, r4, #20
   d8428:	e7aa      	b.n	d8380 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d842a:	4625      	mov	r5, r4
   d842c:	e7e8      	b.n	d8400 <_ZN9TCPClient7connectEPKctm+0xc8>
   d842e:	bf00      	nop
   d8430:	000d9c34 	.word	0x000d9c34

000d8434 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d8434:	2200      	movs	r2, #0
   d8436:	6840      	ldr	r0, [r0, #4]
   d8438:	4611      	mov	r1, r2
   d843a:	f7fd baa3 	b.w	d5984 <network_ready>

000d843e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d843e:	2200      	movs	r2, #0
   d8440:	6840      	ldr	r0, [r0, #4]
   d8442:	4611      	mov	r1, r2
   d8444:	f7fd babe 	b.w	d59c4 <network_listening>

000d8448 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d8448:	2200      	movs	r2, #0
   d844a:	6840      	ldr	r0, [r0, #4]
   d844c:	4611      	mov	r1, r2
   d844e:	f7fd bac9 	b.w	d59e4 <network_get_listen_timeout>

000d8452 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d8452:	6840      	ldr	r0, [r0, #4]
   d8454:	2200      	movs	r2, #0
   d8456:	f7fd babd 	b.w	d59d4 <network_set_listen_timeout>

000d845a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d845a:	6840      	ldr	r0, [r0, #4]
   d845c:	2200      	movs	r2, #0
   d845e:	f081 0101 	eor.w	r1, r1, #1
   d8462:	f7fd baa7 	b.w	d59b4 <network_listen>

000d8466 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d8466:	2300      	movs	r3, #0
   d8468:	6840      	ldr	r0, [r0, #4]
   d846a:	461a      	mov	r2, r3
   d846c:	4619      	mov	r1, r3
   d846e:	f7fd ba99 	b.w	d59a4 <network_off>

000d8472 <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d8472:	2200      	movs	r2, #0
   d8474:	6840      	ldr	r0, [r0, #4]
   d8476:	4611      	mov	r1, r2
   d8478:	f7fd ba74 	b.w	d5964 <network_connecting>

000d847c <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d847c:	6840      	ldr	r0, [r0, #4]
   d847e:	2200      	movs	r2, #0
   d8480:	2102      	movs	r1, #2
   d8482:	f7fd ba77 	b.w	d5974 <network_disconnect>

000d8486 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d8486:	2300      	movs	r3, #0
   d8488:	6840      	ldr	r0, [r0, #4]
   d848a:	461a      	mov	r2, r3
   d848c:	f7fd ba62 	b.w	d5954 <network_connect>

000d8490 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d8490:	4b02      	ldr	r3, [pc, #8]	; (d849c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d8492:	2204      	movs	r2, #4
   d8494:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d8496:	4a02      	ldr	r2, [pc, #8]	; (d84a0 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d8498:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d849a:	4770      	bx	lr
   d849c:	2003e7c4 	.word	0x2003e7c4
   d84a0:	000d9d48 	.word	0x000d9d48

000d84a4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d84a4:	2300      	movs	r3, #0
   d84a6:	6840      	ldr	r0, [r0, #4]
   d84a8:	461a      	mov	r2, r3
   d84aa:	f7fd ba53 	b.w	d5954 <network_connect>

000d84ae <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d84ae:	6840      	ldr	r0, [r0, #4]
   d84b0:	2200      	movs	r2, #0
   d84b2:	2102      	movs	r1, #2
   d84b4:	f7fd ba5e 	b.w	d5974 <network_disconnect>

000d84b8 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d84b8:	2200      	movs	r2, #0
   d84ba:	6840      	ldr	r0, [r0, #4]
   d84bc:	4611      	mov	r1, r2
   d84be:	f7fd ba51 	b.w	d5964 <network_connecting>

000d84c2 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d84c2:	2200      	movs	r2, #0
   d84c4:	6840      	ldr	r0, [r0, #4]
   d84c6:	4611      	mov	r1, r2
   d84c8:	f7fd ba5c 	b.w	d5984 <network_ready>

000d84cc <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d84cc:	2300      	movs	r3, #0
   d84ce:	6840      	ldr	r0, [r0, #4]
   d84d0:	461a      	mov	r2, r3
   d84d2:	4619      	mov	r1, r3
   d84d4:	f7fd ba5e 	b.w	d5994 <network_on>

000d84d8 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d84d8:	2300      	movs	r3, #0
   d84da:	6840      	ldr	r0, [r0, #4]
   d84dc:	461a      	mov	r2, r3
   d84de:	4619      	mov	r1, r3
   d84e0:	f7fd ba60 	b.w	d59a4 <network_off>

000d84e4 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d84e4:	6840      	ldr	r0, [r0, #4]
   d84e6:	2100      	movs	r1, #0
   d84e8:	f7fd ba84 	b.w	d59f4 <network_is_on>

000d84ec <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d84ec:	6840      	ldr	r0, [r0, #4]
   d84ee:	2100      	movs	r1, #0
   d84f0:	f7fd ba88 	b.w	d5a04 <network_is_off>

000d84f4 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d84f4:	6840      	ldr	r0, [r0, #4]
   d84f6:	2200      	movs	r2, #0
   d84f8:	f081 0101 	eor.w	r1, r1, #1
   d84fc:	f7fd ba5a 	b.w	d59b4 <network_listen>

000d8500 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d8500:	6840      	ldr	r0, [r0, #4]
   d8502:	2200      	movs	r2, #0
   d8504:	f7fd ba66 	b.w	d59d4 <network_set_listen_timeout>

000d8508 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d8508:	2200      	movs	r2, #0
   d850a:	6840      	ldr	r0, [r0, #4]
   d850c:	4611      	mov	r1, r2
   d850e:	f7fd ba69 	b.w	d59e4 <network_get_listen_timeout>

000d8512 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d8512:	2200      	movs	r2, #0
   d8514:	6840      	ldr	r0, [r0, #4]
   d8516:	4611      	mov	r1, r2
   d8518:	f7fd ba54 	b.w	d59c4 <network_listening>

000d851c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d851c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d8520:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d8522:	b095      	sub	sp, #84	; 0x54
   d8524:	4616      	mov	r6, r2
   d8526:	460d      	mov	r5, r1
   d8528:	4607      	mov	r7, r0
    IPAddress addr;
   d852a:	f7ff fac9 	bl	d7ac0 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d852e:	4621      	mov	r1, r4
   d8530:	2218      	movs	r2, #24
   d8532:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d8534:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d8536:	f000 ffa7 	bl	d9488 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d853a:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d853c:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d8540:	4621      	mov	r1, r4
   d8542:	466b      	mov	r3, sp
   d8544:	aa0c      	add	r2, sp, #48	; 0x30
   d8546:	4630      	mov	r0, r6
   d8548:	f7fc ff74 	bl	d5434 <netdb_getaddrinfo>
    if (!r) {
   d854c:	4604      	mov	r4, r0
   d854e:	2800      	cmp	r0, #0
   d8550:	d14c      	bne.n	d85ec <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d8552:	4602      	mov	r2, r0
   d8554:	2101      	movs	r1, #1
   d8556:	6868      	ldr	r0, [r5, #4]
   d8558:	f7fd fa14 	bl	d5984 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d855c:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d855e:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d8560:	4622      	mov	r2, r4
   d8562:	6868      	ldr	r0, [r5, #4]
   d8564:	f7fd fa0e 	bl	d5984 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8568:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d856a:	4681      	mov	r9, r0
        bool ok = false;
   d856c:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d856e:	2e00      	cmp	r6, #0
   d8570:	d03c      	beq.n	d85ec <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d8572:	2900      	cmp	r1, #0
   d8574:	d13a      	bne.n	d85ec <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d8576:	6873      	ldr	r3, [r6, #4]
   d8578:	2b02      	cmp	r3, #2
   d857a:	d003      	beq.n	d8584 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d857c:	2b0a      	cmp	r3, #10
   d857e:	d011      	beq.n	d85a4 <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d8580:	69f6      	ldr	r6, [r6, #28]
   d8582:	e7f4      	b.n	d856e <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d8584:	f1b8 0f00 	cmp.w	r8, #0
   d8588:	d00a      	beq.n	d85a0 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d858a:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d858c:	a806      	add	r0, sp, #24
   d858e:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d8590:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d8592:	f7ff fad9 	bl	d7b48 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d8596:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d8598:	1d3c      	adds	r4, r7, #4
   d859a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d859c:	682b      	ldr	r3, [r5, #0]
   d859e:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d85a0:	4641      	mov	r1, r8
   d85a2:	e7ed      	b.n	d8580 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d85a4:	f1b9 0f00 	cmp.w	r9, #0
   d85a8:	d101      	bne.n	d85ae <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d85aa:	4649      	mov	r1, r9
   d85ac:	e7e8      	b.n	d8580 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d85ae:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d85b0:	2210      	movs	r2, #16
   d85b2:	a801      	add	r0, sp, #4
   d85b4:	f000 ff68 	bl	d9488 <memset>
                    a.v = 6;
   d85b8:	2306      	movs	r3, #6
   d85ba:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d85be:	ad01      	add	r5, sp, #4
   d85c0:	f104 0308 	add.w	r3, r4, #8
   d85c4:	3418      	adds	r4, #24
   d85c6:	6818      	ldr	r0, [r3, #0]
   d85c8:	6859      	ldr	r1, [r3, #4]
   d85ca:	462a      	mov	r2, r5
   d85cc:	c203      	stmia	r2!, {r0, r1}
   d85ce:	3308      	adds	r3, #8
   d85d0:	42a3      	cmp	r3, r4
   d85d2:	4615      	mov	r5, r2
   d85d4:	d1f7      	bne.n	d85c6 <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d85d6:	a901      	add	r1, sp, #4
   d85d8:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d85da:	ad07      	add	r5, sp, #28
   d85dc:	f7ff fa7e 	bl	d7adc <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d85e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d85e2:	1d3c      	adds	r4, r7, #4
   d85e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d85e6:	682b      	ldr	r3, [r5, #0]
   d85e8:	7023      	strb	r3, [r4, #0]
   d85ea:	e7de      	b.n	d85aa <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d85ec:	9800      	ldr	r0, [sp, #0]
   d85ee:	f7fc ff19 	bl	d5424 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d85f2:	4638      	mov	r0, r7
   d85f4:	b015      	add	sp, #84	; 0x54
   d85f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d85fc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d85fc:	4b02      	ldr	r3, [pc, #8]	; (d8608 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d85fe:	4a03      	ldr	r2, [pc, #12]	; (d860c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d8600:	601a      	str	r2, [r3, #0]
   d8602:	2200      	movs	r2, #0
   d8604:	605a      	str	r2, [r3, #4]

} // spark
   d8606:	4770      	bx	lr
   d8608:	2003e7cc 	.word	0x2003e7cc
   d860c:	000d9d84 	.word	0x000d9d84

000d8610 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d8610:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d8612:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d8614:	d902      	bls.n	d861c <pinAvailable+0xc>
    return false;
   d8616:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d8618:	b002      	add	sp, #8
   d861a:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d861c:	f1a0 030b 	sub.w	r3, r0, #11
   d8620:	2b02      	cmp	r3, #2
   d8622:	d81a      	bhi.n	d865a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d8624:	4c17      	ldr	r4, [pc, #92]	; (d8684 <pinAvailable+0x74>)
   d8626:	7821      	ldrb	r1, [r4, #0]
   d8628:	f3bf 8f5b 	dmb	ish
   d862c:	f011 0101 	ands.w	r1, r1, #1
   d8630:	d10b      	bne.n	d864a <pinAvailable+0x3a>
   d8632:	4620      	mov	r0, r4
   d8634:	9101      	str	r1, [sp, #4]
   d8636:	f7fb fd34 	bl	d40a2 <__cxa_guard_acquire>
   d863a:	9901      	ldr	r1, [sp, #4]
   d863c:	b128      	cbz	r0, d864a <pinAvailable+0x3a>
   d863e:	4812      	ldr	r0, [pc, #72]	; (d8688 <pinAvailable+0x78>)
   d8640:	f7fd fa8c 	bl	d5b5c <_ZN8SPIClassC1E19hal_spi_interface_t>
   d8644:	4620      	mov	r0, r4
   d8646:	f7fb fd31 	bl	d40ac <__cxa_guard_release>
   d864a:	4b0f      	ldr	r3, [pc, #60]	; (d8688 <pinAvailable+0x78>)
   d864c:	7818      	ldrb	r0, [r3, #0]
   d864e:	f7fd f8db 	bl	d5808 <hal_spi_is_enabled>
   d8652:	2800      	cmp	r0, #0
   d8654:	d1df      	bne.n	d8616 <pinAvailable+0x6>
  return true; // 'pin' is available
   d8656:	2001      	movs	r0, #1
   d8658:	e7de      	b.n	d8618 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d865a:	2801      	cmp	r0, #1
   d865c:	d809      	bhi.n	d8672 <pinAvailable+0x62>
   d865e:	f000 f86b 	bl	d8738 <_Z19__fetch_global_Wirev>
   d8662:	2100      	movs	r1, #0
   d8664:	7c00      	ldrb	r0, [r0, #16]
   d8666:	f7fd f857 	bl	d5718 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d866a:	f080 0001 	eor.w	r0, r0, #1
   d866e:	b2c0      	uxtb	r0, r0
   d8670:	e7d2      	b.n	d8618 <pinAvailable+0x8>
   d8672:	3809      	subs	r0, #9
   d8674:	2801      	cmp	r0, #1
   d8676:	d8ee      	bhi.n	d8656 <pinAvailable+0x46>
   d8678:	f7ff fb50 	bl	d7d1c <_Z22__fetch_global_Serial1v>
   d867c:	7c00      	ldrb	r0, [r0, #16]
   d867e:	f7fc fff3 	bl	d5668 <hal_usart_is_enabled>
   d8682:	e7f2      	b.n	d866a <pinAvailable+0x5a>
   d8684:	2003e638 	.word	0x2003e638
   d8688:	2003e63c 	.word	0x2003e63c

000d868c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d868c:	2823      	cmp	r0, #35	; 0x23
{
   d868e:	b538      	push	{r3, r4, r5, lr}
   d8690:	4604      	mov	r4, r0
   d8692:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8694:	d80a      	bhi.n	d86ac <pinMode+0x20>
   d8696:	29ff      	cmp	r1, #255	; 0xff
   d8698:	d008      	beq.n	d86ac <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d869a:	f7ff ffb9 	bl	d8610 <pinAvailable>
   d869e:	b128      	cbz	r0, d86ac <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d86a0:	4629      	mov	r1, r5
   d86a2:	4620      	mov	r0, r4
}
   d86a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d86a8:	f7fc becc 	b.w	d5444 <HAL_Pin_Mode>
}
   d86ac:	bd38      	pop	{r3, r4, r5, pc}

000d86ae <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d86ae:	b538      	push	{r3, r4, r5, lr}
   d86b0:	4604      	mov	r4, r0
   d86b2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d86b4:	f7fc fece 	bl	d5454 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d86b8:	28ff      	cmp	r0, #255	; 0xff
   d86ba:	d010      	beq.n	d86de <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d86bc:	2806      	cmp	r0, #6
   d86be:	d804      	bhi.n	d86ca <digitalWrite+0x1c>
   d86c0:	234d      	movs	r3, #77	; 0x4d
   d86c2:	fa23 f000 	lsr.w	r0, r3, r0
   d86c6:	07c3      	lsls	r3, r0, #31
   d86c8:	d409      	bmi.n	d86de <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d86ca:	4620      	mov	r0, r4
   d86cc:	f7ff ffa0 	bl	d8610 <pinAvailable>
   d86d0:	b128      	cbz	r0, d86de <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d86d2:	4629      	mov	r1, r5
   d86d4:	4620      	mov	r0, r4
}
   d86d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d86da:	f7fc bec3 	b.w	d5464 <HAL_GPIO_Write>
}
   d86de:	bd38      	pop	{r3, r4, r5, pc}

000d86e0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d86e0:	b510      	push	{r4, lr}
   d86e2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d86e4:	f7fc feb6 	bl	d5454 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d86e8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d86ea:	b2db      	uxtb	r3, r3
   d86ec:	2b01      	cmp	r3, #1
   d86ee:	d908      	bls.n	d8702 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d86f0:	4620      	mov	r0, r4
   d86f2:	f7ff ff8d 	bl	d8610 <pinAvailable>
   d86f6:	b120      	cbz	r0, d8702 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d86f8:	4620      	mov	r0, r4
}
   d86fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d86fe:	f7fc beb9 	b.w	d5474 <HAL_GPIO_Read>
}
   d8702:	2000      	movs	r0, #0
   d8704:	bd10      	pop	{r4, pc}
	...

000d8708 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d8708:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d870a:	2300      	movs	r3, #0
   d870c:	2520      	movs	r5, #32
   d870e:	8043      	strh	r3, [r0, #2]
   d8710:	2314      	movs	r3, #20
{
   d8712:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d8714:	8003      	strh	r3, [r0, #0]
   d8716:	6085      	str	r5, [r0, #8]
   d8718:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d871a:	4906      	ldr	r1, [pc, #24]	; (d8734 <_Z17acquireWireBufferv+0x2c>)
   d871c:	4628      	mov	r0, r5
   d871e:	f000 f83c 	bl	d879a <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8722:	4904      	ldr	r1, [pc, #16]	; (d8734 <_Z17acquireWireBufferv+0x2c>)
	};
   d8724:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d8726:	4628      	mov	r0, r5
   d8728:	f000 f837 	bl	d879a <_ZnajRKSt9nothrow_t>
	};
   d872c:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d872e:	4620      	mov	r0, r4
   d8730:	bd38      	pop	{r3, r4, r5, pc}
   d8732:	bf00      	nop
   d8734:	000d9db8 	.word	0x000d9db8

000d8738 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d8738:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d873a:	4d0f      	ldr	r5, [pc, #60]	; (d8778 <_Z19__fetch_global_Wirev+0x40>)
   d873c:	7829      	ldrb	r1, [r5, #0]
   d873e:	f3bf 8f5b 	dmb	ish
   d8742:	f011 0401 	ands.w	r4, r1, #1
{
   d8746:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d8748:	d113      	bne.n	d8772 <_Z19__fetch_global_Wirev+0x3a>
   d874a:	4628      	mov	r0, r5
   d874c:	f7fb fca9 	bl	d40a2 <__cxa_guard_acquire>
   d8750:	b178      	cbz	r0, d8772 <_Z19__fetch_global_Wirev+0x3a>
   d8752:	a801      	add	r0, sp, #4
   d8754:	f7ff ffd8 	bl	d8708 <_Z17acquireWireBufferv>
   d8758:	aa01      	add	r2, sp, #4
   d875a:	4621      	mov	r1, r4
   d875c:	4807      	ldr	r0, [pc, #28]	; (d877c <_Z19__fetch_global_Wirev+0x44>)
   d875e:	f7ff fb33 	bl	d7dc8 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d8762:	4628      	mov	r0, r5
   d8764:	f7fb fca2 	bl	d40ac <__cxa_guard_release>
   d8768:	4a05      	ldr	r2, [pc, #20]	; (d8780 <_Z19__fetch_global_Wirev+0x48>)
   d876a:	4906      	ldr	r1, [pc, #24]	; (d8784 <_Z19__fetch_global_Wirev+0x4c>)
   d876c:	4803      	ldr	r0, [pc, #12]	; (d877c <_Z19__fetch_global_Wirev+0x44>)
   d876e:	f000 f80b 	bl	d8788 <__aeabi_atexit>
	return wire;
}
   d8772:	4802      	ldr	r0, [pc, #8]	; (d877c <_Z19__fetch_global_Wirev+0x44>)
   d8774:	b007      	add	sp, #28
   d8776:	bd30      	pop	{r4, r5, pc}
   d8778:	2003e7d8 	.word	0x2003e7d8
   d877c:	2003e7dc 	.word	0x2003e7dc
   d8780:	2003e0dc 	.word	0x2003e0dc
   d8784:	000d7d71 	.word	0x000d7d71

000d8788 <__aeabi_atexit>:
   d8788:	460b      	mov	r3, r1
   d878a:	4601      	mov	r1, r0
   d878c:	4618      	mov	r0, r3
   d878e:	f000 be23 	b.w	d93d8 <__cxa_atexit>

000d8792 <_ZdlPvj>:
   d8792:	f7fb bc84 	b.w	d409e <_ZdlPv>

000d8796 <_ZnwjRKSt9nothrow_t>:
   d8796:	f7fb bc7e 	b.w	d4096 <_Znwj>

000d879a <_ZnajRKSt9nothrow_t>:
   d879a:	f7fb bc7e 	b.w	d409a <_Znaj>

000d879e <_ZSt25__throw_bad_function_callv>:
   d879e:	b508      	push	{r3, lr}
   d87a0:	f7fd f980 	bl	d5aa4 <abort>

000d87a4 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d87a4:	4901      	ldr	r1, [pc, #4]	; (d87ac <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d87a6:	f000 b8f9 	b.w	d899c <_ZNKSt9type_infoeqERKS_>
   d87aa:	bf00      	nop
   d87ac:	000d9dd4 	.word	0x000d9dd4

000d87b0 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d87b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d87b2:	2400      	movs	r4, #0
   d87b4:	2310      	movs	r3, #16
   d87b6:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d87ba:	6803      	ldr	r3, [r0, #0]
   d87bc:	9400      	str	r4, [sp, #0]
   d87be:	699e      	ldr	r6, [r3, #24]
   d87c0:	f88d 4004 	strb.w	r4, [sp, #4]
   d87c4:	4615      	mov	r5, r2
   d87c6:	466b      	mov	r3, sp
   d87c8:	6812      	ldr	r2, [r2, #0]
   d87ca:	47b0      	blx	r6
   d87cc:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d87d0:	f003 0306 	and.w	r3, r3, #6
   d87d4:	2b06      	cmp	r3, #6
   d87d6:	bf03      	ittte	eq
   d87d8:	9b00      	ldreq	r3, [sp, #0]
   d87da:	602b      	streq	r3, [r5, #0]
   d87dc:	2001      	moveq	r0, #1
   d87de:	4620      	movne	r0, r4
   d87e0:	b004      	add	sp, #16
   d87e2:	bd70      	pop	{r4, r5, r6, pc}

000d87e4 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d87e4:	9800      	ldr	r0, [sp, #0]
   d87e6:	4290      	cmp	r0, r2
   d87e8:	bf14      	ite	ne
   d87ea:	2001      	movne	r0, #1
   d87ec:	2006      	moveq	r0, #6
   d87ee:	4770      	bx	lr

000d87f0 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d87f0:	b510      	push	{r4, lr}
   d87f2:	4b03      	ldr	r3, [pc, #12]	; (d8800 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d87f4:	6003      	str	r3, [r0, #0]
   d87f6:	4604      	mov	r4, r0
   d87f8:	f000 f8cd 	bl	d8996 <_ZNSt9type_infoD1Ev>
   d87fc:	4620      	mov	r0, r4
   d87fe:	bd10      	pop	{r4, pc}
   d8800:	000d9e14 	.word	0x000d9e14

000d8804 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d8804:	b510      	push	{r4, lr}
   d8806:	4604      	mov	r4, r0
   d8808:	f7ff fff2 	bl	d87f0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d880c:	4620      	mov	r0, r4
   d880e:	2108      	movs	r1, #8
   d8810:	f7ff ffbf 	bl	d8792 <_ZdlPvj>
   d8814:	4620      	mov	r0, r4
   d8816:	bd10      	pop	{r4, pc}

000d8818 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d8818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d881c:	461f      	mov	r7, r3
   d881e:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d8822:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d8826:	4598      	cmp	r8, r3
   d8828:	4606      	mov	r6, r0
   d882a:	4615      	mov	r5, r2
   d882c:	d107      	bne.n	d883e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d882e:	9907      	ldr	r1, [sp, #28]
   d8830:	f000 f8b4 	bl	d899c <_ZNKSt9type_infoeqERKS_>
   d8834:	b118      	cbz	r0, d883e <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d8836:	7165      	strb	r5, [r4, #5]
   d8838:	2000      	movs	r0, #0
   d883a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d883e:	4639      	mov	r1, r7
   d8840:	4630      	mov	r0, r6
   d8842:	f000 f8ab 	bl	d899c <_ZNKSt9type_infoeqERKS_>
   d8846:	2800      	cmp	r0, #0
   d8848:	d0f6      	beq.n	d8838 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d884a:	2301      	movs	r3, #1
   d884c:	f8c4 8000 	str.w	r8, [r4]
   d8850:	7125      	strb	r5, [r4, #4]
   d8852:	71a3      	strb	r3, [r4, #6]
   d8854:	e7f0      	b.n	d8838 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d8856 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d8856:	b538      	push	{r3, r4, r5, lr}
   d8858:	4615      	mov	r5, r2
   d885a:	461c      	mov	r4, r3
   d885c:	f000 f89e 	bl	d899c <_ZNKSt9type_infoeqERKS_>
   d8860:	b120      	cbz	r0, d886c <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d8862:	2308      	movs	r3, #8
   d8864:	60e3      	str	r3, [r4, #12]
   d8866:	2306      	movs	r3, #6
   d8868:	6025      	str	r5, [r4, #0]
   d886a:	7123      	strb	r3, [r4, #4]
   d886c:	bd38      	pop	{r3, r4, r5, pc}

000d886e <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d886e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d8870:	4605      	mov	r5, r0
   d8872:	460c      	mov	r4, r1
   d8874:	9201      	str	r2, [sp, #4]
   d8876:	461e      	mov	r6, r3
   d8878:	f000 f890 	bl	d899c <_ZNKSt9type_infoeqERKS_>
   d887c:	b950      	cbnz	r0, d8894 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d887e:	2e03      	cmp	r6, #3
   d8880:	d808      	bhi.n	d8894 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d8882:	6823      	ldr	r3, [r4, #0]
   d8884:	9a01      	ldr	r2, [sp, #4]
   d8886:	695b      	ldr	r3, [r3, #20]
   d8888:	4629      	mov	r1, r5
   d888a:	4620      	mov	r0, r4
   d888c:	b002      	add	sp, #8
   d888e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d8892:	4718      	bx	r3
   d8894:	b002      	add	sp, #8
   d8896:	bd70      	pop	{r4, r5, r6, pc}

000d8898 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d8898:	b510      	push	{r4, lr}
   d889a:	4b03      	ldr	r3, [pc, #12]	; (d88a8 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d889c:	6003      	str	r3, [r0, #0]
   d889e:	4604      	mov	r4, r0
   d88a0:	f7ff ffa6 	bl	d87f0 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d88a4:	4620      	mov	r0, r4
   d88a6:	bd10      	pop	{r4, pc}
   d88a8:	000d9e74 	.word	0x000d9e74

000d88ac <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d88ac:	b510      	push	{r4, lr}
   d88ae:	4604      	mov	r4, r0
   d88b0:	f7ff fff2 	bl	d8898 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d88b4:	4620      	mov	r0, r4
   d88b6:	210c      	movs	r1, #12
   d88b8:	f7ff ff6b 	bl	d8792 <_ZdlPvj>
   d88bc:	4620      	mov	r0, r4
   d88be:	bd10      	pop	{r4, pc}

000d88c0 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d88c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d88c2:	9f08      	ldr	r7, [sp, #32]
   d88c4:	4297      	cmp	r7, r2
   d88c6:	4605      	mov	r5, r0
   d88c8:	460e      	mov	r6, r1
   d88ca:	4614      	mov	r4, r2
   d88cc:	d00a      	beq.n	d88e4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d88ce:	68a8      	ldr	r0, [r5, #8]
   d88d0:	6802      	ldr	r2, [r0, #0]
   d88d2:	9708      	str	r7, [sp, #32]
   d88d4:	6a15      	ldr	r5, [r2, #32]
   d88d6:	4631      	mov	r1, r6
   d88d8:	4622      	mov	r2, r4
   d88da:	46ac      	mov	ip, r5
   d88dc:	b003      	add	sp, #12
   d88de:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d88e2:	4760      	bx	ip
   d88e4:	4619      	mov	r1, r3
   d88e6:	9301      	str	r3, [sp, #4]
   d88e8:	f000 f858 	bl	d899c <_ZNKSt9type_infoeqERKS_>
   d88ec:	9b01      	ldr	r3, [sp, #4]
   d88ee:	2800      	cmp	r0, #0
   d88f0:	d0ed      	beq.n	d88ce <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d88f2:	2006      	movs	r0, #6
   d88f4:	b003      	add	sp, #12
   d88f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d88f8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d88f8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d88fc:	460d      	mov	r5, r1
   d88fe:	4619      	mov	r1, r3
   d8900:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d8904:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d8908:	4681      	mov	r9, r0
   d890a:	4617      	mov	r7, r2
   d890c:	4698      	mov	r8, r3
   d890e:	f000 f845 	bl	d899c <_ZNKSt9type_infoeqERKS_>
   d8912:	b190      	cbz	r0, d893a <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d8914:	2d00      	cmp	r5, #0
   d8916:	6034      	str	r4, [r6, #0]
   d8918:	7137      	strb	r7, [r6, #4]
   d891a:	db09      	blt.n	d8930 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d891c:	1961      	adds	r1, r4, r5
   d891e:	458a      	cmp	sl, r1
   d8920:	bf0c      	ite	eq
   d8922:	2106      	moveq	r1, #6
   d8924:	2101      	movne	r1, #1
   d8926:	71b1      	strb	r1, [r6, #6]
   d8928:	2000      	movs	r0, #0
   d892a:	b001      	add	sp, #4
   d892c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8930:	3502      	adds	r5, #2
   d8932:	d1f9      	bne.n	d8928 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d8934:	2301      	movs	r3, #1
   d8936:	71b3      	strb	r3, [r6, #6]
   d8938:	e7f6      	b.n	d8928 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d893a:	4554      	cmp	r4, sl
   d893c:	d106      	bne.n	d894c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d893e:	4659      	mov	r1, fp
   d8940:	4648      	mov	r0, r9
   d8942:	f000 f82b 	bl	d899c <_ZNKSt9type_infoeqERKS_>
   d8946:	b108      	cbz	r0, d894c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d8948:	7177      	strb	r7, [r6, #5]
   d894a:	e7ed      	b.n	d8928 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d894c:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d8950:	6803      	ldr	r3, [r0, #0]
   d8952:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d8956:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d895a:	69dc      	ldr	r4, [r3, #28]
   d895c:	463a      	mov	r2, r7
   d895e:	4643      	mov	r3, r8
   d8960:	4629      	mov	r1, r5
   d8962:	46a4      	mov	ip, r4
   d8964:	b001      	add	sp, #4
   d8966:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d896a:	4760      	bx	ip

000d896c <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d896c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8970:	4607      	mov	r7, r0
   d8972:	460c      	mov	r4, r1
   d8974:	4615      	mov	r5, r2
   d8976:	461e      	mov	r6, r3
   d8978:	f7ff ff6d 	bl	d8856 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d897c:	b948      	cbnz	r0, d8992 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d897e:	68b8      	ldr	r0, [r7, #8]
   d8980:	6803      	ldr	r3, [r0, #0]
   d8982:	699f      	ldr	r7, [r3, #24]
   d8984:	462a      	mov	r2, r5
   d8986:	4633      	mov	r3, r6
   d8988:	4621      	mov	r1, r4
   d898a:	46bc      	mov	ip, r7
   d898c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d8990:	4760      	bx	ip
   d8992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d8996 <_ZNSt9type_infoD1Ev>:
   d8996:	4770      	bx	lr

000d8998 <_ZNKSt9type_info14__is_pointer_pEv>:
   d8998:	2000      	movs	r0, #0
   d899a:	4770      	bx	lr

000d899c <_ZNKSt9type_infoeqERKS_>:
   d899c:	4281      	cmp	r1, r0
   d899e:	b508      	push	{r3, lr}
   d89a0:	d00e      	beq.n	d89c0 <_ZNKSt9type_infoeqERKS_+0x24>
   d89a2:	6840      	ldr	r0, [r0, #4]
   d89a4:	7803      	ldrb	r3, [r0, #0]
   d89a6:	2b2a      	cmp	r3, #42	; 0x2a
   d89a8:	d00c      	beq.n	d89c4 <_ZNKSt9type_infoeqERKS_+0x28>
   d89aa:	6849      	ldr	r1, [r1, #4]
   d89ac:	780b      	ldrb	r3, [r1, #0]
   d89ae:	2b2a      	cmp	r3, #42	; 0x2a
   d89b0:	bf08      	it	eq
   d89b2:	3101      	addeq	r1, #1
   d89b4:	f000 fd94 	bl	d94e0 <strcmp>
   d89b8:	fab0 f080 	clz	r0, r0
   d89bc:	0940      	lsrs	r0, r0, #5
   d89be:	bd08      	pop	{r3, pc}
   d89c0:	2001      	movs	r0, #1
   d89c2:	e7fc      	b.n	d89be <_ZNKSt9type_infoeqERKS_+0x22>
   d89c4:	2000      	movs	r0, #0
   d89c6:	e7fa      	b.n	d89be <_ZNKSt9type_infoeqERKS_+0x22>

000d89c8 <__aeabi_drsub>:
   d89c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d89cc:	e002      	b.n	d89d4 <__adddf3>
   d89ce:	bf00      	nop

000d89d0 <__aeabi_dsub>:
   d89d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d89d4 <__adddf3>:
   d89d4:	b530      	push	{r4, r5, lr}
   d89d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d89da:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d89de:	ea94 0f05 	teq	r4, r5
   d89e2:	bf08      	it	eq
   d89e4:	ea90 0f02 	teqeq	r0, r2
   d89e8:	bf1f      	itttt	ne
   d89ea:	ea54 0c00 	orrsne.w	ip, r4, r0
   d89ee:	ea55 0c02 	orrsne.w	ip, r5, r2
   d89f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d89f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d89fa:	f000 80e2 	beq.w	d8bc2 <__adddf3+0x1ee>
   d89fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8a02:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8a06:	bfb8      	it	lt
   d8a08:	426d      	neglt	r5, r5
   d8a0a:	dd0c      	ble.n	d8a26 <__adddf3+0x52>
   d8a0c:	442c      	add	r4, r5
   d8a0e:	ea80 0202 	eor.w	r2, r0, r2
   d8a12:	ea81 0303 	eor.w	r3, r1, r3
   d8a16:	ea82 0000 	eor.w	r0, r2, r0
   d8a1a:	ea83 0101 	eor.w	r1, r3, r1
   d8a1e:	ea80 0202 	eor.w	r2, r0, r2
   d8a22:	ea81 0303 	eor.w	r3, r1, r3
   d8a26:	2d36      	cmp	r5, #54	; 0x36
   d8a28:	bf88      	it	hi
   d8a2a:	bd30      	pophi	{r4, r5, pc}
   d8a2c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8a30:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8a34:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8a38:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8a3c:	d002      	beq.n	d8a44 <__adddf3+0x70>
   d8a3e:	4240      	negs	r0, r0
   d8a40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8a44:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8a48:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8a4c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8a50:	d002      	beq.n	d8a58 <__adddf3+0x84>
   d8a52:	4252      	negs	r2, r2
   d8a54:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8a58:	ea94 0f05 	teq	r4, r5
   d8a5c:	f000 80a7 	beq.w	d8bae <__adddf3+0x1da>
   d8a60:	f1a4 0401 	sub.w	r4, r4, #1
   d8a64:	f1d5 0e20 	rsbs	lr, r5, #32
   d8a68:	db0d      	blt.n	d8a86 <__adddf3+0xb2>
   d8a6a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8a6e:	fa22 f205 	lsr.w	r2, r2, r5
   d8a72:	1880      	adds	r0, r0, r2
   d8a74:	f141 0100 	adc.w	r1, r1, #0
   d8a78:	fa03 f20e 	lsl.w	r2, r3, lr
   d8a7c:	1880      	adds	r0, r0, r2
   d8a7e:	fa43 f305 	asr.w	r3, r3, r5
   d8a82:	4159      	adcs	r1, r3
   d8a84:	e00e      	b.n	d8aa4 <__adddf3+0xd0>
   d8a86:	f1a5 0520 	sub.w	r5, r5, #32
   d8a8a:	f10e 0e20 	add.w	lr, lr, #32
   d8a8e:	2a01      	cmp	r2, #1
   d8a90:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8a94:	bf28      	it	cs
   d8a96:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8a9a:	fa43 f305 	asr.w	r3, r3, r5
   d8a9e:	18c0      	adds	r0, r0, r3
   d8aa0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8aa4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8aa8:	d507      	bpl.n	d8aba <__adddf3+0xe6>
   d8aaa:	f04f 0e00 	mov.w	lr, #0
   d8aae:	f1dc 0c00 	rsbs	ip, ip, #0
   d8ab2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8ab6:	eb6e 0101 	sbc.w	r1, lr, r1
   d8aba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8abe:	d31b      	bcc.n	d8af8 <__adddf3+0x124>
   d8ac0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8ac4:	d30c      	bcc.n	d8ae0 <__adddf3+0x10c>
   d8ac6:	0849      	lsrs	r1, r1, #1
   d8ac8:	ea5f 0030 	movs.w	r0, r0, rrx
   d8acc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8ad0:	f104 0401 	add.w	r4, r4, #1
   d8ad4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8ad8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8adc:	f080 809a 	bcs.w	d8c14 <__adddf3+0x240>
   d8ae0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8ae4:	bf08      	it	eq
   d8ae6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8aea:	f150 0000 	adcs.w	r0, r0, #0
   d8aee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8af2:	ea41 0105 	orr.w	r1, r1, r5
   d8af6:	bd30      	pop	{r4, r5, pc}
   d8af8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8afc:	4140      	adcs	r0, r0
   d8afe:	eb41 0101 	adc.w	r1, r1, r1
   d8b02:	3c01      	subs	r4, #1
   d8b04:	bf28      	it	cs
   d8b06:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d8b0a:	d2e9      	bcs.n	d8ae0 <__adddf3+0x10c>
   d8b0c:	f091 0f00 	teq	r1, #0
   d8b10:	bf04      	itt	eq
   d8b12:	4601      	moveq	r1, r0
   d8b14:	2000      	moveq	r0, #0
   d8b16:	fab1 f381 	clz	r3, r1
   d8b1a:	bf08      	it	eq
   d8b1c:	3320      	addeq	r3, #32
   d8b1e:	f1a3 030b 	sub.w	r3, r3, #11
   d8b22:	f1b3 0220 	subs.w	r2, r3, #32
   d8b26:	da0c      	bge.n	d8b42 <__adddf3+0x16e>
   d8b28:	320c      	adds	r2, #12
   d8b2a:	dd08      	ble.n	d8b3e <__adddf3+0x16a>
   d8b2c:	f102 0c14 	add.w	ip, r2, #20
   d8b30:	f1c2 020c 	rsb	r2, r2, #12
   d8b34:	fa01 f00c 	lsl.w	r0, r1, ip
   d8b38:	fa21 f102 	lsr.w	r1, r1, r2
   d8b3c:	e00c      	b.n	d8b58 <__adddf3+0x184>
   d8b3e:	f102 0214 	add.w	r2, r2, #20
   d8b42:	bfd8      	it	le
   d8b44:	f1c2 0c20 	rsble	ip, r2, #32
   d8b48:	fa01 f102 	lsl.w	r1, r1, r2
   d8b4c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8b50:	bfdc      	itt	le
   d8b52:	ea41 010c 	orrle.w	r1, r1, ip
   d8b56:	4090      	lslle	r0, r2
   d8b58:	1ae4      	subs	r4, r4, r3
   d8b5a:	bfa2      	ittt	ge
   d8b5c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8b60:	4329      	orrge	r1, r5
   d8b62:	bd30      	popge	{r4, r5, pc}
   d8b64:	ea6f 0404 	mvn.w	r4, r4
   d8b68:	3c1f      	subs	r4, #31
   d8b6a:	da1c      	bge.n	d8ba6 <__adddf3+0x1d2>
   d8b6c:	340c      	adds	r4, #12
   d8b6e:	dc0e      	bgt.n	d8b8e <__adddf3+0x1ba>
   d8b70:	f104 0414 	add.w	r4, r4, #20
   d8b74:	f1c4 0220 	rsb	r2, r4, #32
   d8b78:	fa20 f004 	lsr.w	r0, r0, r4
   d8b7c:	fa01 f302 	lsl.w	r3, r1, r2
   d8b80:	ea40 0003 	orr.w	r0, r0, r3
   d8b84:	fa21 f304 	lsr.w	r3, r1, r4
   d8b88:	ea45 0103 	orr.w	r1, r5, r3
   d8b8c:	bd30      	pop	{r4, r5, pc}
   d8b8e:	f1c4 040c 	rsb	r4, r4, #12
   d8b92:	f1c4 0220 	rsb	r2, r4, #32
   d8b96:	fa20 f002 	lsr.w	r0, r0, r2
   d8b9a:	fa01 f304 	lsl.w	r3, r1, r4
   d8b9e:	ea40 0003 	orr.w	r0, r0, r3
   d8ba2:	4629      	mov	r1, r5
   d8ba4:	bd30      	pop	{r4, r5, pc}
   d8ba6:	fa21 f004 	lsr.w	r0, r1, r4
   d8baa:	4629      	mov	r1, r5
   d8bac:	bd30      	pop	{r4, r5, pc}
   d8bae:	f094 0f00 	teq	r4, #0
   d8bb2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8bb6:	bf06      	itte	eq
   d8bb8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8bbc:	3401      	addeq	r4, #1
   d8bbe:	3d01      	subne	r5, #1
   d8bc0:	e74e      	b.n	d8a60 <__adddf3+0x8c>
   d8bc2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8bc6:	bf18      	it	ne
   d8bc8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8bcc:	d029      	beq.n	d8c22 <__adddf3+0x24e>
   d8bce:	ea94 0f05 	teq	r4, r5
   d8bd2:	bf08      	it	eq
   d8bd4:	ea90 0f02 	teqeq	r0, r2
   d8bd8:	d005      	beq.n	d8be6 <__adddf3+0x212>
   d8bda:	ea54 0c00 	orrs.w	ip, r4, r0
   d8bde:	bf04      	itt	eq
   d8be0:	4619      	moveq	r1, r3
   d8be2:	4610      	moveq	r0, r2
   d8be4:	bd30      	pop	{r4, r5, pc}
   d8be6:	ea91 0f03 	teq	r1, r3
   d8bea:	bf1e      	ittt	ne
   d8bec:	2100      	movne	r1, #0
   d8bee:	2000      	movne	r0, #0
   d8bf0:	bd30      	popne	{r4, r5, pc}
   d8bf2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8bf6:	d105      	bne.n	d8c04 <__adddf3+0x230>
   d8bf8:	0040      	lsls	r0, r0, #1
   d8bfa:	4149      	adcs	r1, r1
   d8bfc:	bf28      	it	cs
   d8bfe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8c02:	bd30      	pop	{r4, r5, pc}
   d8c04:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8c08:	bf3c      	itt	cc
   d8c0a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8c0e:	bd30      	popcc	{r4, r5, pc}
   d8c10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8c14:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8c18:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8c1c:	f04f 0000 	mov.w	r0, #0
   d8c20:	bd30      	pop	{r4, r5, pc}
   d8c22:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8c26:	bf1a      	itte	ne
   d8c28:	4619      	movne	r1, r3
   d8c2a:	4610      	movne	r0, r2
   d8c2c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8c30:	bf1c      	itt	ne
   d8c32:	460b      	movne	r3, r1
   d8c34:	4602      	movne	r2, r0
   d8c36:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8c3a:	bf06      	itte	eq
   d8c3c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8c40:	ea91 0f03 	teqeq	r1, r3
   d8c44:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8c48:	bd30      	pop	{r4, r5, pc}
   d8c4a:	bf00      	nop

000d8c4c <__aeabi_ui2d>:
   d8c4c:	f090 0f00 	teq	r0, #0
   d8c50:	bf04      	itt	eq
   d8c52:	2100      	moveq	r1, #0
   d8c54:	4770      	bxeq	lr
   d8c56:	b530      	push	{r4, r5, lr}
   d8c58:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8c5c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8c60:	f04f 0500 	mov.w	r5, #0
   d8c64:	f04f 0100 	mov.w	r1, #0
   d8c68:	e750      	b.n	d8b0c <__adddf3+0x138>
   d8c6a:	bf00      	nop

000d8c6c <__aeabi_i2d>:
   d8c6c:	f090 0f00 	teq	r0, #0
   d8c70:	bf04      	itt	eq
   d8c72:	2100      	moveq	r1, #0
   d8c74:	4770      	bxeq	lr
   d8c76:	b530      	push	{r4, r5, lr}
   d8c78:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8c7c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8c80:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8c84:	bf48      	it	mi
   d8c86:	4240      	negmi	r0, r0
   d8c88:	f04f 0100 	mov.w	r1, #0
   d8c8c:	e73e      	b.n	d8b0c <__adddf3+0x138>
   d8c8e:	bf00      	nop

000d8c90 <__aeabi_f2d>:
   d8c90:	0042      	lsls	r2, r0, #1
   d8c92:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8c96:	ea4f 0131 	mov.w	r1, r1, rrx
   d8c9a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8c9e:	bf1f      	itttt	ne
   d8ca0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8ca4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8ca8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8cac:	4770      	bxne	lr
   d8cae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d8cb2:	bf08      	it	eq
   d8cb4:	4770      	bxeq	lr
   d8cb6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d8cba:	bf04      	itt	eq
   d8cbc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d8cc0:	4770      	bxeq	lr
   d8cc2:	b530      	push	{r4, r5, lr}
   d8cc4:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8cc8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8ccc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8cd0:	e71c      	b.n	d8b0c <__adddf3+0x138>
   d8cd2:	bf00      	nop

000d8cd4 <__aeabi_ul2d>:
   d8cd4:	ea50 0201 	orrs.w	r2, r0, r1
   d8cd8:	bf08      	it	eq
   d8cda:	4770      	bxeq	lr
   d8cdc:	b530      	push	{r4, r5, lr}
   d8cde:	f04f 0500 	mov.w	r5, #0
   d8ce2:	e00a      	b.n	d8cfa <__aeabi_l2d+0x16>

000d8ce4 <__aeabi_l2d>:
   d8ce4:	ea50 0201 	orrs.w	r2, r0, r1
   d8ce8:	bf08      	it	eq
   d8cea:	4770      	bxeq	lr
   d8cec:	b530      	push	{r4, r5, lr}
   d8cee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8cf2:	d502      	bpl.n	d8cfa <__aeabi_l2d+0x16>
   d8cf4:	4240      	negs	r0, r0
   d8cf6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8cfa:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8cfe:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8d02:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8d06:	f43f aed8 	beq.w	d8aba <__adddf3+0xe6>
   d8d0a:	f04f 0203 	mov.w	r2, #3
   d8d0e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8d12:	bf18      	it	ne
   d8d14:	3203      	addne	r2, #3
   d8d16:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8d1a:	bf18      	it	ne
   d8d1c:	3203      	addne	r2, #3
   d8d1e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8d22:	f1c2 0320 	rsb	r3, r2, #32
   d8d26:	fa00 fc03 	lsl.w	ip, r0, r3
   d8d2a:	fa20 f002 	lsr.w	r0, r0, r2
   d8d2e:	fa01 fe03 	lsl.w	lr, r1, r3
   d8d32:	ea40 000e 	orr.w	r0, r0, lr
   d8d36:	fa21 f102 	lsr.w	r1, r1, r2
   d8d3a:	4414      	add	r4, r2
   d8d3c:	e6bd      	b.n	d8aba <__adddf3+0xe6>
   d8d3e:	bf00      	nop

000d8d40 <__aeabi_dmul>:
   d8d40:	b570      	push	{r4, r5, r6, lr}
   d8d42:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8d46:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8d4a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8d4e:	bf1d      	ittte	ne
   d8d50:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8d54:	ea94 0f0c 	teqne	r4, ip
   d8d58:	ea95 0f0c 	teqne	r5, ip
   d8d5c:	f000 f8de 	bleq	d8f1c <__aeabi_dmul+0x1dc>
   d8d60:	442c      	add	r4, r5
   d8d62:	ea81 0603 	eor.w	r6, r1, r3
   d8d66:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8d6a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8d6e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8d72:	bf18      	it	ne
   d8d74:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8d78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8d7c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8d80:	d038      	beq.n	d8df4 <__aeabi_dmul+0xb4>
   d8d82:	fba0 ce02 	umull	ip, lr, r0, r2
   d8d86:	f04f 0500 	mov.w	r5, #0
   d8d8a:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8d8e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8d92:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8d96:	f04f 0600 	mov.w	r6, #0
   d8d9a:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8d9e:	f09c 0f00 	teq	ip, #0
   d8da2:	bf18      	it	ne
   d8da4:	f04e 0e01 	orrne.w	lr, lr, #1
   d8da8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8dac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8db0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8db4:	d204      	bcs.n	d8dc0 <__aeabi_dmul+0x80>
   d8db6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8dba:	416d      	adcs	r5, r5
   d8dbc:	eb46 0606 	adc.w	r6, r6, r6
   d8dc0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8dc4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8dc8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8dcc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8dd0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8dd4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8dd8:	bf88      	it	hi
   d8dda:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8dde:	d81e      	bhi.n	d8e1e <__aeabi_dmul+0xde>
   d8de0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8de4:	bf08      	it	eq
   d8de6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8dea:	f150 0000 	adcs.w	r0, r0, #0
   d8dee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8df2:	bd70      	pop	{r4, r5, r6, pc}
   d8df4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8df8:	ea46 0101 	orr.w	r1, r6, r1
   d8dfc:	ea40 0002 	orr.w	r0, r0, r2
   d8e00:	ea81 0103 	eor.w	r1, r1, r3
   d8e04:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8e08:	bfc2      	ittt	gt
   d8e0a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8e0e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8e12:	bd70      	popgt	{r4, r5, r6, pc}
   d8e14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8e18:	f04f 0e00 	mov.w	lr, #0
   d8e1c:	3c01      	subs	r4, #1
   d8e1e:	f300 80ab 	bgt.w	d8f78 <__aeabi_dmul+0x238>
   d8e22:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8e26:	bfde      	ittt	le
   d8e28:	2000      	movle	r0, #0
   d8e2a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8e2e:	bd70      	pople	{r4, r5, r6, pc}
   d8e30:	f1c4 0400 	rsb	r4, r4, #0
   d8e34:	3c20      	subs	r4, #32
   d8e36:	da35      	bge.n	d8ea4 <__aeabi_dmul+0x164>
   d8e38:	340c      	adds	r4, #12
   d8e3a:	dc1b      	bgt.n	d8e74 <__aeabi_dmul+0x134>
   d8e3c:	f104 0414 	add.w	r4, r4, #20
   d8e40:	f1c4 0520 	rsb	r5, r4, #32
   d8e44:	fa00 f305 	lsl.w	r3, r0, r5
   d8e48:	fa20 f004 	lsr.w	r0, r0, r4
   d8e4c:	fa01 f205 	lsl.w	r2, r1, r5
   d8e50:	ea40 0002 	orr.w	r0, r0, r2
   d8e54:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8e58:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8e5c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8e60:	fa21 f604 	lsr.w	r6, r1, r4
   d8e64:	eb42 0106 	adc.w	r1, r2, r6
   d8e68:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8e6c:	bf08      	it	eq
   d8e6e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8e72:	bd70      	pop	{r4, r5, r6, pc}
   d8e74:	f1c4 040c 	rsb	r4, r4, #12
   d8e78:	f1c4 0520 	rsb	r5, r4, #32
   d8e7c:	fa00 f304 	lsl.w	r3, r0, r4
   d8e80:	fa20 f005 	lsr.w	r0, r0, r5
   d8e84:	fa01 f204 	lsl.w	r2, r1, r4
   d8e88:	ea40 0002 	orr.w	r0, r0, r2
   d8e8c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8e90:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d8e94:	f141 0100 	adc.w	r1, r1, #0
   d8e98:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8e9c:	bf08      	it	eq
   d8e9e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8ea2:	bd70      	pop	{r4, r5, r6, pc}
   d8ea4:	f1c4 0520 	rsb	r5, r4, #32
   d8ea8:	fa00 f205 	lsl.w	r2, r0, r5
   d8eac:	ea4e 0e02 	orr.w	lr, lr, r2
   d8eb0:	fa20 f304 	lsr.w	r3, r0, r4
   d8eb4:	fa01 f205 	lsl.w	r2, r1, r5
   d8eb8:	ea43 0302 	orr.w	r3, r3, r2
   d8ebc:	fa21 f004 	lsr.w	r0, r1, r4
   d8ec0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8ec4:	fa21 f204 	lsr.w	r2, r1, r4
   d8ec8:	ea20 0002 	bic.w	r0, r0, r2
   d8ecc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d8ed0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d8ed4:	bf08      	it	eq
   d8ed6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d8eda:	bd70      	pop	{r4, r5, r6, pc}
   d8edc:	f094 0f00 	teq	r4, #0
   d8ee0:	d10f      	bne.n	d8f02 <__aeabi_dmul+0x1c2>
   d8ee2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d8ee6:	0040      	lsls	r0, r0, #1
   d8ee8:	eb41 0101 	adc.w	r1, r1, r1
   d8eec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8ef0:	bf08      	it	eq
   d8ef2:	3c01      	subeq	r4, #1
   d8ef4:	d0f7      	beq.n	d8ee6 <__aeabi_dmul+0x1a6>
   d8ef6:	ea41 0106 	orr.w	r1, r1, r6
   d8efa:	f095 0f00 	teq	r5, #0
   d8efe:	bf18      	it	ne
   d8f00:	4770      	bxne	lr
   d8f02:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d8f06:	0052      	lsls	r2, r2, #1
   d8f08:	eb43 0303 	adc.w	r3, r3, r3
   d8f0c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d8f10:	bf08      	it	eq
   d8f12:	3d01      	subeq	r5, #1
   d8f14:	d0f7      	beq.n	d8f06 <__aeabi_dmul+0x1c6>
   d8f16:	ea43 0306 	orr.w	r3, r3, r6
   d8f1a:	4770      	bx	lr
   d8f1c:	ea94 0f0c 	teq	r4, ip
   d8f20:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d8f24:	bf18      	it	ne
   d8f26:	ea95 0f0c 	teqne	r5, ip
   d8f2a:	d00c      	beq.n	d8f46 <__aeabi_dmul+0x206>
   d8f2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8f30:	bf18      	it	ne
   d8f32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8f36:	d1d1      	bne.n	d8edc <__aeabi_dmul+0x19c>
   d8f38:	ea81 0103 	eor.w	r1, r1, r3
   d8f3c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8f40:	f04f 0000 	mov.w	r0, #0
   d8f44:	bd70      	pop	{r4, r5, r6, pc}
   d8f46:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d8f4a:	bf06      	itte	eq
   d8f4c:	4610      	moveq	r0, r2
   d8f4e:	4619      	moveq	r1, r3
   d8f50:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d8f54:	d019      	beq.n	d8f8a <__aeabi_dmul+0x24a>
   d8f56:	ea94 0f0c 	teq	r4, ip
   d8f5a:	d102      	bne.n	d8f62 <__aeabi_dmul+0x222>
   d8f5c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d8f60:	d113      	bne.n	d8f8a <__aeabi_dmul+0x24a>
   d8f62:	ea95 0f0c 	teq	r5, ip
   d8f66:	d105      	bne.n	d8f74 <__aeabi_dmul+0x234>
   d8f68:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d8f6c:	bf1c      	itt	ne
   d8f6e:	4610      	movne	r0, r2
   d8f70:	4619      	movne	r1, r3
   d8f72:	d10a      	bne.n	d8f8a <__aeabi_dmul+0x24a>
   d8f74:	ea81 0103 	eor.w	r1, r1, r3
   d8f78:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d8f7c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8f80:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8f84:	f04f 0000 	mov.w	r0, #0
   d8f88:	bd70      	pop	{r4, r5, r6, pc}
   d8f8a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d8f8e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d8f92:	bd70      	pop	{r4, r5, r6, pc}

000d8f94 <__aeabi_ddiv>:
   d8f94:	b570      	push	{r4, r5, r6, lr}
   d8f96:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8f9a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8f9e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8fa2:	bf1d      	ittte	ne
   d8fa4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8fa8:	ea94 0f0c 	teqne	r4, ip
   d8fac:	ea95 0f0c 	teqne	r5, ip
   d8fb0:	f000 f8a7 	bleq	d9102 <__aeabi_ddiv+0x16e>
   d8fb4:	eba4 0405 	sub.w	r4, r4, r5
   d8fb8:	ea81 0e03 	eor.w	lr, r1, r3
   d8fbc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d8fc0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8fc4:	f000 8088 	beq.w	d90d8 <__aeabi_ddiv+0x144>
   d8fc8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8fcc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d8fd0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d8fd4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d8fd8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d8fdc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d8fe0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d8fe4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d8fe8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d8fec:	429d      	cmp	r5, r3
   d8fee:	bf08      	it	eq
   d8ff0:	4296      	cmpeq	r6, r2
   d8ff2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d8ff6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d8ffa:	d202      	bcs.n	d9002 <__aeabi_ddiv+0x6e>
   d8ffc:	085b      	lsrs	r3, r3, #1
   d8ffe:	ea4f 0232 	mov.w	r2, r2, rrx
   d9002:	1ab6      	subs	r6, r6, r2
   d9004:	eb65 0503 	sbc.w	r5, r5, r3
   d9008:	085b      	lsrs	r3, r3, #1
   d900a:	ea4f 0232 	mov.w	r2, r2, rrx
   d900e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d9012:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d9016:	ebb6 0e02 	subs.w	lr, r6, r2
   d901a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d901e:	bf22      	ittt	cs
   d9020:	1ab6      	subcs	r6, r6, r2
   d9022:	4675      	movcs	r5, lr
   d9024:	ea40 000c 	orrcs.w	r0, r0, ip
   d9028:	085b      	lsrs	r3, r3, #1
   d902a:	ea4f 0232 	mov.w	r2, r2, rrx
   d902e:	ebb6 0e02 	subs.w	lr, r6, r2
   d9032:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9036:	bf22      	ittt	cs
   d9038:	1ab6      	subcs	r6, r6, r2
   d903a:	4675      	movcs	r5, lr
   d903c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d9040:	085b      	lsrs	r3, r3, #1
   d9042:	ea4f 0232 	mov.w	r2, r2, rrx
   d9046:	ebb6 0e02 	subs.w	lr, r6, r2
   d904a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d904e:	bf22      	ittt	cs
   d9050:	1ab6      	subcs	r6, r6, r2
   d9052:	4675      	movcs	r5, lr
   d9054:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d9058:	085b      	lsrs	r3, r3, #1
   d905a:	ea4f 0232 	mov.w	r2, r2, rrx
   d905e:	ebb6 0e02 	subs.w	lr, r6, r2
   d9062:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9066:	bf22      	ittt	cs
   d9068:	1ab6      	subcs	r6, r6, r2
   d906a:	4675      	movcs	r5, lr
   d906c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d9070:	ea55 0e06 	orrs.w	lr, r5, r6
   d9074:	d018      	beq.n	d90a8 <__aeabi_ddiv+0x114>
   d9076:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d907a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d907e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d9082:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d9086:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d908a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d908e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d9092:	d1c0      	bne.n	d9016 <__aeabi_ddiv+0x82>
   d9094:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9098:	d10b      	bne.n	d90b2 <__aeabi_ddiv+0x11e>
   d909a:	ea41 0100 	orr.w	r1, r1, r0
   d909e:	f04f 0000 	mov.w	r0, #0
   d90a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d90a6:	e7b6      	b.n	d9016 <__aeabi_ddiv+0x82>
   d90a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d90ac:	bf04      	itt	eq
   d90ae:	4301      	orreq	r1, r0
   d90b0:	2000      	moveq	r0, #0
   d90b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d90b6:	bf88      	it	hi
   d90b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d90bc:	f63f aeaf 	bhi.w	d8e1e <__aeabi_dmul+0xde>
   d90c0:	ebb5 0c03 	subs.w	ip, r5, r3
   d90c4:	bf04      	itt	eq
   d90c6:	ebb6 0c02 	subseq.w	ip, r6, r2
   d90ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d90ce:	f150 0000 	adcs.w	r0, r0, #0
   d90d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d90d6:	bd70      	pop	{r4, r5, r6, pc}
   d90d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d90dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d90e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d90e4:	bfc2      	ittt	gt
   d90e6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d90ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d90ee:	bd70      	popgt	{r4, r5, r6, pc}
   d90f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d90f4:	f04f 0e00 	mov.w	lr, #0
   d90f8:	3c01      	subs	r4, #1
   d90fa:	e690      	b.n	d8e1e <__aeabi_dmul+0xde>
   d90fc:	ea45 0e06 	orr.w	lr, r5, r6
   d9100:	e68d      	b.n	d8e1e <__aeabi_dmul+0xde>
   d9102:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9106:	ea94 0f0c 	teq	r4, ip
   d910a:	bf08      	it	eq
   d910c:	ea95 0f0c 	teqeq	r5, ip
   d9110:	f43f af3b 	beq.w	d8f8a <__aeabi_dmul+0x24a>
   d9114:	ea94 0f0c 	teq	r4, ip
   d9118:	d10a      	bne.n	d9130 <__aeabi_ddiv+0x19c>
   d911a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d911e:	f47f af34 	bne.w	d8f8a <__aeabi_dmul+0x24a>
   d9122:	ea95 0f0c 	teq	r5, ip
   d9126:	f47f af25 	bne.w	d8f74 <__aeabi_dmul+0x234>
   d912a:	4610      	mov	r0, r2
   d912c:	4619      	mov	r1, r3
   d912e:	e72c      	b.n	d8f8a <__aeabi_dmul+0x24a>
   d9130:	ea95 0f0c 	teq	r5, ip
   d9134:	d106      	bne.n	d9144 <__aeabi_ddiv+0x1b0>
   d9136:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d913a:	f43f aefd 	beq.w	d8f38 <__aeabi_dmul+0x1f8>
   d913e:	4610      	mov	r0, r2
   d9140:	4619      	mov	r1, r3
   d9142:	e722      	b.n	d8f8a <__aeabi_dmul+0x24a>
   d9144:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9148:	bf18      	it	ne
   d914a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d914e:	f47f aec5 	bne.w	d8edc <__aeabi_dmul+0x19c>
   d9152:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d9156:	f47f af0d 	bne.w	d8f74 <__aeabi_dmul+0x234>
   d915a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d915e:	f47f aeeb 	bne.w	d8f38 <__aeabi_dmul+0x1f8>
   d9162:	e712      	b.n	d8f8a <__aeabi_dmul+0x24a>

000d9164 <__gedf2>:
   d9164:	f04f 3cff 	mov.w	ip, #4294967295
   d9168:	e006      	b.n	d9178 <__cmpdf2+0x4>
   d916a:	bf00      	nop

000d916c <__ledf2>:
   d916c:	f04f 0c01 	mov.w	ip, #1
   d9170:	e002      	b.n	d9178 <__cmpdf2+0x4>
   d9172:	bf00      	nop

000d9174 <__cmpdf2>:
   d9174:	f04f 0c01 	mov.w	ip, #1
   d9178:	f84d cd04 	str.w	ip, [sp, #-4]!
   d917c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9180:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9184:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9188:	bf18      	it	ne
   d918a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d918e:	d01b      	beq.n	d91c8 <__cmpdf2+0x54>
   d9190:	b001      	add	sp, #4
   d9192:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d9196:	bf0c      	ite	eq
   d9198:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d919c:	ea91 0f03 	teqne	r1, r3
   d91a0:	bf02      	ittt	eq
   d91a2:	ea90 0f02 	teqeq	r0, r2
   d91a6:	2000      	moveq	r0, #0
   d91a8:	4770      	bxeq	lr
   d91aa:	f110 0f00 	cmn.w	r0, #0
   d91ae:	ea91 0f03 	teq	r1, r3
   d91b2:	bf58      	it	pl
   d91b4:	4299      	cmppl	r1, r3
   d91b6:	bf08      	it	eq
   d91b8:	4290      	cmpeq	r0, r2
   d91ba:	bf2c      	ite	cs
   d91bc:	17d8      	asrcs	r0, r3, #31
   d91be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d91c2:	f040 0001 	orr.w	r0, r0, #1
   d91c6:	4770      	bx	lr
   d91c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d91cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d91d0:	d102      	bne.n	d91d8 <__cmpdf2+0x64>
   d91d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d91d6:	d107      	bne.n	d91e8 <__cmpdf2+0x74>
   d91d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d91dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d91e0:	d1d6      	bne.n	d9190 <__cmpdf2+0x1c>
   d91e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d91e6:	d0d3      	beq.n	d9190 <__cmpdf2+0x1c>
   d91e8:	f85d 0b04 	ldr.w	r0, [sp], #4
   d91ec:	4770      	bx	lr
   d91ee:	bf00      	nop

000d91f0 <__aeabi_cdrcmple>:
   d91f0:	4684      	mov	ip, r0
   d91f2:	4610      	mov	r0, r2
   d91f4:	4662      	mov	r2, ip
   d91f6:	468c      	mov	ip, r1
   d91f8:	4619      	mov	r1, r3
   d91fa:	4663      	mov	r3, ip
   d91fc:	e000      	b.n	d9200 <__aeabi_cdcmpeq>
   d91fe:	bf00      	nop

000d9200 <__aeabi_cdcmpeq>:
   d9200:	b501      	push	{r0, lr}
   d9202:	f7ff ffb7 	bl	d9174 <__cmpdf2>
   d9206:	2800      	cmp	r0, #0
   d9208:	bf48      	it	mi
   d920a:	f110 0f00 	cmnmi.w	r0, #0
   d920e:	bd01      	pop	{r0, pc}

000d9210 <__aeabi_dcmpeq>:
   d9210:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9214:	f7ff fff4 	bl	d9200 <__aeabi_cdcmpeq>
   d9218:	bf0c      	ite	eq
   d921a:	2001      	moveq	r0, #1
   d921c:	2000      	movne	r0, #0
   d921e:	f85d fb08 	ldr.w	pc, [sp], #8
   d9222:	bf00      	nop

000d9224 <__aeabi_dcmplt>:
   d9224:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9228:	f7ff ffea 	bl	d9200 <__aeabi_cdcmpeq>
   d922c:	bf34      	ite	cc
   d922e:	2001      	movcc	r0, #1
   d9230:	2000      	movcs	r0, #0
   d9232:	f85d fb08 	ldr.w	pc, [sp], #8
   d9236:	bf00      	nop

000d9238 <__aeabi_dcmple>:
   d9238:	f84d ed08 	str.w	lr, [sp, #-8]!
   d923c:	f7ff ffe0 	bl	d9200 <__aeabi_cdcmpeq>
   d9240:	bf94      	ite	ls
   d9242:	2001      	movls	r0, #1
   d9244:	2000      	movhi	r0, #0
   d9246:	f85d fb08 	ldr.w	pc, [sp], #8
   d924a:	bf00      	nop

000d924c <__aeabi_dcmpge>:
   d924c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9250:	f7ff ffce 	bl	d91f0 <__aeabi_cdrcmple>
   d9254:	bf94      	ite	ls
   d9256:	2001      	movls	r0, #1
   d9258:	2000      	movhi	r0, #0
   d925a:	f85d fb08 	ldr.w	pc, [sp], #8
   d925e:	bf00      	nop

000d9260 <__aeabi_dcmpgt>:
   d9260:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9264:	f7ff ffc4 	bl	d91f0 <__aeabi_cdrcmple>
   d9268:	bf34      	ite	cc
   d926a:	2001      	movcc	r0, #1
   d926c:	2000      	movcs	r0, #0
   d926e:	f85d fb08 	ldr.w	pc, [sp], #8
   d9272:	bf00      	nop

000d9274 <__aeabi_dcmpun>:
   d9274:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9278:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d927c:	d102      	bne.n	d9284 <__aeabi_dcmpun+0x10>
   d927e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9282:	d10a      	bne.n	d929a <__aeabi_dcmpun+0x26>
   d9284:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9288:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d928c:	d102      	bne.n	d9294 <__aeabi_dcmpun+0x20>
   d928e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9292:	d102      	bne.n	d929a <__aeabi_dcmpun+0x26>
   d9294:	f04f 0000 	mov.w	r0, #0
   d9298:	4770      	bx	lr
   d929a:	f04f 0001 	mov.w	r0, #1
   d929e:	4770      	bx	lr

000d92a0 <__aeabi_d2iz>:
   d92a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d92a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d92a8:	d215      	bcs.n	d92d6 <__aeabi_d2iz+0x36>
   d92aa:	d511      	bpl.n	d92d0 <__aeabi_d2iz+0x30>
   d92ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d92b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d92b4:	d912      	bls.n	d92dc <__aeabi_d2iz+0x3c>
   d92b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d92ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d92be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d92c2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d92c6:	fa23 f002 	lsr.w	r0, r3, r2
   d92ca:	bf18      	it	ne
   d92cc:	4240      	negne	r0, r0
   d92ce:	4770      	bx	lr
   d92d0:	f04f 0000 	mov.w	r0, #0
   d92d4:	4770      	bx	lr
   d92d6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d92da:	d105      	bne.n	d92e8 <__aeabi_d2iz+0x48>
   d92dc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d92e0:	bf08      	it	eq
   d92e2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d92e6:	4770      	bx	lr
   d92e8:	f04f 0000 	mov.w	r0, #0
   d92ec:	4770      	bx	lr
   d92ee:	bf00      	nop

000d92f0 <__aeabi_d2uiz>:
   d92f0:	004a      	lsls	r2, r1, #1
   d92f2:	d211      	bcs.n	d9318 <__aeabi_d2uiz+0x28>
   d92f4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d92f8:	d211      	bcs.n	d931e <__aeabi_d2uiz+0x2e>
   d92fa:	d50d      	bpl.n	d9318 <__aeabi_d2uiz+0x28>
   d92fc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9300:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9304:	d40e      	bmi.n	d9324 <__aeabi_d2uiz+0x34>
   d9306:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d930a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d930e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9312:	fa23 f002 	lsr.w	r0, r3, r2
   d9316:	4770      	bx	lr
   d9318:	f04f 0000 	mov.w	r0, #0
   d931c:	4770      	bx	lr
   d931e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9322:	d102      	bne.n	d932a <__aeabi_d2uiz+0x3a>
   d9324:	f04f 30ff 	mov.w	r0, #4294967295
   d9328:	4770      	bx	lr
   d932a:	f04f 0000 	mov.w	r0, #0
   d932e:	4770      	bx	lr

000d9330 <__aeabi_d2f>:
   d9330:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9334:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d9338:	bf24      	itt	cs
   d933a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d933e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d9342:	d90d      	bls.n	d9360 <__aeabi_d2f+0x30>
   d9344:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d9348:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d934c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d9350:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d9354:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9358:	bf08      	it	eq
   d935a:	f020 0001 	biceq.w	r0, r0, #1
   d935e:	4770      	bx	lr
   d9360:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d9364:	d121      	bne.n	d93aa <__aeabi_d2f+0x7a>
   d9366:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d936a:	bfbc      	itt	lt
   d936c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d9370:	4770      	bxlt	lr
   d9372:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9376:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d937a:	f1c2 0218 	rsb	r2, r2, #24
   d937e:	f1c2 0c20 	rsb	ip, r2, #32
   d9382:	fa10 f30c 	lsls.w	r3, r0, ip
   d9386:	fa20 f002 	lsr.w	r0, r0, r2
   d938a:	bf18      	it	ne
   d938c:	f040 0001 	orrne.w	r0, r0, #1
   d9390:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9394:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d9398:	fa03 fc0c 	lsl.w	ip, r3, ip
   d939c:	ea40 000c 	orr.w	r0, r0, ip
   d93a0:	fa23 f302 	lsr.w	r3, r3, r2
   d93a4:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d93a8:	e7cc      	b.n	d9344 <__aeabi_d2f+0x14>
   d93aa:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d93ae:	d107      	bne.n	d93c0 <__aeabi_d2f+0x90>
   d93b0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d93b4:	bf1e      	ittt	ne
   d93b6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d93ba:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d93be:	4770      	bxne	lr
   d93c0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d93c4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d93c8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d93cc:	4770      	bx	lr
   d93ce:	bf00      	nop

000d93d0 <atoi>:
   d93d0:	220a      	movs	r2, #10
   d93d2:	2100      	movs	r1, #0
   d93d4:	f000 b950 	b.w	d9678 <strtol>

000d93d8 <__cxa_atexit>:
   d93d8:	b510      	push	{r4, lr}
   d93da:	4c05      	ldr	r4, [pc, #20]	; (d93f0 <__cxa_atexit+0x18>)
   d93dc:	4613      	mov	r3, r2
   d93de:	b12c      	cbz	r4, d93ec <__cxa_atexit+0x14>
   d93e0:	460a      	mov	r2, r1
   d93e2:	4601      	mov	r1, r0
   d93e4:	2002      	movs	r0, #2
   d93e6:	f3af 8000 	nop.w
   d93ea:	bd10      	pop	{r4, pc}
   d93ec:	4620      	mov	r0, r4
   d93ee:	e7fc      	b.n	d93ea <__cxa_atexit+0x12>
   d93f0:	00000000 	.word	0x00000000

000d93f4 <ldiv>:
   d93f4:	2900      	cmp	r1, #0
   d93f6:	b510      	push	{r4, lr}
   d93f8:	fb91 f4f2 	sdiv	r4, r1, r2
   d93fc:	fb02 1314 	mls	r3, r2, r4, r1
   d9400:	db06      	blt.n	d9410 <ldiv+0x1c>
   d9402:	2b00      	cmp	r3, #0
   d9404:	da01      	bge.n	d940a <ldiv+0x16>
   d9406:	3401      	adds	r4, #1
   d9408:	1a9b      	subs	r3, r3, r2
   d940a:	e9c0 4300 	strd	r4, r3, [r0]
   d940e:	bd10      	pop	{r4, pc}
   d9410:	2b00      	cmp	r3, #0
   d9412:	bfc4      	itt	gt
   d9414:	f104 34ff 	addgt.w	r4, r4, #4294967295
   d9418:	189b      	addgt	r3, r3, r2
   d941a:	e7f6      	b.n	d940a <ldiv+0x16>

000d941c <memcmp>:
   d941c:	b530      	push	{r4, r5, lr}
   d941e:	3901      	subs	r1, #1
   d9420:	2400      	movs	r4, #0
   d9422:	42a2      	cmp	r2, r4
   d9424:	d101      	bne.n	d942a <memcmp+0xe>
   d9426:	2000      	movs	r0, #0
   d9428:	e005      	b.n	d9436 <memcmp+0x1a>
   d942a:	5d03      	ldrb	r3, [r0, r4]
   d942c:	3401      	adds	r4, #1
   d942e:	5d0d      	ldrb	r5, [r1, r4]
   d9430:	42ab      	cmp	r3, r5
   d9432:	d0f6      	beq.n	d9422 <memcmp+0x6>
   d9434:	1b58      	subs	r0, r3, r5
   d9436:	bd30      	pop	{r4, r5, pc}

000d9438 <memcpy>:
   d9438:	440a      	add	r2, r1
   d943a:	4291      	cmp	r1, r2
   d943c:	f100 33ff 	add.w	r3, r0, #4294967295
   d9440:	d100      	bne.n	d9444 <memcpy+0xc>
   d9442:	4770      	bx	lr
   d9444:	b510      	push	{r4, lr}
   d9446:	f811 4b01 	ldrb.w	r4, [r1], #1
   d944a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d944e:	4291      	cmp	r1, r2
   d9450:	d1f9      	bne.n	d9446 <memcpy+0xe>
   d9452:	bd10      	pop	{r4, pc}

000d9454 <memmove>:
   d9454:	4288      	cmp	r0, r1
   d9456:	b510      	push	{r4, lr}
   d9458:	eb01 0402 	add.w	r4, r1, r2
   d945c:	d902      	bls.n	d9464 <memmove+0x10>
   d945e:	4284      	cmp	r4, r0
   d9460:	4623      	mov	r3, r4
   d9462:	d807      	bhi.n	d9474 <memmove+0x20>
   d9464:	1e43      	subs	r3, r0, #1
   d9466:	42a1      	cmp	r1, r4
   d9468:	d008      	beq.n	d947c <memmove+0x28>
   d946a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d946e:	f803 2f01 	strb.w	r2, [r3, #1]!
   d9472:	e7f8      	b.n	d9466 <memmove+0x12>
   d9474:	4402      	add	r2, r0
   d9476:	4601      	mov	r1, r0
   d9478:	428a      	cmp	r2, r1
   d947a:	d100      	bne.n	d947e <memmove+0x2a>
   d947c:	bd10      	pop	{r4, pc}
   d947e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d9482:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d9486:	e7f7      	b.n	d9478 <memmove+0x24>

000d9488 <memset>:
   d9488:	4402      	add	r2, r0
   d948a:	4603      	mov	r3, r0
   d948c:	4293      	cmp	r3, r2
   d948e:	d100      	bne.n	d9492 <memset+0xa>
   d9490:	4770      	bx	lr
   d9492:	f803 1b01 	strb.w	r1, [r3], #1
   d9496:	e7f9      	b.n	d948c <memset+0x4>

000d9498 <srand>:
   d9498:	b538      	push	{r3, r4, r5, lr}
   d949a:	4b0d      	ldr	r3, [pc, #52]	; (d94d0 <srand+0x38>)
   d949c:	681d      	ldr	r5, [r3, #0]
   d949e:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d94a0:	4604      	mov	r4, r0
   d94a2:	b97b      	cbnz	r3, d94c4 <srand+0x2c>
   d94a4:	2018      	movs	r0, #24
   d94a6:	f7fc fae5 	bl	d5a74 <malloc>
   d94aa:	4a0a      	ldr	r2, [pc, #40]	; (d94d4 <srand+0x3c>)
   d94ac:	4b0a      	ldr	r3, [pc, #40]	; (d94d8 <srand+0x40>)
   d94ae:	63a8      	str	r0, [r5, #56]	; 0x38
   d94b0:	e9c0 2300 	strd	r2, r3, [r0]
   d94b4:	4b09      	ldr	r3, [pc, #36]	; (d94dc <srand+0x44>)
   d94b6:	6083      	str	r3, [r0, #8]
   d94b8:	230b      	movs	r3, #11
   d94ba:	8183      	strh	r3, [r0, #12]
   d94bc:	2201      	movs	r2, #1
   d94be:	2300      	movs	r3, #0
   d94c0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d94c4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d94c6:	2200      	movs	r2, #0
   d94c8:	611c      	str	r4, [r3, #16]
   d94ca:	615a      	str	r2, [r3, #20]
   d94cc:	bd38      	pop	{r3, r4, r5, pc}
   d94ce:	bf00      	nop
   d94d0:	2003e078 	.word	0x2003e078
   d94d4:	abcd330e 	.word	0xabcd330e
   d94d8:	e66d1234 	.word	0xe66d1234
   d94dc:	0005deec 	.word	0x0005deec

000d94e0 <strcmp>:
   d94e0:	f810 2b01 	ldrb.w	r2, [r0], #1
   d94e4:	f811 3b01 	ldrb.w	r3, [r1], #1
   d94e8:	2a01      	cmp	r2, #1
   d94ea:	bf28      	it	cs
   d94ec:	429a      	cmpcs	r2, r3
   d94ee:	d0f7      	beq.n	d94e0 <strcmp>
   d94f0:	1ad0      	subs	r0, r2, r3
   d94f2:	4770      	bx	lr

000d94f4 <strcpy>:
   d94f4:	4603      	mov	r3, r0
   d94f6:	f811 2b01 	ldrb.w	r2, [r1], #1
   d94fa:	f803 2b01 	strb.w	r2, [r3], #1
   d94fe:	2a00      	cmp	r2, #0
   d9500:	d1f9      	bne.n	d94f6 <strcpy+0x2>
   d9502:	4770      	bx	lr

000d9504 <strlen>:
   d9504:	4603      	mov	r3, r0
   d9506:	f813 2b01 	ldrb.w	r2, [r3], #1
   d950a:	2a00      	cmp	r2, #0
   d950c:	d1fb      	bne.n	d9506 <strlen+0x2>
   d950e:	1a18      	subs	r0, r3, r0
   d9510:	3801      	subs	r0, #1
   d9512:	4770      	bx	lr

000d9514 <strncpy>:
   d9514:	b510      	push	{r4, lr}
   d9516:	3901      	subs	r1, #1
   d9518:	4603      	mov	r3, r0
   d951a:	b132      	cbz	r2, d952a <strncpy+0x16>
   d951c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d9520:	f803 4b01 	strb.w	r4, [r3], #1
   d9524:	3a01      	subs	r2, #1
   d9526:	2c00      	cmp	r4, #0
   d9528:	d1f7      	bne.n	d951a <strncpy+0x6>
   d952a:	441a      	add	r2, r3
   d952c:	2100      	movs	r1, #0
   d952e:	4293      	cmp	r3, r2
   d9530:	d100      	bne.n	d9534 <strncpy+0x20>
   d9532:	bd10      	pop	{r4, pc}
   d9534:	f803 1b01 	strb.w	r1, [r3], #1
   d9538:	e7f9      	b.n	d952e <strncpy+0x1a>

000d953a <strnlen>:
   d953a:	b510      	push	{r4, lr}
   d953c:	4602      	mov	r2, r0
   d953e:	4401      	add	r1, r0
   d9540:	428a      	cmp	r2, r1
   d9542:	4613      	mov	r3, r2
   d9544:	d101      	bne.n	d954a <strnlen+0x10>
   d9546:	1a18      	subs	r0, r3, r0
   d9548:	bd10      	pop	{r4, pc}
   d954a:	781c      	ldrb	r4, [r3, #0]
   d954c:	3201      	adds	r2, #1
   d954e:	2c00      	cmp	r4, #0
   d9550:	d1f6      	bne.n	d9540 <strnlen+0x6>
   d9552:	e7f8      	b.n	d9546 <strnlen+0xc>

000d9554 <strstr>:
   d9554:	b5f0      	push	{r4, r5, r6, r7, lr}
   d9556:	780c      	ldrb	r4, [r1, #0]
   d9558:	b164      	cbz	r4, d9574 <strstr+0x20>
   d955a:	4603      	mov	r3, r0
   d955c:	781a      	ldrb	r2, [r3, #0]
   d955e:	4618      	mov	r0, r3
   d9560:	1c5e      	adds	r6, r3, #1
   d9562:	b90a      	cbnz	r2, d9568 <strstr+0x14>
   d9564:	4610      	mov	r0, r2
   d9566:	e005      	b.n	d9574 <strstr+0x20>
   d9568:	4294      	cmp	r4, r2
   d956a:	d108      	bne.n	d957e <strstr+0x2a>
   d956c:	460d      	mov	r5, r1
   d956e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   d9572:	b902      	cbnz	r2, d9576 <strstr+0x22>
   d9574:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9576:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   d957a:	4297      	cmp	r7, r2
   d957c:	d0f7      	beq.n	d956e <strstr+0x1a>
   d957e:	4633      	mov	r3, r6
   d9580:	e7ec      	b.n	d955c <strstr+0x8>
	...

000d9584 <_strtol_l.isra.0>:
   d9584:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9588:	4e3a      	ldr	r6, [pc, #232]	; (d9674 <_strtol_l.isra.0+0xf0>)
   d958a:	4686      	mov	lr, r0
   d958c:	468c      	mov	ip, r1
   d958e:	4660      	mov	r0, ip
   d9590:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d9594:	5da5      	ldrb	r5, [r4, r6]
   d9596:	f015 0508 	ands.w	r5, r5, #8
   d959a:	d1f8      	bne.n	d958e <_strtol_l.isra.0+0xa>
   d959c:	2c2d      	cmp	r4, #45	; 0x2d
   d959e:	d133      	bne.n	d9608 <_strtol_l.isra.0+0x84>
   d95a0:	f89c 4000 	ldrb.w	r4, [ip]
   d95a4:	f04f 0801 	mov.w	r8, #1
   d95a8:	f100 0c02 	add.w	ip, r0, #2
   d95ac:	2b00      	cmp	r3, #0
   d95ae:	d05c      	beq.n	d966a <_strtol_l.isra.0+0xe6>
   d95b0:	2b10      	cmp	r3, #16
   d95b2:	d10c      	bne.n	d95ce <_strtol_l.isra.0+0x4a>
   d95b4:	2c30      	cmp	r4, #48	; 0x30
   d95b6:	d10a      	bne.n	d95ce <_strtol_l.isra.0+0x4a>
   d95b8:	f89c 0000 	ldrb.w	r0, [ip]
   d95bc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d95c0:	2858      	cmp	r0, #88	; 0x58
   d95c2:	d14d      	bne.n	d9660 <_strtol_l.isra.0+0xdc>
   d95c4:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d95c8:	2310      	movs	r3, #16
   d95ca:	f10c 0c02 	add.w	ip, ip, #2
   d95ce:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d95d2:	3f01      	subs	r7, #1
   d95d4:	2600      	movs	r6, #0
   d95d6:	fbb7 f9f3 	udiv	r9, r7, r3
   d95da:	4630      	mov	r0, r6
   d95dc:	fb03 7a19 	mls	sl, r3, r9, r7
   d95e0:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d95e4:	2d09      	cmp	r5, #9
   d95e6:	d818      	bhi.n	d961a <_strtol_l.isra.0+0x96>
   d95e8:	462c      	mov	r4, r5
   d95ea:	42a3      	cmp	r3, r4
   d95ec:	dd24      	ble.n	d9638 <_strtol_l.isra.0+0xb4>
   d95ee:	1c75      	adds	r5, r6, #1
   d95f0:	d007      	beq.n	d9602 <_strtol_l.isra.0+0x7e>
   d95f2:	4581      	cmp	r9, r0
   d95f4:	d31d      	bcc.n	d9632 <_strtol_l.isra.0+0xae>
   d95f6:	d101      	bne.n	d95fc <_strtol_l.isra.0+0x78>
   d95f8:	45a2      	cmp	sl, r4
   d95fa:	db1a      	blt.n	d9632 <_strtol_l.isra.0+0xae>
   d95fc:	fb00 4003 	mla	r0, r0, r3, r4
   d9600:	2601      	movs	r6, #1
   d9602:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d9606:	e7eb      	b.n	d95e0 <_strtol_l.isra.0+0x5c>
   d9608:	2c2b      	cmp	r4, #43	; 0x2b
   d960a:	bf08      	it	eq
   d960c:	f89c 4000 	ldrbeq.w	r4, [ip]
   d9610:	46a8      	mov	r8, r5
   d9612:	bf08      	it	eq
   d9614:	f100 0c02 	addeq.w	ip, r0, #2
   d9618:	e7c8      	b.n	d95ac <_strtol_l.isra.0+0x28>
   d961a:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d961e:	2d19      	cmp	r5, #25
   d9620:	d801      	bhi.n	d9626 <_strtol_l.isra.0+0xa2>
   d9622:	3c37      	subs	r4, #55	; 0x37
   d9624:	e7e1      	b.n	d95ea <_strtol_l.isra.0+0x66>
   d9626:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d962a:	2d19      	cmp	r5, #25
   d962c:	d804      	bhi.n	d9638 <_strtol_l.isra.0+0xb4>
   d962e:	3c57      	subs	r4, #87	; 0x57
   d9630:	e7db      	b.n	d95ea <_strtol_l.isra.0+0x66>
   d9632:	f04f 36ff 	mov.w	r6, #4294967295
   d9636:	e7e4      	b.n	d9602 <_strtol_l.isra.0+0x7e>
   d9638:	1c73      	adds	r3, r6, #1
   d963a:	d106      	bne.n	d964a <_strtol_l.isra.0+0xc6>
   d963c:	2322      	movs	r3, #34	; 0x22
   d963e:	f8ce 3000 	str.w	r3, [lr]
   d9642:	4638      	mov	r0, r7
   d9644:	b942      	cbnz	r2, d9658 <_strtol_l.isra.0+0xd4>
   d9646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d964a:	f1b8 0f00 	cmp.w	r8, #0
   d964e:	d000      	beq.n	d9652 <_strtol_l.isra.0+0xce>
   d9650:	4240      	negs	r0, r0
   d9652:	2a00      	cmp	r2, #0
   d9654:	d0f7      	beq.n	d9646 <_strtol_l.isra.0+0xc2>
   d9656:	b10e      	cbz	r6, d965c <_strtol_l.isra.0+0xd8>
   d9658:	f10c 31ff 	add.w	r1, ip, #4294967295
   d965c:	6011      	str	r1, [r2, #0]
   d965e:	e7f2      	b.n	d9646 <_strtol_l.isra.0+0xc2>
   d9660:	2430      	movs	r4, #48	; 0x30
   d9662:	2b00      	cmp	r3, #0
   d9664:	d1b3      	bne.n	d95ce <_strtol_l.isra.0+0x4a>
   d9666:	2308      	movs	r3, #8
   d9668:	e7b1      	b.n	d95ce <_strtol_l.isra.0+0x4a>
   d966a:	2c30      	cmp	r4, #48	; 0x30
   d966c:	d0a4      	beq.n	d95b8 <_strtol_l.isra.0+0x34>
   d966e:	230a      	movs	r3, #10
   d9670:	e7ad      	b.n	d95ce <_strtol_l.isra.0+0x4a>
   d9672:	bf00      	nop
   d9674:	000d9eae 	.word	0x000d9eae

000d9678 <strtol>:
   d9678:	4613      	mov	r3, r2
   d967a:	460a      	mov	r2, r1
   d967c:	4601      	mov	r1, r0
   d967e:	4802      	ldr	r0, [pc, #8]	; (d9688 <strtol+0x10>)
   d9680:	6800      	ldr	r0, [r0, #0]
   d9682:	f7ff bf7f 	b.w	d9584 <_strtol_l.isra.0>
   d9686:	bf00      	nop
   d9688:	2003e078 	.word	0x2003e078

000d968c <dynalib_user>:
   d968c:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   d969c:	00000000 63736964 656e6e6f 64657463     ....disconnected
   d96ac:	65727400 68742e6b 6c637765 6d6f632e     .trek.thewcl.com
   d96bc:	7b002f00 69736422 003a2264 7622202c     ./.{"dsid":., "v
   d96cc:	65756c61 2c003a22 69742220 7473656d     alue":., "timest
   d96dc:	22706d61 2c7d003a 64227b00 22617461     amp":.},.{"data"
   d96ec:	5d005b3a 4f50007d 53005453 75746174     :[.]}.POST.Statu
   d96fc:	00203a73 79646f42 6400203a 20617461     s: .Body: .data 
   d970c:	65636572 64657669 3600203a 30303445     received: .6E400
   d971c:	2d313030 33413542 3933462d 30452d33     001-B5A3-F393-E0
   d972c:	452d3941 32453035 43434434 00453941     A9-E50E24DCCA9E.
   d973c:	30344536 32303030 4135422d 33462d33     6E400002-B5A3-F3
   d974c:	452d3339 2d394130 45303545 43443432     93-E0A9-E50E24DC
   d975c:	45394143 34453600 30303030 35422d33     CA9E.6E400003-B5
   d976c:	462d3341 2d333933 39413045 3035452d     A3-F393-E0A9-E50
   d977c:	44343245 39414343 78740045 00787200     E24DCCA9E.tx.rx.
   d978c:	65636341 61007470 696c7070 69746163     Accept.applicati
   d979c:	6a2f6e6f 006e6f73 746e6f43 2d746e65     on/json.Content-
   d97ac:	65707954 69706100 6b6f742d 41006e65     Type.api-token.A
   d97bc:	652d4950 65656661 6264632d 332d3635     PI-eafee-cdb56-3
   d97cc:	64353435 6638332d 4c006437 44335349     545d-38f7d.LIS3D
   d97dc:	00000048                                H...

000d97e0 <_ZTV15Adafruit_LIS3DH>:
	...
   d97e8:	000d40b3 000d48ad 000d4ab5 000d4f65     .@...H...J..eO..
   d97f8:	000d4ab9 70747448 65696c43 093e746e     .J..HttpClient>.
   d9808:	6e6e6f43 69746365 7420676e 00203a6f     Connecting to: .
   d9818:	70747448 65696c43 093e746e 6e6e6f43     HttpClient>.Conn
   d9828:	69746365 7420676e 5049206f 2000203a     ecting to IP: . 
   d9838:	50545448 302e312f 48000a0d 43707474     HTTP/1.0...HttpC
   d9848:	6e65696c 53093e74 74726174 20666f20     lient>.Start of 
   d9858:	50545448 71655220 74736575 6c63002e     HTTP Request..cl
   d9868:	0065736f 6e6e6f43 69746365 48006e6f     ose.Connection.H
   d9878:	43707474 6e65696c 43093e74 656e6e6f     ttpClient>.Conne
   d9888:	6f697463 6166206e 64656c69 4f48002e     ction failed..HO
   d9898:	43005453 65746e6f 4c2d746e 74676e65     ST.Content-Lengt
   d98a8:	74480068 6c437074 746e6569 6e45093e     h.HttpClient>.En
   d98b8:	666f2064 54544820 65522050 73657571     d of HTTP Reques
   d98c8:	0d002e74 7474480a 696c4370 3e746e65     t....HttpClient>
   d98d8:	63655209 69766965 5420676e 74205043     .Receiving TCP t
   d98e8:	736e6172 69746361 6f206e6f 20002066     ransaction of . 
   d98f8:	65747962 48002e73 43707474 6e65696c     bytes..HttpClien
   d9908:	45093e74 726f7272 6552203a 6e6f7073     t>.Error: Respon
   d9918:	62206573 2079646f 6772616c 74207265     se body larger t
   d9928:	206e6168 66667562 002e7265 74480a0d     han buffer....Ht
   d9938:	6c437074 746e6569 6e45093e 666f2064     tpClient>.End of
   d9948:	50435420 61727420 6361736e 6e6f6974      TCP transaction
   d9958:	0a0d002e 70747448 65696c43 093e746e     ....HttpClient>.
   d9968:	6f727245 54203a72 6f656d69 77207475     Error: Timeout w
   d9978:	656c6968 61657220 676e6964 73657220     hile reading res
   d9988:	736e6f70 0d002e65 7474480a 696c4370     ponse....HttpCli
   d9998:	3e746e65 646e4509 20666f20 50545448     ent>.End of HTTP
   d99a8:	73655220 736e6f70 00282065 2e29736d      Response (.ms).
   d99b8:	74744800 696c4370 3e746e65 61745309     .HttpClient>.Sta
   d99c8:	20737574 65646f43 0d00203a 000a0d0a     tus Code: ......
   d99d8:	70747448 65696c43 093e746e 6f727245     HttpClient>.Erro
   d99e8:	43203a72 74276e61 6e696620 54482064     r: Can't find HT
   d99f8:	72205054 6f707365 2065736e 79646f62     TP response body
   d9a08:	0000002e                                ....

000d9a0c <_ZTVN5spark13EthernetClassE>:
	...
   d9a14:	000d5b33 000d5b29 000d5b1f 000d5b15     3[..)[...[...[..
   d9a24:	000d5b09 000d5afd 000d84e5 000d84ed     .[...Z..........
   d9a34:	000d5af1 000d5ae9 000d5adf 000d5ad5     .Z...Z...Z...Z..
   d9a44:	000d851d                                ....

000d9a48 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d9a48:	18100800 38302820 69726977 5300676e     .... (08wiring.S
   d9a58:	65747379 6c73206d 20706565 666e6f63     ystem sleep conf
   d9a68:	72756769 6f697461 7369206e 766e6920     iguration is inv
   d9a78:	64696c61 6977002e 676e6972 656c622e     alid..wiring.ble
   d9a88:	61745300 64207472 6f637369 69726576     .Start discoveri
   d9a98:	7320676e 69767265 2e736563 65655000     ng services..Pee
   d9aa8:	65642072 65636976 20736920 7373696d     r device is miss
   d9ab8:	21676e69 69614600 2064656c 61206f74     ing!.Failed to a
   d9ac8:	6e657070 65702064 43207265 72746e65     ppend peer Centr
   d9ad8:	64206c61 63697665 43002e65 656e6e6f     al device..Conne
   d9ae8:	64657463 20796220 746e6543 206c6172     cted by Central 
   d9af8:	69766564 002e6563 63736944 656e6e6f     device..Disconne
   d9b08:	64657463 20796220 6f6d6572 64206574     cted by remote d
   d9b18:	63697665 44002e65 696c7075 65746163     evice..Duplicate
   d9b28:	68632064 63617261 69726574 63697473     d characteristic
   d9b38:	6e616320 20746f6e 61206562 64656464      cannot be added
   d9b48:	6146002e 64656c69 206f7420 65707061     ..Failed to appe
   d9b58:	6c20646e 6c61636f 61686320 74636172     nd local charact
   d9b68:	73697265 2e636974 00000000              eristic.....

000d9b74 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle21BleCharacteristicImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9b7c:	000d621d 000d6281 000d6493 000d62ab     .b...b...d...b..
   d9b8c:	000d6221                                !b..

000d9b90 <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle14BleServiceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9b98:	000d6219 000d628f 000d621b 000d62af     .b...b...b...b..
   d9ba8:	000d6241                                Ab..

000d9bac <_ZTVSt23_Sp_counted_ptr_inplaceIN8particle17BlePeerDeviceImplESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9bb4:	000d6217 000d629d 000d6ba9 000d62b3     .b...b...k...b..
   d9bc4:	000d6261                                ab..

000d9bc8 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   d9bd0:	5f9b34fb 80000080 00001000 00000000     .4._............

000d9be0 <_ZN8particle12_GLOBAL__N_1L29PARTICLE_DEFAULT_BLE_SVC_UUIDE>:
   d9be0:	7427e37b ac15f87b 13a949dd f5720000     {.'t{....I....r.

000d9bf0 <_ZN8particle7BleUuid9BASE_UUIDE>:
   d9bf0:	5f9b34fb 80000080 00001000 00000000     .4._............
   d9c00:	006e616e 00666e69 0066766f 00707061     nan.inf.ovf.app.
   d9c10:	252d5925 64252d6d 3a482554 253a4d25     %Y-%m-%dT%H:%M:%
   d9c20:	007a2553 74637361 00656d69              S%z.asctime.

000d9c2c <_ZTV9IPAddress>:
	...
   d9c34:	000d7a5b 000d7a4b 000d7a4d              [z..Kz..Mz..

000d9c40 <_ZTV9USBSerial>:
	...
   d9c48:	000d7b69 000d7bd1 000d7ba7 000d7595     i{...{...{...u..
   d9c58:	000d7b99 000d7b6b 000d7b7b 000d7bcb     .{..k{..{{...{..
   d9c68:	000d7b8b 000d7b65                       .{..e{..

000d9c70 <_ZTV11USARTSerial>:
	...
   d9c78:	000d7c75 000d7ce1 000d7cb9 000d7595     u|...|...|...u..
   d9c88:	000d7c89 000d7ca5 000d7c97 000d7cb3     .|...|...|...|..
   d9c98:	000d7c77 000d7c7b                       w|..{|..

000d9ca0 <_ZTV7TwoWire>:
	...
   d9ca8:	000d7d71 000d7dbb 000d7d93 000d7d73     q}...}...}..s}..
   d9cb8:	000d7d9b 000d7da3 000d7dab 000d7db3     .}...}...}...}..
   d9cc8:	76636572 72726520 3d20726f 00642520     recv error = %d.

000d9cd8 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9ce0:	000d7ef7 000d7f19 000d8333 000d7f27     .~......3...'...
   d9cf0:	000d7ef9                                .~..

000d9cf4 <_ZTV9TCPClient>:
	...
   d9cfc:	000d7fa5 000d7fd9 000d7e75 000d7e8f     ........u~...~..
   d9d0c:	000d81c9 000d803b 000d800d 000d7eb9     ....;........~..
   d9d1c:	000d80d3 000d8339 000d806f 000d827d     ....9...o...}...
   d9d2c:	000d7ebb 000d7eed 000d7ea1 000d7f2b     .~...~...~..+...
   d9d3c:	000d7fed                                ....

000d9d40 <_ZTVN5spark9WiFiClassE>:
	...
   d9d48:	000d8487 000d847d 000d8473 000d8435     ....}...s...5...
   d9d58:	000d782d 000d8467 000d84e5 000d84ed     -x..g...........
   d9d68:	000d845b 000d8453 000d8449 000d843f     [...S...I...?...
   d9d78:	000d851d                                ....

000d9d7c <_ZTVN5spark12NetworkClassE>:
	...
   d9d84:	000d84a5 000d84af 000d84b9 000d84c3     ................
   d9d94:	000d84cd 000d84d9 000d84e5 000d84ed     ................
   d9da4:	000d84f5 000d8501 000d8509 000d8513     ................
   d9db4:	000d851d                                ....

000d9db8 <_ZSt7nothrow>:
	...

000d9db9 <_ZTSSt19_Sp_make_shared_tag>:
   d9db9:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   d9dc9:	5f646572 00676174                        red_tag....

000d9dd4 <_ZTISt19_Sp_make_shared_tag>:
   d9dd4:	000d9e14 000d9db9                       ........

000d9ddc <_ZTIN10__cxxabiv117__class_type_infoE>:
   d9ddc:	000d9e74 000d9de8 000d9e98              t...........

000d9de8 <_ZTSN10__cxxabiv117__class_type_infoE>:
   d9de8:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   d9df8:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   d9e08:	00000045                                E...

000d9e0c <_ZTVN10__cxxabiv117__class_type_infoE>:
   d9e0c:	00000000 000d9ddc 000d87f1 000d8805     ................
   d9e1c:	000d8999 000d8999 000d886f 000d87b1     ........o.......
   d9e2c:	000d8857 000d8819 000d87e5              W...........

000d9e38 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   d9e38:	000d9e74 000d9e44 000d9ddc              t...D.......

000d9e44 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   d9e44:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   d9e54:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   d9e64:	456f666e 00000000                       nfoE....

000d9e6c <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   d9e6c:	00000000 000d9e38 000d8899 000d88ad     ....8...........
   d9e7c:	000d8999 000d8999 000d886f 000d87b1     ........o.......
   d9e8c:	000d896d 000d88f9 000d88c1              m...........

000d9e98 <_ZTISt9type_info>:
   d9e98:	000d9e14 000d9ea0                       ........

000d9ea0 <_ZTSSt9type_info>:
   d9ea0:	74397453 5f657079 6f666e69               St9type_info.

000d9ead <_ctype_>:
   d9ead:	20202000 20202020 28282020 20282828     .         ((((( 
   d9ebd:	20202020 20202020 20202020 20202020                     
   d9ecd:	10108820 10101010 10101010 10101010      ...............
   d9edd:	04040410 04040404 10040404 10101010     ................
   d9eed:	41411010 41414141 01010101 01010101     ..AAAAAA........
   d9efd:	01010101 01010101 01010101 10101010     ................
   d9f0d:	42421010 42424242 02020202 02020202     ..BBBBBB........
   d9f1d:	02020202 02020202 02020202 10101010     ................
   d9f2d:	00000020 00000000 00000000 00000000      ...............
	...

000d9fae <link_const_variable_data_end>:
	...

000d9fb0 <link_constructors_location>:
   d9fb0:	000d48bd 	.word	0x000d48bd
   d9fb4:	000d5b3d 	.word	0x000d5b3d
   d9fb8:	000d5db1 	.word	0x000d5db1
   d9fbc:	000d756d 	.word	0x000d756d
   d9fc0:	000d7839 	.word	0x000d7839
   d9fc4:	000d78bd 	.word	0x000d78bd
   d9fc8:	000d78e5 	.word	0x000d78e5
   d9fcc:	000d8491 	.word	0x000d8491
   d9fd0:	000d85fd 	.word	0x000d85fd

000d9fd4 <link_constructors_end>:
	...
