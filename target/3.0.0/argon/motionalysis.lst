
e:/IoT/motionalysis/target/3.0.0/argon/motionalysis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002434  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6450  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000068  2003e5a0  000d6454  0001e5a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000001e8  2003e608  2003e608  0002e608  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d64bc  000d64bc  000264bc  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d64e4  000d64e4  000264e4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00164c66  00000000  00000000  000264e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00014cd3  00000000  00000000  0018b14e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0002ea04  00000000  00000000  0019fe21  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002648  00000000  00000000  001ce825  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000083a8  00000000  00000000  001d0e6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00037b57  00000000  00000000  001d9215  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0003690f  00000000  00000000  00210d6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00124984  00000000  00000000  0024767b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00006ab4  00000000  00000000  0036c000  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 f8bb 	bl	d61a8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 f8c3 	bl	d61c4 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e5a0 	.word	0x2003e5a0
   d4048:	000d6454 	.word	0x000d6454
   d404c:	2003e608 	.word	0x2003e608
   d4050:	2003e608 	.word	0x2003e608
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f001 f801 	bl	d5064 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d642c 	.word	0x000d642c
   d407c:	000d6450 	.word	0x000d6450

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b81c 	b.w	d40bc <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f82d 	bl	d40e4 <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f000 bfab 	b.w	d4fe8 <_post_loop>

000d4092 <_Znaj>:
   d4092:	f000 bcf5 	b.w	d4a80 <malloc>

000d4096 <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d4096:	f000 bcfb 	b.w	d4a90 <free>

000d409a <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409a:	7800      	ldrb	r0, [r0, #0]
   d409c:	fab0 f080 	clz	r0, r0
   d40a0:	0940      	lsrs	r0, r0, #5
   d40a2:	4770      	bx	lr

000d40a4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a4:	2301      	movs	r3, #1
   d40a6:	7003      	strb	r3, [r0, #0]
   d40a8:	4770      	bx	lr

000d40aa <_ZN15Adafruit_LIS3DHD1Ev>:
  LIS3DH_INT1_SRC_YL = 0x04,
  LIS3DH_INT1_SRC_XH = 0x02,
  LIS3DH_INT1_SRC_XL = 0x01
} list3dh_ctrl_int2_src_t;

class Adafruit_LIS3DH : public Adafruit_Sensor {
   d40aa:	4770      	bx	lr

000d40ac <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40ac:	b510      	push	{r4, lr}
   d40ae:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d40b0:	6800      	ldr	r0, [r0, #0]
   d40b2:	b108      	cbz	r0, d40b8 <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40b4:	f000 fcec 	bl	d4a90 <free>
class SystemClass {
   d40b8:	4620      	mov	r0, r4
   d40ba:	bd10      	pop	{r4, pc}

000d40bc <setup>:
#include "Adafruit_LIS3DH.h"
#include "Adafruit_Sensor.h"

Adafruit_LIS3DH lis = Adafruit_LIS3DH();

void setup() {
   d40bc:	b508      	push	{r3, lr}
  Wire.begin();
   d40be:	f001 fb7f 	bl	d57c0 <_Z19__fetch_global_Wirev>
   d40c2:	f001 f9bb 	bl	d543c <_ZN7TwoWire5beginEv>
  Serial.begin(9600);
   d40c6:	f001 f8d3 	bl	d5270 <_Z16_fetch_usbserialv>
   d40ca:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d40ce:	f001 f8c3 	bl	d5258 <_ZN9USBSerial5beginEl>
  lis.begin(0x18);
}
   d40d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  lis.begin(0x18);
   d40d6:	4802      	ldr	r0, [pc, #8]	; (d40e0 <setup+0x24>)
   d40d8:	2118      	movs	r1, #24
   d40da:	f000 b99b 	b.w	d4414 <_ZN15Adafruit_LIS3DH5beginEh>
   d40de:	bf00      	nop
   d40e0:	2003e618 	.word	0x2003e618

000d40e4 <loop>:

sensors_event_t event1;

void loop() {
   d40e4:	b510      	push	{r4, lr}
  lis.read();      // get X Y and Z data at once
   d40e6:	4c18      	ldr	r4, [pc, #96]	; (d4148 <loop+0x64>)
   d40e8:	4620      	mov	r0, r4
   d40ea:	f000 f9e5 	bl	d44b8 <_ZN15Adafruit_LIS3DH4readEv>
  // Then print out the raw data
  Serial.print("X:  "); Serial.print(lis.x_g);
   d40ee:	f001 f8bf 	bl	d5270 <_Z16_fetch_usbserialv>
   d40f2:	4916      	ldr	r1, [pc, #88]	; (d414c <loop+0x68>)
   d40f4:	f000 fe1c 	bl	d4d30 <_ZN5Print5printEPKc>
   d40f8:	f001 f8ba 	bl	d5270 <_Z16_fetch_usbserialv>
   d40fc:	ed94 0a03 	vldr	s0, [r4, #12]
   d4100:	2102      	movs	r1, #2
   d4102:	f000 ff0f 	bl	d4f24 <_ZN5Print5printEfi>
  Serial.print("  \tY:  "); Serial.print(lis.y_g);
   d4106:	f001 f8b3 	bl	d5270 <_Z16_fetch_usbserialv>
   d410a:	4911      	ldr	r1, [pc, #68]	; (d4150 <loop+0x6c>)
   d410c:	f000 fe10 	bl	d4d30 <_ZN5Print5printEPKc>
   d4110:	f001 f8ae 	bl	d5270 <_Z16_fetch_usbserialv>
   d4114:	ed94 0a04 	vldr	s0, [r4, #16]
   d4118:	2102      	movs	r1, #2
   d411a:	f000 ff03 	bl	d4f24 <_ZN5Print5printEfi>
  Serial.print("  \tZ:  "); Serial.print(lis.z_g);
   d411e:	f001 f8a7 	bl	d5270 <_Z16_fetch_usbserialv>
   d4122:	490c      	ldr	r1, [pc, #48]	; (d4154 <loop+0x70>)
   d4124:	f000 fe04 	bl	d4d30 <_ZN5Print5printEPKc>
   d4128:	f001 f8a2 	bl	d5270 <_Z16_fetch_usbserialv>
   d412c:	ed94 0a05 	vldr	s0, [r4, #20]
   d4130:	2102      	movs	r1, #2
   d4132:	f000 fef7 	bl	d4f24 <_ZN5Print5printEfi>
  //Serial.print("\t\tX: "); Serial.print(event.acceleration.x);
  //Serial.print(" \tY: "); Serial.print(event.acceleration.y);
  //Serial.print(" \tZ: "); Serial.print(event.acceleration.z);
  //Serial.println(" m/s^2 ");

  Serial.println();
   d4136:	f001 f89b 	bl	d5270 <_Z16_fetch_usbserialv>
   d413a:	f000 fe00 	bl	d4d3e <_ZN5Print7printlnEv>

  delay(200);
}
   d413e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(200);
   d4142:	20c8      	movs	r0, #200	; 0xc8
   d4144:	f000 bf16 	b.w	d4f74 <delay>
   d4148:	2003e618 	.word	0x2003e618
   d414c:	000d6268 	.word	0x000d6268
   d4150:	000d626d 	.word	0x000d626d
   d4154:	000d6275 	.word	0x000d6275

000d4158 <_ZN15Adafruit_LIS3DHD0Ev>:
   d4158:	b510      	push	{r4, lr}
   d415a:	212c      	movs	r1, #44	; 0x2c
   d415c:	4604      	mov	r4, r0
   d415e:	f001 fb5c 	bl	d581a <_ZdlPvj>
   d4162:	4620      	mov	r0, r4
   d4164:	bd10      	pop	{r4, pc}
	...

000d4168 <_GLOBAL__sub_I_SystemMode>:
}
   d4168:	b510      	push	{r4, lr}
              error_(SYSTEM_ERROR_NONE) {
   d416a:	4c0d      	ldr	r4, [pc, #52]	; (d41a0 <_GLOBAL__sub_I_SystemMode+0x38>)
   d416c:	2300      	movs	r3, #0
   d416e:	6023      	str	r3, [r4, #0]
   d4170:	80a3      	strh	r3, [r4, #4]
    SleepResult() {}
   d4172:	71a3      	strb	r3, [r4, #6]
   d4174:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
   d4178:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d417a:	2003      	movs	r0, #3
   d417c:	f000 fbf4 	bl	d4968 <set_system_mode>
SYSTEM_MODE(MANUAL);
   d4180:	4620      	mov	r0, r4
Adafruit_LIS3DH lis = Adafruit_LIS3DH();
   d4182:	4c08      	ldr	r4, [pc, #32]	; (d41a4 <_GLOBAL__sub_I_SystemMode+0x3c>)
SYSTEM_MODE(MANUAL);
   d4184:	4a08      	ldr	r2, [pc, #32]	; (d41a8 <_GLOBAL__sub_I_SystemMode+0x40>)
   d4186:	4909      	ldr	r1, [pc, #36]	; (d41ac <_GLOBAL__sub_I_SystemMode+0x44>)
   d4188:	f001 fb42 	bl	d5810 <__aeabi_atexit>
Adafruit_LIS3DH lis = Adafruit_LIS3DH();
   d418c:	4620      	mov	r0, r4
   d418e:	f000 f833 	bl	d41f8 <_ZN15Adafruit_LIS3DHC1Ev>
   d4192:	4620      	mov	r0, r4
   d4194:	4a04      	ldr	r2, [pc, #16]	; (d41a8 <_GLOBAL__sub_I_SystemMode+0x40>)
   d4196:	4906      	ldr	r1, [pc, #24]	; (d41b0 <_GLOBAL__sub_I_SystemMode+0x48>)
}
   d4198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
Adafruit_LIS3DH lis = Adafruit_LIS3DH();
   d419c:	f001 bb38 	b.w	d5810 <__aeabi_atexit>
   d41a0:	2003e60c 	.word	0x2003e60c
   d41a4:	2003e618 	.word	0x2003e618
   d41a8:	2003e608 	.word	0x2003e608
   d41ac:	000d40ad 	.word	0x000d40ad
   d41b0:	000d40ab 	.word	0x000d40ab

000d41b4 <_ZN15Adafruit_Sensor15enableAutoRangeEb>:
  // Constructor(s)
  Adafruit_Sensor() {}
  virtual ~Adafruit_Sensor() {}

  // These must be defined by the subclass
  virtual void enableAutoRange(bool enabled) {};
   d41b4:	4770      	bx	lr
	...

000d41b8 <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t>:
/**************************************************************************/
/*!
    @brief  Gets the sensor_t data
*/
/**************************************************************************/
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
   d41b8:	460b      	mov	r3, r1
   d41ba:	b510      	push	{r4, lr}
  /* Clear the sensor_t object */
  memset(sensor, 0, sizeof(sensor_t));
   d41bc:	2228      	movs	r2, #40	; 0x28
void Adafruit_LIS3DH::getSensor(sensor_t *sensor) {
   d41be:	4604      	mov	r4, r0
  memset(sensor, 0, sizeof(sensor_t));
   d41c0:	2100      	movs	r1, #0
   d41c2:	4618      	mov	r0, r3
   d41c4:	f001 fffe 	bl	d61c4 <memset>

  /* Insert the sensor name in the fixed length char array */
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
   d41c8:	4908      	ldr	r1, [pc, #32]	; (d41ec <_ZN15Adafruit_LIS3DH9getSensorEP8sensor_t+0x34>)
   d41ca:	220b      	movs	r2, #11
   d41cc:	f002 f82e 	bl	d622c <strncpy>
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d41d0:	2200      	movs	r2, #0
  sensor->version     = 1;
   d41d2:	2101      	movs	r1, #1
  sensor->name[sizeof(sensor->name)- 1] = 0;
   d41d4:	72c2      	strb	r2, [r0, #11]
  sensor->version     = 1;
   d41d6:	60c1      	str	r1, [r0, #12]
  strncpy (sensor->name, "LIS3DH", sizeof(sensor->name) - 1);
   d41d8:	4603      	mov	r3, r0
  sensor->sensor_id   = _sensorID;
   d41da:	69a0      	ldr	r0, [r4, #24]
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
  sensor->min_delay   = 0;
   d41dc:	625a      	str	r2, [r3, #36]	; 0x24
  sensor->type        = SENSOR_TYPE_ACCELEROMETER;
   d41de:	e9c3 0104 	strd	r0, r1, [r3, #16]
  sensor->max_value   = 0;
   d41e2:	2200      	movs	r2, #0
   d41e4:	619a      	str	r2, [r3, #24]
  sensor->min_value   = 0;
   d41e6:	61da      	str	r2, [r3, #28]
  sensor->resolution  = 0;
   d41e8:	621a      	str	r2, [r3, #32]
}
   d41ea:	bd10      	pop	{r4, pc}
   d41ec:	000d627d 	.word	0x000d627d

000d41f0 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d41f0:	6803      	ldr	r3, [r0, #0]
   d41f2:	b2c9      	uxtb	r1, r1
   d41f4:	689b      	ldr	r3, [r3, #8]
   d41f6:	4718      	bx	r3

000d41f8 <_ZN15Adafruit_LIS3DHC1Ev>:
  : _cs(-1), _mosi(-1), _miso(-1), _sck(-1), _sensorID(-1)
   d41f8:	4a06      	ldr	r2, [pc, #24]	; (d4214 <_ZN15Adafruit_LIS3DHC1Ev+0x1c>)
   d41fa:	6002      	str	r2, [r0, #0]
   d41fc:	f04f 32ff 	mov.w	r2, #4294967295
   d4200:	6182      	str	r2, [r0, #24]
   d4202:	7742      	strb	r2, [r0, #29]
   d4204:	83c2      	strh	r2, [r0, #30]
   d4206:	22ff      	movs	r2, #255	; 0xff
   d4208:	f880 2020 	strb.w	r2, [r0, #32]
   d420c:	2208      	movs	r2, #8
   d420e:	6242      	str	r2, [r0, #36]	; 0x24
}
   d4210:	4770      	bx	lr
   d4212:	bf00      	nop
   d4214:	000d628c 	.word	0x000d628c

000d4218 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4218:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d421a:	4c0b      	ldr	r4, [pc, #44]	; (d4248 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d421c:	7821      	ldrb	r1, [r4, #0]
   d421e:	f3bf 8f5b 	dmb	ish
   d4222:	f011 0101 	ands.w	r1, r1, #1
   d4226:	d10b      	bne.n	d4240 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4228:	4620      	mov	r0, r4
   d422a:	9101      	str	r1, [sp, #4]
   d422c:	f7ff ff35 	bl	d409a <__cxa_guard_acquire>
   d4230:	9901      	ldr	r1, [sp, #4]
   d4232:	b128      	cbz	r0, d4240 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4234:	4805      	ldr	r0, [pc, #20]	; (d424c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4236:	f000 fc7f 	bl	d4b38 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d423a:	4620      	mov	r0, r4
   d423c:	f7ff ff32 	bl	d40a4 <__cxa_guard_release>
        return instance;
    }
   d4240:	4802      	ldr	r0, [pc, #8]	; (d424c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4242:	b002      	add	sp, #8
   d4244:	bd10      	pop	{r4, pc}
   d4246:	bf00      	nop
   d4248:	2003e644 	.word	0x2003e644
   d424c:	2003e648 	.word	0x2003e648

000d4250 <_ZN15Adafruit_LIS3DH7spixferEh>:
/*!
    @brief  Low level SPI
*/
/**************************************************************************/

uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   d4250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  #ifndef __AVR_ATtiny85__
  if (_sck == -1)
   d4254:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d4258:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::spixfer(uint8_t x) {
   d425a:	4605      	mov	r5, r0
   d425c:	460f      	mov	r7, r1
  if (_sck == -1)
   d425e:	d106      	bne.n	d426e <_ZN15Adafruit_LIS3DH7spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d4260:	f7ff ffda 	bl	d4218 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d4264:	4639      	mov	r1, r7
    if (digitalRead(_miso))
      reply |= 1;
  }
  return reply;
  #endif
}
   d4266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d426a:	f000 bcef 	b.w	d4c4c <_ZN8SPIClass8transferEh>
  uint8_t reply = 0;
   d426e:	2400      	movs	r4, #0
  for (int i=7; i>=0; i--) {
   d4270:	2607      	movs	r6, #7
    digitalWrite(_mosi, x & (1<<i));
   d4272:	f04f 0801 	mov.w	r8, #1
    digitalWrite(_sck, LOW);
   d4276:	f995 0020 	ldrsb.w	r0, [r5, #32]
   d427a:	2100      	movs	r1, #0
   d427c:	b280      	uxth	r0, r0
   d427e:	f001 fa5a 	bl	d5736 <digitalWrite>
    digitalWrite(_mosi, x & (1<<i));
   d4282:	f995 001e 	ldrsb.w	r0, [r5, #30]
   d4286:	fa08 f106 	lsl.w	r1, r8, r6
   d428a:	4039      	ands	r1, r7
   d428c:	b280      	uxth	r0, r0
   d428e:	f001 fa52 	bl	d5736 <digitalWrite>
    digitalWrite(_sck, HIGH);
   d4292:	f995 0020 	ldrsb.w	r0, [r5, #32]
   d4296:	2101      	movs	r1, #1
   d4298:	b280      	uxth	r0, r0
   d429a:	f001 fa4c 	bl	d5736 <digitalWrite>
    if (digitalRead(_miso))
   d429e:	f995 001f 	ldrsb.w	r0, [r5, #31]
    reply <<= 1;
   d42a2:	0064      	lsls	r4, r4, #1
    if (digitalRead(_miso))
   d42a4:	b280      	uxth	r0, r0
    reply <<= 1;
   d42a6:	b2e4      	uxtb	r4, r4
    if (digitalRead(_miso))
   d42a8:	f001 fa5e 	bl	d5768 <digitalRead>
   d42ac:	b108      	cbz	r0, d42b2 <_ZN15Adafruit_LIS3DH7spixferEh+0x62>
      reply |= 1;
   d42ae:	f044 0401 	orr.w	r4, r4, #1
  for (int i=7; i>=0; i--) {
   d42b2:	3e01      	subs	r6, #1
   d42b4:	d2df      	bcs.n	d4276 <_ZN15Adafruit_LIS3DH7spixferEh+0x26>
}
   d42b6:	4620      	mov	r0, r4
   d42b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d42bc <_ZN15Adafruit_LIS3DH16beginTransactionEv>:
  #endif
  return value;
}


void Adafruit_LIS3DH::beginTransaction() {
   d42bc:	b508      	push	{r3, lr}
        instance().setBitOrder(order);
   d42be:	f7ff ffab 	bl	d4218 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d42c2:	2101      	movs	r1, #1
   d42c4:	f000 fc53 	bl	d4b6e <_ZN8SPIClass11setBitOrderEh>
        return instance().setClockSpeed(value, scale);
   d42c8:	f7ff ffa6 	bl	d4218 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d42cc:	4905      	ldr	r1, [pc, #20]	; (d42e4 <_ZN15Adafruit_LIS3DH16beginTransactionEv+0x28>)
   d42ce:	2201      	movs	r2, #1
   d42d0:	f000 fc8a 	bl	d4be8 <_ZN8SPIClass13setClockSpeedEjj>
        instance().setDataMode(mode);
   d42d4:	f7ff ffa0 	bl	d4218 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    SPI.setClockSpeed(500000);
    SPI.setDataMode(SPI_MODE0);
#else
  SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
#endif
}
   d42d8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   d42dc:	2100      	movs	r1, #0
   d42de:	f000 bc59 	b.w	d4b94 <_ZN8SPIClass11setDataModeEh>
   d42e2:	bf00      	nop
   d42e4:	0007a120 	.word	0x0007a120

000d42e8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>:
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   d42e8:	b570      	push	{r4, r5, r6, lr}
  if (_cs == -1) {
   d42ea:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d42ee:	3301      	adds	r3, #1
void Adafruit_LIS3DH::writeRegister8(uint8_t reg, uint8_t value) {
   d42f0:	4604      	mov	r4, r0
   d42f2:	460e      	mov	r6, r1
   d42f4:	4615      	mov	r5, r2
  if (_cs == -1) {
   d42f6:	d116      	bne.n	d4326 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x3e>
    Wire.beginTransmission((uint8_t)_i2caddr);
   d42f8:	f001 fa62 	bl	d57c0 <_Z19__fetch_global_Wirev>
   d42fc:	7f21      	ldrb	r1, [r4, #28]
   d42fe:	f001 f8cf 	bl	d54a0 <_ZN7TwoWire17beginTransmissionEh>
    Wire.write((uint8_t)reg);
   d4302:	f001 fa5d 	bl	d57c0 <_Z19__fetch_global_Wirev>
   d4306:	6803      	ldr	r3, [r0, #0]
   d4308:	4631      	mov	r1, r6
   d430a:	689b      	ldr	r3, [r3, #8]
   d430c:	4798      	blx	r3
    Wire.write((uint8_t)value);
   d430e:	f001 fa57 	bl	d57c0 <_Z19__fetch_global_Wirev>
   d4312:	6803      	ldr	r3, [r0, #0]
   d4314:	4629      	mov	r1, r5
   d4316:	689b      	ldr	r3, [r3, #8]
   d4318:	4798      	blx	r3
    Wire.endTransmission();
   d431a:	f001 fa51 	bl	d57c0 <_Z19__fetch_global_Wirev>
}
   d431e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Wire.endTransmission();
   d4322:	f001 b8c8 	b.w	d54b6 <_ZN7TwoWire15endTransmissionEv>
	if (_sck == -1)
   d4326:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d432a:	3301      	adds	r3, #1
   d432c:	d101      	bne.n	d4332 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh+0x4a>
	  beginTransaction();
   d432e:	f7ff ffc5 	bl	d42bc <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   d4332:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4336:	2100      	movs	r1, #0
   d4338:	b280      	uxth	r0, r0
   d433a:	f001 f9fc 	bl	d5736 <digitalWrite>
    spixfer(reg & ~0x80); // write, bit 7 low
   d433e:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d4342:	4620      	mov	r0, r4
   d4344:	f7ff ff84 	bl	d4250 <_ZN15Adafruit_LIS3DH7spixferEh>
    spixfer(value);
   d4348:	4629      	mov	r1, r5
   d434a:	4620      	mov	r0, r4
   d434c:	f7ff ff80 	bl	d4250 <_ZN15Adafruit_LIS3DH7spixferEh>
    digitalWrite(_cs, HIGH);
   d4350:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4354:	2101      	movs	r1, #1
}
   d4356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    digitalWrite(_cs, HIGH);
   d435a:	b280      	uxth	r0, r0
   d435c:	f001 b9eb 	b.w	d5736 <digitalWrite>

000d4360 <_ZN15Adafruit_LIS3DH13readRegister8Eh>:
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   d4360:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   d4362:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d4366:	3301      	adds	r3, #1
uint8_t Adafruit_LIS3DH::readRegister8(uint8_t reg) {
   d4368:	4604      	mov	r4, r0
   d436a:	460d      	mov	r5, r1
  if (_cs == -1) {
   d436c:	d11d      	bne.n	d43aa <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x4a>
    Wire.beginTransmission(_i2caddr);
   d436e:	f001 fa27 	bl	d57c0 <_Z19__fetch_global_Wirev>
   d4372:	f994 101c 	ldrsb.w	r1, [r4, #28]
   d4376:	f001 f897 	bl	d54a8 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write((uint8_t)reg);
   d437a:	f001 fa21 	bl	d57c0 <_Z19__fetch_global_Wirev>
   d437e:	6803      	ldr	r3, [r0, #0]
   d4380:	4629      	mov	r1, r5
   d4382:	689b      	ldr	r3, [r3, #8]
   d4384:	4798      	blx	r3
    Wire.endTransmission();
   d4386:	f001 fa1b 	bl	d57c0 <_Z19__fetch_global_Wirev>
   d438a:	f001 f894 	bl	d54b6 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 1);
   d438e:	f001 fa17 	bl	d57c0 <_Z19__fetch_global_Wirev>
   d4392:	7f21      	ldrb	r1, [r4, #28]
   d4394:	2201      	movs	r2, #1
   d4396:	f001 f880 	bl	d549a <_ZN7TwoWire11requestFromEhj>
    value = Wire.read();
   d439a:	f001 fa11 	bl	d57c0 <_Z19__fetch_global_Wirev>
   d439e:	6803      	ldr	r3, [r0, #0]
   d43a0:	695b      	ldr	r3, [r3, #20]
   d43a2:	4798      	blx	r3
   d43a4:	b2c5      	uxtb	r5, r0
}
   d43a6:	4628      	mov	r0, r5
   d43a8:	bd38      	pop	{r3, r4, r5, pc}
	if (_sck == -1)
   d43aa:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d43ae:	3301      	adds	r3, #1
   d43b0:	d101      	bne.n	d43b6 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x56>
	  beginTransaction();
   d43b2:	f7ff ff83 	bl	d42bc <_ZN15Adafruit_LIS3DH16beginTransactionEv>
	digitalWrite(_cs, LOW);
   d43b6:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d43ba:	2100      	movs	r1, #0
   d43bc:	b280      	uxth	r0, r0
   d43be:	f001 f9ba 	bl	d5736 <digitalWrite>
    spixfer(reg | 0x80); // read, bit 7 high
   d43c2:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d43c6:	4620      	mov	r0, r4
   d43c8:	f7ff ff42 	bl	d4250 <_ZN15Adafruit_LIS3DH7spixferEh>
    value = spixfer(0);
   d43cc:	2100      	movs	r1, #0
   d43ce:	4620      	mov	r0, r4
   d43d0:	f7ff ff3e 	bl	d4250 <_ZN15Adafruit_LIS3DH7spixferEh>
   d43d4:	4605      	mov	r5, r0
    digitalWrite(_cs, HIGH);
   d43d6:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d43da:	2101      	movs	r1, #1
   d43dc:	b280      	uxth	r0, r0
   d43de:	f001 f9aa 	bl	d5736 <digitalWrite>
    if (_sck == -1)
   d43e2:	e7e0      	b.n	d43a6 <_ZN15Adafruit_LIS3DH13readRegister8Eh+0x46>

000d43e4 <_ZN15Adafruit_LIS3DH8getRangeEv>:
{
   d43e4:	b508      	push	{r3, lr}
  return (lis3dh_range_t)((readRegister8(LIS3DH_REG_CTRL4) >> 4) & 0x03);
   d43e6:	2123      	movs	r1, #35	; 0x23
   d43e8:	f7ff ffba 	bl	d4360 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
}
   d43ec:	f3c0 1001 	ubfx	r0, r0, #4, #2
   d43f0:	bd08      	pop	{r3, pc}

000d43f2 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>:
{
   d43f2:	b538      	push	{r3, r4, r5, lr}
   d43f4:	460d      	mov	r5, r1
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   d43f6:	2120      	movs	r1, #32
{
   d43f8:	4604      	mov	r4, r0
  uint8_t ctl1 = readRegister8(LIS3DH_REG_CTRL1);
   d43fa:	f7ff ffb1 	bl	d4360 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  ctl1 &= ~(0xF0); // mask off bits
   d43fe:	f000 020f 	and.w	r2, r0, #15
  ctl1 |= (dataRate << 4);
   d4402:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   d4406:	4620      	mov	r0, r4
   d4408:	b2d2      	uxtb	r2, r2
}
   d440a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  writeRegister8(LIS3DH_REG_CTRL1, ctl1);
   d440e:	2120      	movs	r1, #32
   d4410:	f7ff bf6a 	b.w	d42e8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>

000d4414 <_ZN15Adafruit_LIS3DH5beginEh>:
bool Adafruit_LIS3DH::begin(uint8_t i2caddr) {
   d4414:	b510      	push	{r4, lr}
   d4416:	4604      	mov	r4, r0
  _i2caddr = i2caddr;
   d4418:	7701      	strb	r1, [r0, #28]
  if (_cs == -1) {
   d441a:	f990 001d 	ldrsb.w	r0, [r0, #29]
   d441e:	1c42      	adds	r2, r0, #1
   d4420:	d123      	bne.n	d446a <_ZN15Adafruit_LIS3DH5beginEh+0x56>
    Wire.begin();
   d4422:	f001 f9cd 	bl	d57c0 <_Z19__fetch_global_Wirev>
   d4426:	f001 f809 	bl	d543c <_ZN7TwoWire5beginEv>
  uint8_t deviceid = readRegister8(LIS3DH_REG_WHOAMI);
   d442a:	210f      	movs	r1, #15
   d442c:	4620      	mov	r0, r4
   d442e:	f7ff ff97 	bl	d4360 <_ZN15Adafruit_LIS3DH13readRegister8Eh>
  if (deviceid != 0x33)
   d4432:	2833      	cmp	r0, #51	; 0x33
   d4434:	d13d      	bne.n	d44b2 <_ZN15Adafruit_LIS3DH5beginEh+0x9e>
  writeRegister8(LIS3DH_REG_CTRL1, 0x07);
   d4436:	2207      	movs	r2, #7
   d4438:	2120      	movs	r1, #32
   d443a:	4620      	mov	r0, r4
   d443c:	f7ff ff54 	bl	d42e8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  setDataRate(LIS3DH_DATARATE_400_HZ);
   d4440:	2107      	movs	r1, #7
   d4442:	4620      	mov	r0, r4
   d4444:	f7ff ffd5 	bl	d43f2 <_ZN15Adafruit_LIS3DH11setDataRateE17lis3dh_dataRate_t>
  writeRegister8(LIS3DH_REG_CTRL4, 0x88);
   d4448:	2288      	movs	r2, #136	; 0x88
   d444a:	2123      	movs	r1, #35	; 0x23
   d444c:	4620      	mov	r0, r4
   d444e:	f7ff ff4b 	bl	d42e8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_CTRL3, 0x10);
   d4452:	2210      	movs	r2, #16
   d4454:	2122      	movs	r1, #34	; 0x22
   d4456:	4620      	mov	r0, r4
   d4458:	f7ff ff46 	bl	d42e8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  writeRegister8(LIS3DH_REG_TEMPCFG, 0x80);
   d445c:	4620      	mov	r0, r4
   d445e:	2280      	movs	r2, #128	; 0x80
   d4460:	211f      	movs	r1, #31
   d4462:	f7ff ff41 	bl	d42e8 <_ZN15Adafruit_LIS3DH14writeRegister8Ehh>
  return true;
   d4466:	2001      	movs	r0, #1
}
   d4468:	bd10      	pop	{r4, pc}
    digitalWrite(_cs, HIGH);
   d446a:	2101      	movs	r1, #1
   d446c:	b280      	uxth	r0, r0
   d446e:	f001 f962 	bl	d5736 <digitalWrite>
    pinMode(_cs, OUTPUT);
   d4472:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4476:	2101      	movs	r1, #1
   d4478:	b280      	uxth	r0, r0
   d447a:	f001 f94b 	bl	d5714 <pinMode>
    if (_sck == -1) {
   d447e:	f994 0020 	ldrsb.w	r0, [r4, #32]
   d4482:	1c43      	adds	r3, r0, #1
   d4484:	d104      	bne.n	d4490 <_ZN15Adafruit_LIS3DH5beginEh+0x7c>
        instance().begin();
   d4486:	f7ff fec7 	bl	d4218 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d448a:	f000 fb5f 	bl	d4b4c <_ZN8SPIClass5beginEv>
    }
   d448e:	e7cc      	b.n	d442a <_ZN15Adafruit_LIS3DH5beginEh+0x16>
      pinMode(_sck, OUTPUT);
   d4490:	2101      	movs	r1, #1
   d4492:	b280      	uxth	r0, r0
   d4494:	f001 f93e 	bl	d5714 <pinMode>
      pinMode(_mosi, OUTPUT);
   d4498:	f994 001e 	ldrsb.w	r0, [r4, #30]
   d449c:	2101      	movs	r1, #1
   d449e:	b280      	uxth	r0, r0
   d44a0:	f001 f938 	bl	d5714 <pinMode>
      pinMode(_miso, INPUT);
   d44a4:	f994 001f 	ldrsb.w	r0, [r4, #31]
   d44a8:	2100      	movs	r1, #0
   d44aa:	b280      	uxth	r0, r0
   d44ac:	f001 f932 	bl	d5714 <pinMode>
   d44b0:	e7bb      	b.n	d442a <_ZN15Adafruit_LIS3DH5beginEh+0x16>
    return false;
   d44b2:	2000      	movs	r0, #0
   d44b4:	e7d8      	b.n	d4468 <_ZN15Adafruit_LIS3DH5beginEh+0x54>
	...

000d44b8 <_ZN15Adafruit_LIS3DH4readEv>:
void Adafruit_LIS3DH::read(void) {
   d44b8:	b538      	push	{r3, r4, r5, lr}
  if (_cs == -1) {
   d44ba:	f990 301d 	ldrsb.w	r3, [r0, #29]
   d44be:	3301      	adds	r3, #1
void Adafruit_LIS3DH::read(void) {
   d44c0:	4604      	mov	r4, r0
  if (_cs == -1) {
   d44c2:	d176      	bne.n	d45b2 <_ZN15Adafruit_LIS3DH4readEv+0xfa>
    Wire.beginTransmission(_i2caddr);
   d44c4:	f001 f97c 	bl	d57c0 <_Z19__fetch_global_Wirev>
   d44c8:	f994 101c 	ldrsb.w	r1, [r4, #28]
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   d44cc:	4d5c      	ldr	r5, [pc, #368]	; (d4640 <_ZN15Adafruit_LIS3DH4readEv+0x188>)
    Wire.beginTransmission(_i2caddr);
   d44ce:	f000 ffeb 	bl	d54a8 <_ZN7TwoWire17beginTransmissionEi>
    Wire.write(LIS3DH_REG_OUT_X_L | 0x80); // 0x80 for autoincrement
   d44d2:	f001 f975 	bl	d57c0 <_Z19__fetch_global_Wirev>
   d44d6:	21a8      	movs	r1, #168	; 0xa8
   d44d8:	f7ff fe8a 	bl	d41f0 <_ZN7TwoWire5writeEi>
    Wire.endTransmission();
   d44dc:	f001 f970 	bl	d57c0 <_Z19__fetch_global_Wirev>
   d44e0:	f000 ffe9 	bl	d54b6 <_ZN7TwoWire15endTransmissionEv>
    Wire.requestFrom(_i2caddr, 6);
   d44e4:	f001 f96c 	bl	d57c0 <_Z19__fetch_global_Wirev>
   d44e8:	7f21      	ldrb	r1, [r4, #28]
   d44ea:	2206      	movs	r2, #6
   d44ec:	f000 ffd5 	bl	d549a <_ZN7TwoWire11requestFromEhj>
    x = Wire.read(); x |= ((uint16_t)Wire.read()) << 8;
   d44f0:	f001 f966 	bl	d57c0 <_Z19__fetch_global_Wirev>
   d44f4:	6803      	ldr	r3, [r0, #0]
   d44f6:	695b      	ldr	r3, [r3, #20]
   d44f8:	4798      	blx	r3
   d44fa:	80e0      	strh	r0, [r4, #6]
   d44fc:	f001 f960 	bl	d57c0 <_Z19__fetch_global_Wirev>
   d4500:	6803      	ldr	r3, [r0, #0]
   d4502:	695b      	ldr	r3, [r3, #20]
   d4504:	4798      	blx	r3
   d4506:	88e3      	ldrh	r3, [r4, #6]
   d4508:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   d450c:	4318      	orrs	r0, r3
   d450e:	80e0      	strh	r0, [r4, #6]
    y = Wire.read(); y |= ((uint16_t)Wire.read()) << 8;
   d4510:	f001 f956 	bl	d57c0 <_Z19__fetch_global_Wirev>
   d4514:	6803      	ldr	r3, [r0, #0]
   d4516:	695b      	ldr	r3, [r3, #20]
   d4518:	4798      	blx	r3
   d451a:	8120      	strh	r0, [r4, #8]
   d451c:	f001 f950 	bl	d57c0 <_Z19__fetch_global_Wirev>
   d4520:	6803      	ldr	r3, [r0, #0]
   d4522:	695b      	ldr	r3, [r3, #20]
   d4524:	4798      	blx	r3
   d4526:	8923      	ldrh	r3, [r4, #8]
   d4528:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   d452c:	4318      	orrs	r0, r3
   d452e:	8120      	strh	r0, [r4, #8]
    z = Wire.read(); z |= ((uint16_t)Wire.read()) << 8;
   d4530:	f001 f946 	bl	d57c0 <_Z19__fetch_global_Wirev>
   d4534:	6803      	ldr	r3, [r0, #0]
   d4536:	695b      	ldr	r3, [r3, #20]
   d4538:	4798      	blx	r3
   d453a:	8160      	strh	r0, [r4, #10]
   d453c:	f001 f940 	bl	d57c0 <_Z19__fetch_global_Wirev>
   d4540:	6803      	ldr	r3, [r0, #0]
   d4542:	695b      	ldr	r3, [r3, #20]
   d4544:	4798      	blx	r3
   d4546:	ea05 2000 	and.w	r0, r5, r0, lsl #8
   d454a:	8965      	ldrh	r5, [r4, #10]
   d454c:	4328      	orrs	r0, r5
   d454e:	8160      	strh	r0, [r4, #10]
  uint8_t range = getRange();
   d4550:	4620      	mov	r0, r4
   d4552:	f7ff ff47 	bl	d43e4 <_ZN15Adafruit_LIS3DH8getRangeEv>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   d4556:	2803      	cmp	r0, #3
   d4558:	d069      	beq.n	d462e <_ZN15Adafruit_LIS3DH4readEv+0x176>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   d455a:	2802      	cmp	r0, #2
   d455c:	d06a      	beq.n	d4634 <_ZN15Adafruit_LIS3DH4readEv+0x17c>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   d455e:	2801      	cmp	r0, #1
   d4560:	d06b      	beq.n	d463a <_ZN15Adafruit_LIS3DH4readEv+0x182>
  if (range == LIS3DH_RANGE_2_G) divider = 16380;
   d4562:	2800      	cmp	r0, #0
   d4564:	f643 73fc 	movw	r3, #16380	; 0x3ffc
   d4568:	bf18      	it	ne
   d456a:	2301      	movne	r3, #1
  x_g = (float)x / divider;
   d456c:	ee07 3a90 	vmov	s15, r3
   d4570:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d4574:	ee07 3a10 	vmov	s14, r3
   d4578:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d457c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   d4580:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
  x_g = (float)x / divider;
   d4584:	eec7 6a27 	vdiv.f32	s13, s14, s15
  y_g = (float)y / divider;
   d4588:	ee07 3a10 	vmov	s14, r3
   d458c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  x_g = (float)x / divider;
   d4590:	edc4 6a03 	vstr	s13, [r4, #12]
  y_g = (float)y / divider;
   d4594:	eec7 6a27 	vdiv.f32	s13, s14, s15
  z_g = (float)z / divider;
   d4598:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d459c:	ee07 3a10 	vmov	s14, r3
   d45a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
  y_g = (float)y / divider;
   d45a4:	edc4 6a04 	vstr	s13, [r4, #16]
  z_g = (float)z / divider;
   d45a8:	eec7 6a27 	vdiv.f32	s13, s14, s15
   d45ac:	edc4 6a05 	vstr	s13, [r4, #20]
}
   d45b0:	bd38      	pop	{r3, r4, r5, pc}
    if (_sck == -1)
   d45b2:	f990 3020 	ldrsb.w	r3, [r0, #32]
   d45b6:	3301      	adds	r3, #1
   d45b8:	d101      	bne.n	d45be <_ZN15Adafruit_LIS3DH4readEv+0x106>
      beginTransaction();
   d45ba:	f7ff fe7f 	bl	d42bc <_ZN15Adafruit_LIS3DH16beginTransactionEv>
    digitalWrite(_cs, LOW);
   d45be:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d45c2:	2100      	movs	r1, #0
   d45c4:	b280      	uxth	r0, r0
   d45c6:	f001 f8b6 	bl	d5736 <digitalWrite>
    spixfer(LIS3DH_REG_OUT_X_L | 0x80 | 0x40); // read multiple, bit 7&6 high
   d45ca:	21e8      	movs	r1, #232	; 0xe8
   d45cc:	4620      	mov	r0, r4
   d45ce:	f7ff fe3f 	bl	d4250 <_ZN15Adafruit_LIS3DH7spixferEh>
    x = spixfer(); x |= ((uint16_t)spixfer()) << 8;
   d45d2:	21ff      	movs	r1, #255	; 0xff
   d45d4:	4620      	mov	r0, r4
   d45d6:	f7ff fe3b 	bl	d4250 <_ZN15Adafruit_LIS3DH7spixferEh>
   d45da:	21ff      	movs	r1, #255	; 0xff
   d45dc:	80e0      	strh	r0, [r4, #6]
   d45de:	4620      	mov	r0, r4
   d45e0:	f7ff fe36 	bl	d4250 <_ZN15Adafruit_LIS3DH7spixferEh>
   d45e4:	88e3      	ldrh	r3, [r4, #6]
   d45e6:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d45ea:	80e0      	strh	r0, [r4, #6]
    y = spixfer(); y |= ((uint16_t)spixfer()) << 8;
   d45ec:	21ff      	movs	r1, #255	; 0xff
   d45ee:	4620      	mov	r0, r4
   d45f0:	f7ff fe2e 	bl	d4250 <_ZN15Adafruit_LIS3DH7spixferEh>
   d45f4:	21ff      	movs	r1, #255	; 0xff
   d45f6:	8120      	strh	r0, [r4, #8]
   d45f8:	4620      	mov	r0, r4
   d45fa:	f7ff fe29 	bl	d4250 <_ZN15Adafruit_LIS3DH7spixferEh>
   d45fe:	8923      	ldrh	r3, [r4, #8]
   d4600:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d4604:	8120      	strh	r0, [r4, #8]
    z = spixfer(); z |= ((uint16_t)spixfer()) << 8;
   d4606:	21ff      	movs	r1, #255	; 0xff
   d4608:	4620      	mov	r0, r4
   d460a:	f7ff fe21 	bl	d4250 <_ZN15Adafruit_LIS3DH7spixferEh>
   d460e:	21ff      	movs	r1, #255	; 0xff
   d4610:	8160      	strh	r0, [r4, #10]
   d4612:	4620      	mov	r0, r4
   d4614:	f7ff fe1c 	bl	d4250 <_ZN15Adafruit_LIS3DH7spixferEh>
   d4618:	8963      	ldrh	r3, [r4, #10]
   d461a:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   d461e:	8160      	strh	r0, [r4, #10]
    digitalWrite(_cs, HIGH);
   d4620:	f994 001d 	ldrsb.w	r0, [r4, #29]
   d4624:	2101      	movs	r1, #1
   d4626:	b280      	uxth	r0, r0
   d4628:	f001 f885 	bl	d5736 <digitalWrite>
    if (_sck == -1)
   d462c:	e790      	b.n	d4550 <_ZN15Adafruit_LIS3DH4readEv+0x98>
  if (range == LIS3DH_RANGE_16_G) divider = 2048;
   d462e:	f44f 6300 	mov.w	r3, #2048	; 0x800
   d4632:	e79b      	b.n	d456c <_ZN15Adafruit_LIS3DH4readEv+0xb4>
  if (range == LIS3DH_RANGE_8_G) divider = 4096;
   d4634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   d4638:	e798      	b.n	d456c <_ZN15Adafruit_LIS3DH4readEv+0xb4>
  if (range == LIS3DH_RANGE_4_G) divider = 8190;
   d463a:	f641 73fe 	movw	r3, #8190	; 0x1ffe
   d463e:	e795      	b.n	d456c <_ZN15Adafruit_LIS3DH4readEv+0xb4>
   d4640:	00ffff00 	.word	0x00ffff00

000d4644 <_ZN15Adafruit_LIS3DH8getEventEP15sensors_event_t>:
bool Adafruit_LIS3DH::getEvent(sensors_event_t *event) {
   d4644:	460c      	mov	r4, r1
   d4646:	4605      	mov	r5, r0
   d4648:	b508      	push	{r3, lr}
  memset(event, 0, sizeof(sensors_event_t));
   d464a:	2220      	movs	r2, #32
   d464c:	2100      	movs	r1, #0
   d464e:	1d20      	adds	r0, r4, #4
   d4650:	f001 fdb8 	bl	d61c4 <memset>
  event->version   = sizeof(sensors_event_t);
   d4654:	2324      	movs	r3, #36	; 0x24
   d4656:	6023      	str	r3, [r4, #0]
  event->sensor_id = _sensorID;
   d4658:	69ab      	ldr	r3, [r5, #24]
   d465a:	6063      	str	r3, [r4, #4]
  event->type      = SENSOR_TYPE_ACCELEROMETER;
   d465c:	2301      	movs	r3, #1
   d465e:	60a3      	str	r3, [r4, #8]
  event->timestamp = 0;
   d4660:	2300      	movs	r3, #0
   d4662:	6123      	str	r3, [r4, #16]
  read();
   d4664:	4628      	mov	r0, r5
   d4666:	f7ff ff27 	bl	d44b8 <_ZN15Adafruit_LIS3DH4readEv>
  event->acceleration.x = x_g;
   d466a:	68eb      	ldr	r3, [r5, #12]
   d466c:	6163      	str	r3, [r4, #20]
  event->acceleration.y = y_g;
   d466e:	692b      	ldr	r3, [r5, #16]
   d4670:	61a3      	str	r3, [r4, #24]
  event->acceleration.z = z_g;
   d4672:	696b      	ldr	r3, [r5, #20]
   d4674:	61e3      	str	r3, [r4, #28]
	...

000d4678 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4678:	b508      	push	{r3, lr}
   d467a:	4b02      	ldr	r3, [pc, #8]	; (d4684 <netdb_freeaddrinfo+0xc>)
   d467c:	681b      	ldr	r3, [r3, #0]
   d467e:	689b      	ldr	r3, [r3, #8]
   d4680:	9301      	str	r3, [sp, #4]
   d4682:	bd08      	pop	{r3, pc}
   d4684:	00030268 	.word	0x00030268

000d4688 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4688:	b508      	push	{r3, lr}
   d468a:	4b02      	ldr	r3, [pc, #8]	; (d4694 <netdb_getaddrinfo+0xc>)
   d468c:	681b      	ldr	r3, [r3, #0]
   d468e:	68db      	ldr	r3, [r3, #12]
   d4690:	9301      	str	r3, [sp, #4]
   d4692:	bd08      	pop	{r3, pc}
   d4694:	00030268 	.word	0x00030268

000d4698 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4698:	b508      	push	{r3, lr}
   d469a:	4b02      	ldr	r3, [pc, #8]	; (d46a4 <HAL_Pin_Mode+0xc>)
   d469c:	681b      	ldr	r3, [r3, #0]
   d469e:	689b      	ldr	r3, [r3, #8]
   d46a0:	9301      	str	r3, [sp, #4]
   d46a2:	bd08      	pop	{r3, pc}
   d46a4:	0003022c 	.word	0x0003022c

000d46a8 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d46a8:	b508      	push	{r3, lr}
   d46aa:	4b02      	ldr	r3, [pc, #8]	; (d46b4 <HAL_Get_Pin_Mode+0xc>)
   d46ac:	681b      	ldr	r3, [r3, #0]
   d46ae:	68db      	ldr	r3, [r3, #12]
   d46b0:	9301      	str	r3, [sp, #4]
   d46b2:	bd08      	pop	{r3, pc}
   d46b4:	0003022c 	.word	0x0003022c

000d46b8 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d46b8:	b508      	push	{r3, lr}
   d46ba:	4b02      	ldr	r3, [pc, #8]	; (d46c4 <HAL_GPIO_Write+0xc>)
   d46bc:	681b      	ldr	r3, [r3, #0]
   d46be:	691b      	ldr	r3, [r3, #16]
   d46c0:	9301      	str	r3, [sp, #4]
   d46c2:	bd08      	pop	{r3, pc}
   d46c4:	0003022c 	.word	0x0003022c

000d46c8 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d46c8:	b508      	push	{r3, lr}
   d46ca:	4b02      	ldr	r3, [pc, #8]	; (d46d4 <HAL_GPIO_Read+0xc>)
   d46cc:	681b      	ldr	r3, [r3, #0]
   d46ce:	695b      	ldr	r3, [r3, #20]
   d46d0:	9301      	str	r3, [sp, #4]
   d46d2:	bd08      	pop	{r3, pc}
   d46d4:	0003022c 	.word	0x0003022c

000d46d8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d46d8:	b508      	push	{r3, lr}
   d46da:	4b02      	ldr	r3, [pc, #8]	; (d46e4 <HAL_RNG_GetRandomNumber+0xc>)
   d46dc:	681b      	ldr	r3, [r3, #0]
   d46de:	685b      	ldr	r3, [r3, #4]
   d46e0:	9301      	str	r3, [sp, #4]
   d46e2:	bd08      	pop	{r3, pc}
   d46e4:	00030218 	.word	0x00030218

000d46e8 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d46e8:	b508      	push	{r3, lr}
   d46ea:	4b02      	ldr	r3, [pc, #8]	; (d46f4 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d46ec:	681b      	ldr	r3, [r3, #0]
   d46ee:	695b      	ldr	r3, [r3, #20]
   d46f0:	9301      	str	r3, [sp, #4]
   d46f2:	bd08      	pop	{r3, pc}
   d46f4:	00030218 	.word	0x00030218

000d46f8 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d46f8:	b508      	push	{r3, lr}
   d46fa:	4b02      	ldr	r3, [pc, #8]	; (d4704 <os_mutex_recursive_create+0xc>)
   d46fc:	681b      	ldr	r3, [r3, #0]
   d46fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4700:	9301      	str	r3, [sp, #4]
   d4702:	bd08      	pop	{r3, pc}
   d4704:	00030248 	.word	0x00030248

000d4708 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4708:	b508      	push	{r3, lr}
   d470a:	4b02      	ldr	r3, [pc, #8]	; (d4714 <os_mutex_recursive_destroy+0xc>)
   d470c:	681b      	ldr	r3, [r3, #0]
   d470e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4710:	9301      	str	r3, [sp, #4]
   d4712:	bd08      	pop	{r3, pc}
   d4714:	00030248 	.word	0x00030248

000d4718 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4718:	b508      	push	{r3, lr}
   d471a:	4b02      	ldr	r3, [pc, #8]	; (d4724 <inet_inet_ntop+0xc>)
   d471c:	681b      	ldr	r3, [r3, #0]
   d471e:	695b      	ldr	r3, [r3, #20]
   d4720:	9301      	str	r3, [sp, #4]
   d4722:	bd08      	pop	{r3, pc}
   d4724:	00030264 	.word	0x00030264

000d4728 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d4728:	b508      	push	{r3, lr}
   d472a:	4b02      	ldr	r3, [pc, #8]	; (d4734 <hal_usart_init+0xc>)
   d472c:	681b      	ldr	r3, [r3, #0]
   d472e:	681b      	ldr	r3, [r3, #0]
   d4730:	9301      	str	r3, [sp, #4]
   d4732:	bd08      	pop	{r3, pc}
   d4734:	0003023c 	.word	0x0003023c

000d4738 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d4738:	b508      	push	{r3, lr}
   d473a:	4b02      	ldr	r3, [pc, #8]	; (d4744 <hal_usart_write+0xc>)
   d473c:	681b      	ldr	r3, [r3, #0]
   d473e:	68db      	ldr	r3, [r3, #12]
   d4740:	9301      	str	r3, [sp, #4]
   d4742:	bd08      	pop	{r3, pc}
   d4744:	0003023c 	.word	0x0003023c

000d4748 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d4748:	b508      	push	{r3, lr}
   d474a:	4b02      	ldr	r3, [pc, #8]	; (d4754 <hal_usart_available+0xc>)
   d474c:	681b      	ldr	r3, [r3, #0]
   d474e:	691b      	ldr	r3, [r3, #16]
   d4750:	9301      	str	r3, [sp, #4]
   d4752:	bd08      	pop	{r3, pc}
   d4754:	0003023c 	.word	0x0003023c

000d4758 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d4758:	b508      	push	{r3, lr}
   d475a:	4b02      	ldr	r3, [pc, #8]	; (d4764 <hal_usart_read+0xc>)
   d475c:	681b      	ldr	r3, [r3, #0]
   d475e:	695b      	ldr	r3, [r3, #20]
   d4760:	9301      	str	r3, [sp, #4]
   d4762:	bd08      	pop	{r3, pc}
   d4764:	0003023c 	.word	0x0003023c

000d4768 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d4768:	b508      	push	{r3, lr}
   d476a:	4b02      	ldr	r3, [pc, #8]	; (d4774 <hal_usart_peek+0xc>)
   d476c:	681b      	ldr	r3, [r3, #0]
   d476e:	699b      	ldr	r3, [r3, #24]
   d4770:	9301      	str	r3, [sp, #4]
   d4772:	bd08      	pop	{r3, pc}
   d4774:	0003023c 	.word	0x0003023c

000d4778 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d4778:	b508      	push	{r3, lr}
   d477a:	4b02      	ldr	r3, [pc, #8]	; (d4784 <hal_usart_flush+0xc>)
   d477c:	681b      	ldr	r3, [r3, #0]
   d477e:	69db      	ldr	r3, [r3, #28]
   d4780:	9301      	str	r3, [sp, #4]
   d4782:	bd08      	pop	{r3, pc}
   d4784:	0003023c 	.word	0x0003023c

000d4788 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d4788:	b508      	push	{r3, lr}
   d478a:	4b02      	ldr	r3, [pc, #8]	; (d4794 <hal_usart_is_enabled+0xc>)
   d478c:	681b      	ldr	r3, [r3, #0]
   d478e:	6a1b      	ldr	r3, [r3, #32]
   d4790:	9301      	str	r3, [sp, #4]
   d4792:	bd08      	pop	{r3, pc}
   d4794:	0003023c 	.word	0x0003023c

000d4798 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d4798:	b508      	push	{r3, lr}
   d479a:	4b02      	ldr	r3, [pc, #8]	; (d47a4 <hal_usart_available_data_for_write+0xc>)
   d479c:	681b      	ldr	r3, [r3, #0]
   d479e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d47a0:	9301      	str	r3, [sp, #4]
   d47a2:	bd08      	pop	{r3, pc}
   d47a4:	0003023c 	.word	0x0003023c

000d47a8 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d47a8:	b508      	push	{r3, lr}
   d47aa:	4b02      	ldr	r3, [pc, #8]	; (d47b4 <hal_i2c_begin+0xc>)
   d47ac:	681b      	ldr	r3, [r3, #0]
   d47ae:	68db      	ldr	r3, [r3, #12]
   d47b0:	9301      	str	r3, [sp, #4]
   d47b2:	bd08      	pop	{r3, pc}
   d47b4:	00030228 	.word	0x00030228

000d47b8 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d47b8:	b508      	push	{r3, lr}
   d47ba:	4b02      	ldr	r3, [pc, #8]	; (d47c4 <hal_i2c_begin_transmission+0xc>)
   d47bc:	681b      	ldr	r3, [r3, #0]
   d47be:	699b      	ldr	r3, [r3, #24]
   d47c0:	9301      	str	r3, [sp, #4]
   d47c2:	bd08      	pop	{r3, pc}
   d47c4:	00030228 	.word	0x00030228

000d47c8 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d47c8:	b508      	push	{r3, lr}
   d47ca:	4b02      	ldr	r3, [pc, #8]	; (d47d4 <hal_i2c_end_transmission+0xc>)
   d47cc:	681b      	ldr	r3, [r3, #0]
   d47ce:	69db      	ldr	r3, [r3, #28]
   d47d0:	9301      	str	r3, [sp, #4]
   d47d2:	bd08      	pop	{r3, pc}
   d47d4:	00030228 	.word	0x00030228

000d47d8 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d47d8:	b508      	push	{r3, lr}
   d47da:	4b02      	ldr	r3, [pc, #8]	; (d47e4 <hal_i2c_write+0xc>)
   d47dc:	681b      	ldr	r3, [r3, #0]
   d47de:	6a1b      	ldr	r3, [r3, #32]
   d47e0:	9301      	str	r3, [sp, #4]
   d47e2:	bd08      	pop	{r3, pc}
   d47e4:	00030228 	.word	0x00030228

000d47e8 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d47e8:	b508      	push	{r3, lr}
   d47ea:	4b02      	ldr	r3, [pc, #8]	; (d47f4 <hal_i2c_available+0xc>)
   d47ec:	681b      	ldr	r3, [r3, #0]
   d47ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d47f0:	9301      	str	r3, [sp, #4]
   d47f2:	bd08      	pop	{r3, pc}
   d47f4:	00030228 	.word	0x00030228

000d47f8 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d47f8:	b508      	push	{r3, lr}
   d47fa:	4b02      	ldr	r3, [pc, #8]	; (d4804 <hal_i2c_read+0xc>)
   d47fc:	681b      	ldr	r3, [r3, #0]
   d47fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4800:	9301      	str	r3, [sp, #4]
   d4802:	bd08      	pop	{r3, pc}
   d4804:	00030228 	.word	0x00030228

000d4808 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d4808:	b508      	push	{r3, lr}
   d480a:	4b02      	ldr	r3, [pc, #8]	; (d4814 <hal_i2c_peek+0xc>)
   d480c:	681b      	ldr	r3, [r3, #0]
   d480e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4810:	9301      	str	r3, [sp, #4]
   d4812:	bd08      	pop	{r3, pc}
   d4814:	00030228 	.word	0x00030228

000d4818 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d4818:	b508      	push	{r3, lr}
   d481a:	4b02      	ldr	r3, [pc, #8]	; (d4824 <hal_i2c_flush+0xc>)
   d481c:	681b      	ldr	r3, [r3, #0]
   d481e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4820:	9301      	str	r3, [sp, #4]
   d4822:	bd08      	pop	{r3, pc}
   d4824:	00030228 	.word	0x00030228

000d4828 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d4828:	b508      	push	{r3, lr}
   d482a:	4b02      	ldr	r3, [pc, #8]	; (d4834 <hal_i2c_is_enabled+0xc>)
   d482c:	681b      	ldr	r3, [r3, #0]
   d482e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4830:	9301      	str	r3, [sp, #4]
   d4832:	bd08      	pop	{r3, pc}
   d4834:	00030228 	.word	0x00030228

000d4838 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d4838:	b508      	push	{r3, lr}
   d483a:	4b02      	ldr	r3, [pc, #8]	; (d4844 <hal_i2c_init+0xc>)
   d483c:	681b      	ldr	r3, [r3, #0]
   d483e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4840:	9301      	str	r3, [sp, #4]
   d4842:	bd08      	pop	{r3, pc}
   d4844:	00030228 	.word	0x00030228

000d4848 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d4848:	b508      	push	{r3, lr}
   d484a:	4b02      	ldr	r3, [pc, #8]	; (d4854 <hal_i2c_request_ex+0xc>)
   d484c:	681b      	ldr	r3, [r3, #0]
   d484e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4850:	9301      	str	r3, [sp, #4]
   d4852:	bd08      	pop	{r3, pc}
   d4854:	00030228 	.word	0x00030228

000d4858 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d4858:	b508      	push	{r3, lr}
   d485a:	4b02      	ldr	r3, [pc, #8]	; (d4864 <hal_spi_begin+0xc>)
   d485c:	681b      	ldr	r3, [r3, #0]
   d485e:	681b      	ldr	r3, [r3, #0]
   d4860:	9301      	str	r3, [sp, #4]
   d4862:	bd08      	pop	{r3, pc}
   d4864:	00030230 	.word	0x00030230

000d4868 <hal_spi_set_bit_order>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
   d4868:	b508      	push	{r3, lr}
   d486a:	4b02      	ldr	r3, [pc, #8]	; (d4874 <hal_spi_set_bit_order+0xc>)
   d486c:	681b      	ldr	r3, [r3, #0]
   d486e:	689b      	ldr	r3, [r3, #8]
   d4870:	9301      	str	r3, [sp, #4]
   d4872:	bd08      	pop	{r3, pc}
   d4874:	00030230 	.word	0x00030230

000d4878 <hal_spi_set_data_mode>:
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
   d4878:	b508      	push	{r3, lr}
   d487a:	4b02      	ldr	r3, [pc, #8]	; (d4884 <hal_spi_set_data_mode+0xc>)
   d487c:	681b      	ldr	r3, [r3, #0]
   d487e:	68db      	ldr	r3, [r3, #12]
   d4880:	9301      	str	r3, [sp, #4]
   d4882:	bd08      	pop	{r3, pc}
   d4884:	00030230 	.word	0x00030230

000d4888 <hal_spi_set_clock_divider>:
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
   d4888:	b508      	push	{r3, lr}
   d488a:	4b02      	ldr	r3, [pc, #8]	; (d4894 <hal_spi_set_clock_divider+0xc>)
   d488c:	681b      	ldr	r3, [r3, #0]
   d488e:	691b      	ldr	r3, [r3, #16]
   d4890:	9301      	str	r3, [sp, #4]
   d4892:	bd08      	pop	{r3, pc}
   d4894:	00030230 	.word	0x00030230

000d4898 <hal_spi_transfer>:
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d4898:	b508      	push	{r3, lr}
   d489a:	4b02      	ldr	r3, [pc, #8]	; (d48a4 <hal_spi_transfer+0xc>)
   d489c:	681b      	ldr	r3, [r3, #0]
   d489e:	695b      	ldr	r3, [r3, #20]
   d48a0:	9301      	str	r3, [sp, #4]
   d48a2:	bd08      	pop	{r3, pc}
   d48a4:	00030230 	.word	0x00030230

000d48a8 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d48a8:	b508      	push	{r3, lr}
   d48aa:	4b02      	ldr	r3, [pc, #8]	; (d48b4 <hal_spi_init+0xc>)
   d48ac:	681b      	ldr	r3, [r3, #0]
   d48ae:	69db      	ldr	r3, [r3, #28]
   d48b0:	9301      	str	r3, [sp, #4]
   d48b2:	bd08      	pop	{r3, pc}
   d48b4:	00030230 	.word	0x00030230

000d48b8 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d48b8:	b508      	push	{r3, lr}
   d48ba:	4b02      	ldr	r3, [pc, #8]	; (d48c4 <hal_spi_is_enabled+0xc>)
   d48bc:	681b      	ldr	r3, [r3, #0]
   d48be:	6a1b      	ldr	r3, [r3, #32]
   d48c0:	9301      	str	r3, [sp, #4]
   d48c2:	bd08      	pop	{r3, pc}
   d48c4:	00030230 	.word	0x00030230

000d48c8 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d48c8:	b508      	push	{r3, lr}
   d48ca:	4b02      	ldr	r3, [pc, #8]	; (d48d4 <hal_spi_info+0xc>)
   d48cc:	681b      	ldr	r3, [r3, #0]
   d48ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d48d0:	9301      	str	r3, [sp, #4]
   d48d2:	bd08      	pop	{r3, pc}
   d48d4:	00030230 	.word	0x00030230

000d48d8 <hal_spi_acquire>:
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d48d8:	b508      	push	{r3, lr}
   d48da:	4b02      	ldr	r3, [pc, #8]	; (d48e4 <hal_spi_acquire+0xc>)
   d48dc:	681b      	ldr	r3, [r3, #0]
   d48de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d48e0:	9301      	str	r3, [sp, #4]
   d48e2:	bd08      	pop	{r3, pc}
   d48e4:	00030230 	.word	0x00030230

000d48e8 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d48e8:	b508      	push	{r3, lr}
   d48ea:	4b02      	ldr	r3, [pc, #8]	; (d48f4 <hal_spi_release+0xc>)
   d48ec:	681b      	ldr	r3, [r3, #0]
   d48ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d48f0:	9301      	str	r3, [sp, #4]
   d48f2:	bd08      	pop	{r3, pc}
   d48f4:	00030230 	.word	0x00030230

000d48f8 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d48f8:	b508      	push	{r3, lr}
   d48fa:	4b02      	ldr	r3, [pc, #8]	; (d4904 <HAL_USB_USART_Init+0xc>)
   d48fc:	681b      	ldr	r3, [r3, #0]
   d48fe:	681b      	ldr	r3, [r3, #0]
   d4900:	9301      	str	r3, [sp, #4]
   d4902:	bd08      	pop	{r3, pc}
   d4904:	0003024c 	.word	0x0003024c

000d4908 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4908:	b508      	push	{r3, lr}
   d490a:	4b02      	ldr	r3, [pc, #8]	; (d4914 <HAL_USB_USART_Begin+0xc>)
   d490c:	681b      	ldr	r3, [r3, #0]
   d490e:	685b      	ldr	r3, [r3, #4]
   d4910:	9301      	str	r3, [sp, #4]
   d4912:	bd08      	pop	{r3, pc}
   d4914:	0003024c 	.word	0x0003024c

000d4918 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4918:	b508      	push	{r3, lr}
   d491a:	4b02      	ldr	r3, [pc, #8]	; (d4924 <HAL_USB_USART_Available_Data+0xc>)
   d491c:	681b      	ldr	r3, [r3, #0]
   d491e:	691b      	ldr	r3, [r3, #16]
   d4920:	9301      	str	r3, [sp, #4]
   d4922:	bd08      	pop	{r3, pc}
   d4924:	0003024c 	.word	0x0003024c

000d4928 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4928:	b508      	push	{r3, lr}
   d492a:	4b02      	ldr	r3, [pc, #8]	; (d4934 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d492c:	681b      	ldr	r3, [r3, #0]
   d492e:	695b      	ldr	r3, [r3, #20]
   d4930:	9301      	str	r3, [sp, #4]
   d4932:	bd08      	pop	{r3, pc}
   d4934:	0003024c 	.word	0x0003024c

000d4938 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4938:	b508      	push	{r3, lr}
   d493a:	4b02      	ldr	r3, [pc, #8]	; (d4944 <HAL_USB_USART_Receive_Data+0xc>)
   d493c:	681b      	ldr	r3, [r3, #0]
   d493e:	699b      	ldr	r3, [r3, #24]
   d4940:	9301      	str	r3, [sp, #4]
   d4942:	bd08      	pop	{r3, pc}
   d4944:	0003024c 	.word	0x0003024c

000d4948 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4948:	b508      	push	{r3, lr}
   d494a:	4b02      	ldr	r3, [pc, #8]	; (d4954 <HAL_USB_USART_Send_Data+0xc>)
   d494c:	681b      	ldr	r3, [r3, #0]
   d494e:	69db      	ldr	r3, [r3, #28]
   d4950:	9301      	str	r3, [sp, #4]
   d4952:	bd08      	pop	{r3, pc}
   d4954:	0003024c 	.word	0x0003024c

000d4958 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4958:	b508      	push	{r3, lr}
   d495a:	4b02      	ldr	r3, [pc, #8]	; (d4964 <HAL_USB_USART_Flush_Data+0xc>)
   d495c:	681b      	ldr	r3, [r3, #0]
   d495e:	6a1b      	ldr	r3, [r3, #32]
   d4960:	9301      	str	r3, [sp, #4]
   d4962:	bd08      	pop	{r3, pc}
   d4964:	0003024c 	.word	0x0003024c

000d4968 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4968:	b508      	push	{r3, lr}
   d496a:	4b02      	ldr	r3, [pc, #8]	; (d4974 <set_system_mode+0xc>)
   d496c:	681b      	ldr	r3, [r3, #0]
   d496e:	685b      	ldr	r3, [r3, #4]
   d4970:	9301      	str	r3, [sp, #4]
   d4972:	bd08      	pop	{r3, pc}
   d4974:	00030220 	.word	0x00030220

000d4978 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4978:	b508      	push	{r3, lr}
   d497a:	4b02      	ldr	r3, [pc, #8]	; (d4984 <system_delay_ms+0xc>)
   d497c:	681b      	ldr	r3, [r3, #0]
   d497e:	695b      	ldr	r3, [r3, #20]
   d4980:	9301      	str	r3, [sp, #4]
   d4982:	bd08      	pop	{r3, pc}
   d4984:	00030220 	.word	0x00030220

000d4988 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4988:	b508      	push	{r3, lr}
   d498a:	4b03      	ldr	r3, [pc, #12]	; (d4998 <system_ctrl_set_app_request_handler+0x10>)
   d498c:	681b      	ldr	r3, [r3, #0]
   d498e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4992:	9301      	str	r3, [sp, #4]
   d4994:	bd08      	pop	{r3, pc}
   d4996:	0000      	.short	0x0000
   d4998:	00030220 	.word	0x00030220

000d499c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d499c:	b508      	push	{r3, lr}
   d499e:	4b03      	ldr	r3, [pc, #12]	; (d49ac <system_ctrl_set_result+0x10>)
   d49a0:	681b      	ldr	r3, [r3, #0]
   d49a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d49a6:	9301      	str	r3, [sp, #4]
   d49a8:	bd08      	pop	{r3, pc}
   d49aa:	0000      	.short	0x0000
   d49ac:	00030220 	.word	0x00030220

000d49b0 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d49b0:	b508      	push	{r3, lr}
   d49b2:	4b02      	ldr	r3, [pc, #8]	; (d49bc <network_connect+0xc>)
   d49b4:	681b      	ldr	r3, [r3, #0]
   d49b6:	685b      	ldr	r3, [r3, #4]
   d49b8:	9301      	str	r3, [sp, #4]
   d49ba:	bd08      	pop	{r3, pc}
   d49bc:	00030240 	.word	0x00030240

000d49c0 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d49c0:	b508      	push	{r3, lr}
   d49c2:	4b02      	ldr	r3, [pc, #8]	; (d49cc <network_connecting+0xc>)
   d49c4:	681b      	ldr	r3, [r3, #0]
   d49c6:	689b      	ldr	r3, [r3, #8]
   d49c8:	9301      	str	r3, [sp, #4]
   d49ca:	bd08      	pop	{r3, pc}
   d49cc:	00030240 	.word	0x00030240

000d49d0 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d49d0:	b508      	push	{r3, lr}
   d49d2:	4b02      	ldr	r3, [pc, #8]	; (d49dc <network_disconnect+0xc>)
   d49d4:	681b      	ldr	r3, [r3, #0]
   d49d6:	68db      	ldr	r3, [r3, #12]
   d49d8:	9301      	str	r3, [sp, #4]
   d49da:	bd08      	pop	{r3, pc}
   d49dc:	00030240 	.word	0x00030240

000d49e0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d49e0:	b508      	push	{r3, lr}
   d49e2:	4b02      	ldr	r3, [pc, #8]	; (d49ec <network_ready+0xc>)
   d49e4:	681b      	ldr	r3, [r3, #0]
   d49e6:	691b      	ldr	r3, [r3, #16]
   d49e8:	9301      	str	r3, [sp, #4]
   d49ea:	bd08      	pop	{r3, pc}
   d49ec:	00030240 	.word	0x00030240

000d49f0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d49f0:	b508      	push	{r3, lr}
   d49f2:	4b02      	ldr	r3, [pc, #8]	; (d49fc <network_on+0xc>)
   d49f4:	681b      	ldr	r3, [r3, #0]
   d49f6:	695b      	ldr	r3, [r3, #20]
   d49f8:	9301      	str	r3, [sp, #4]
   d49fa:	bd08      	pop	{r3, pc}
   d49fc:	00030240 	.word	0x00030240

000d4a00 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4a00:	b508      	push	{r3, lr}
   d4a02:	4b02      	ldr	r3, [pc, #8]	; (d4a0c <network_off+0xc>)
   d4a04:	681b      	ldr	r3, [r3, #0]
   d4a06:	699b      	ldr	r3, [r3, #24]
   d4a08:	9301      	str	r3, [sp, #4]
   d4a0a:	bd08      	pop	{r3, pc}
   d4a0c:	00030240 	.word	0x00030240

000d4a10 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4a10:	b508      	push	{r3, lr}
   d4a12:	4b02      	ldr	r3, [pc, #8]	; (d4a1c <network_listen+0xc>)
   d4a14:	681b      	ldr	r3, [r3, #0]
   d4a16:	69db      	ldr	r3, [r3, #28]
   d4a18:	9301      	str	r3, [sp, #4]
   d4a1a:	bd08      	pop	{r3, pc}
   d4a1c:	00030240 	.word	0x00030240

000d4a20 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4a20:	b508      	push	{r3, lr}
   d4a22:	4b02      	ldr	r3, [pc, #8]	; (d4a2c <network_listening+0xc>)
   d4a24:	681b      	ldr	r3, [r3, #0]
   d4a26:	6a1b      	ldr	r3, [r3, #32]
   d4a28:	9301      	str	r3, [sp, #4]
   d4a2a:	bd08      	pop	{r3, pc}
   d4a2c:	00030240 	.word	0x00030240

000d4a30 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4a30:	b508      	push	{r3, lr}
   d4a32:	4b02      	ldr	r3, [pc, #8]	; (d4a3c <network_set_listen_timeout+0xc>)
   d4a34:	681b      	ldr	r3, [r3, #0]
   d4a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4a38:	9301      	str	r3, [sp, #4]
   d4a3a:	bd08      	pop	{r3, pc}
   d4a3c:	00030240 	.word	0x00030240

000d4a40 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4a40:	b508      	push	{r3, lr}
   d4a42:	4b02      	ldr	r3, [pc, #8]	; (d4a4c <network_get_listen_timeout+0xc>)
   d4a44:	681b      	ldr	r3, [r3, #0]
   d4a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4a48:	9301      	str	r3, [sp, #4]
   d4a4a:	bd08      	pop	{r3, pc}
   d4a4c:	00030240 	.word	0x00030240

000d4a50 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d4a50:	b508      	push	{r3, lr}
   d4a52:	4b02      	ldr	r3, [pc, #8]	; (d4a5c <network_is_on+0xc>)
   d4a54:	681b      	ldr	r3, [r3, #0]
   d4a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4a58:	9301      	str	r3, [sp, #4]
   d4a5a:	bd08      	pop	{r3, pc}
   d4a5c:	00030240 	.word	0x00030240

000d4a60 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d4a60:	b508      	push	{r3, lr}
   d4a62:	4b02      	ldr	r3, [pc, #8]	; (d4a6c <network_is_off+0xc>)
   d4a64:	681b      	ldr	r3, [r3, #0]
   d4a66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4a68:	9301      	str	r3, [sp, #4]
   d4a6a:	bd08      	pop	{r3, pc}
   d4a6c:	00030240 	.word	0x00030240

000d4a70 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4a70:	b508      	push	{r3, lr}
   d4a72:	4b02      	ldr	r3, [pc, #8]	; (d4a7c <spark_set_random_seed_from_cloud_handler+0xc>)
   d4a74:	681b      	ldr	r3, [r3, #0]
   d4a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4a78:	9301      	str	r3, [sp, #4]
   d4a7a:	bd08      	pop	{r3, pc}
   d4a7c:	00030244 	.word	0x00030244

000d4a80 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4a80:	b508      	push	{r3, lr}
   d4a82:	4b02      	ldr	r3, [pc, #8]	; (d4a8c <malloc+0xc>)
   d4a84:	681b      	ldr	r3, [r3, #0]
   d4a86:	681b      	ldr	r3, [r3, #0]
   d4a88:	9301      	str	r3, [sp, #4]
   d4a8a:	bd08      	pop	{r3, pc}
   d4a8c:	0003021c 	.word	0x0003021c

000d4a90 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4a90:	b508      	push	{r3, lr}
   d4a92:	4b02      	ldr	r3, [pc, #8]	; (d4a9c <free+0xc>)
   d4a94:	681b      	ldr	r3, [r3, #0]
   d4a96:	685b      	ldr	r3, [r3, #4]
   d4a98:	9301      	str	r3, [sp, #4]
   d4a9a:	bd08      	pop	{r3, pc}
   d4a9c:	0003021c 	.word	0x0003021c

000d4aa0 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d4aa0:	b508      	push	{r3, lr}
   d4aa2:	4b02      	ldr	r3, [pc, #8]	; (d4aac <newlib_impure_ptr_callback+0xc>)
   d4aa4:	681b      	ldr	r3, [r3, #0]
   d4aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4aa8:	9301      	str	r3, [sp, #4]
   d4aaa:	bd08      	pop	{r3, pc}
   d4aac:	0003021c 	.word	0x0003021c

000d4ab0 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4ab0:	2200      	movs	r2, #0
   d4ab2:	6840      	ldr	r0, [r0, #4]
   d4ab4:	4611      	mov	r1, r2
   d4ab6:	f7ff bfb3 	b.w	d4a20 <network_listening>

000d4aba <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d4aba:	2200      	movs	r2, #0
   d4abc:	6840      	ldr	r0, [r0, #4]
   d4abe:	4611      	mov	r1, r2
   d4ac0:	f7ff bfbe 	b.w	d4a40 <network_get_listen_timeout>

000d4ac4 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d4ac4:	6840      	ldr	r0, [r0, #4]
   d4ac6:	2200      	movs	r2, #0
   d4ac8:	f7ff bfb2 	b.w	d4a30 <network_set_listen_timeout>

000d4acc <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d4acc:	6840      	ldr	r0, [r0, #4]
   d4ace:	2200      	movs	r2, #0
   d4ad0:	f081 0101 	eor.w	r1, r1, #1
   d4ad4:	f7ff bf9c 	b.w	d4a10 <network_listen>

000d4ad8 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d4ad8:	2300      	movs	r3, #0
   d4ada:	6840      	ldr	r0, [r0, #4]
   d4adc:	461a      	mov	r2, r3
   d4ade:	4619      	mov	r1, r3
   d4ae0:	f7ff bf8e 	b.w	d4a00 <network_off>

000d4ae4 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d4ae4:	2300      	movs	r3, #0
   d4ae6:	6840      	ldr	r0, [r0, #4]
   d4ae8:	461a      	mov	r2, r3
   d4aea:	4619      	mov	r1, r3
   d4aec:	f7ff bf80 	b.w	d49f0 <network_on>

000d4af0 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4af0:	2200      	movs	r2, #0
   d4af2:	6840      	ldr	r0, [r0, #4]
   d4af4:	4611      	mov	r1, r2
   d4af6:	f7ff bf73 	b.w	d49e0 <network_ready>

000d4afa <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d4afa:	2200      	movs	r2, #0
   d4afc:	6840      	ldr	r0, [r0, #4]
   d4afe:	4611      	mov	r1, r2
   d4b00:	f7ff bf5e 	b.w	d49c0 <network_connecting>

000d4b04 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4b04:	6840      	ldr	r0, [r0, #4]
   d4b06:	2200      	movs	r2, #0
   d4b08:	2102      	movs	r1, #2
   d4b0a:	f7ff bf61 	b.w	d49d0 <network_disconnect>

000d4b0e <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d4b0e:	2300      	movs	r3, #0
   d4b10:	6840      	ldr	r0, [r0, #4]
   d4b12:	461a      	mov	r2, r3
   d4b14:	f7ff bf4c 	b.w	d49b0 <network_connect>

000d4b18 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4b18:	4b02      	ldr	r3, [pc, #8]	; (d4b24 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4b1a:	2203      	movs	r2, #3
   d4b1c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4b1e:	4a02      	ldr	r2, [pc, #8]	; (d4b28 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4b20:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d4b22:	4770      	bx	lr
   d4b24:	2003e650 	.word	0x2003e650
   d4b28:	000d62a8 	.word	0x000d62a8

000d4b2c <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d4b2c:	2100      	movs	r1, #0
   d4b2e:	f7ff bed3 	b.w	d48d8 <hal_spi_acquire>

000d4b32 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d4b32:	2100      	movs	r1, #0
   d4b34:	f7ff bed8 	b.w	d48e8 <hal_spi_release>

000d4b38 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d4b38:	b510      	push	{r4, lr}
   d4b3a:	4604      	mov	r4, r0
   d4b3c:	4608      	mov	r0, r1
{
    _spi = spi;
   d4b3e:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d4b40:	f7ff feb2 	bl	d48a8 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4b44:	2300      	movs	r3, #0
   d4b46:	6063      	str	r3, [r4, #4]
}
   d4b48:	4620      	mov	r0, r4
   d4b4a:	bd10      	pop	{r4, pc}

000d4b4c <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d4b4c:	b510      	push	{r4, lr}
   d4b4e:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d4b50:	7800      	ldrb	r0, [r0, #0]
   d4b52:	f7ff ffeb 	bl	d4b2c <_ZN8SPIClass4lockEv.isra.0>
   d4b56:	b948      	cbnz	r0, d4b6c <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d4b58:	7820      	ldrb	r0, [r4, #0]
   d4b5a:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d4b5e:	f7ff fe7b 	bl	d4858 <hal_spi_begin>
        unlock();
   d4b62:	7820      	ldrb	r0, [r4, #0]
    }
}
   d4b64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d4b68:	f7ff bfe3 	b.w	d4b32 <_ZN8SPIClass6unlockEv.isra.0>
}
   d4b6c:	bd10      	pop	{r4, pc}

000d4b6e <_ZN8SPIClass11setBitOrderEh>:
        unlock();
    }
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
   d4b6e:	b513      	push	{r0, r1, r4, lr}
   d4b70:	4604      	mov	r4, r0
    if (!lock())
   d4b72:	7800      	ldrb	r0, [r0, #0]
{
   d4b74:	9101      	str	r1, [sp, #4]
    if (!lock())
   d4b76:	f7ff ffd9 	bl	d4b2c <_ZN8SPIClass4lockEv.isra.0>
   d4b7a:	9901      	ldr	r1, [sp, #4]
   d4b7c:	b940      	cbnz	r0, d4b90 <_ZN8SPIClass11setBitOrderEh+0x22>
    {
        hal_spi_set_bit_order(_spi, bitOrder);
   d4b7e:	7820      	ldrb	r0, [r4, #0]
   d4b80:	f7ff fe72 	bl	d4868 <hal_spi_set_bit_order>
        unlock();
   d4b84:	7820      	ldrb	r0, [r4, #0]
    }
}
   d4b86:	b002      	add	sp, #8
   d4b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d4b8c:	f7ff bfd1 	b.w	d4b32 <_ZN8SPIClass6unlockEv.isra.0>
}
   d4b90:	b002      	add	sp, #8
   d4b92:	bd10      	pop	{r4, pc}

000d4b94 <_ZN8SPIClass11setDataModeEh>:

void SPIClass::setDataMode(uint8_t mode)
{
   d4b94:	b513      	push	{r0, r1, r4, lr}
   d4b96:	4604      	mov	r4, r0
    if (!lock())
   d4b98:	7800      	ldrb	r0, [r0, #0]
{
   d4b9a:	9101      	str	r1, [sp, #4]
    if (!lock())
   d4b9c:	f7ff ffc6 	bl	d4b2c <_ZN8SPIClass4lockEv.isra.0>
   d4ba0:	9901      	ldr	r1, [sp, #4]
   d4ba2:	b940      	cbnz	r0, d4bb6 <_ZN8SPIClass11setDataModeEh+0x22>
    {
        hal_spi_set_data_mode(_spi, mode);
   d4ba4:	7820      	ldrb	r0, [r4, #0]
   d4ba6:	f7ff fe67 	bl	d4878 <hal_spi_set_data_mode>
        unlock();
   d4baa:	7820      	ldrb	r0, [r4, #0]
    }
}
   d4bac:	b002      	add	sp, #8
   d4bae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d4bb2:	f7ff bfbe 	b.w	d4b32 <_ZN8SPIClass6unlockEv.isra.0>
}
   d4bb6:	b002      	add	sp, #8
   d4bb8:	bd10      	pop	{r4, pc}
	...

000d4bbc <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d4bbc:	0840      	lsrs	r0, r0, #1
{
   d4bbe:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d4bc0:	6018      	str	r0, [r3, #0]
   d4bc2:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d4bc4:	6818      	ldr	r0, [r3, #0]
   d4bc6:	4288      	cmp	r0, r1
   d4bc8:	b2e5      	uxtb	r5, r4
   d4bca:	d906      	bls.n	d4bda <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d4bcc:	3401      	adds	r4, #1
   d4bce:	2c08      	cmp	r4, #8
   d4bd0:	d002      	beq.n	d4bd8 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d4bd2:	0840      	lsrs	r0, r0, #1
   d4bd4:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d4bd6:	e7f5      	b.n	d4bc4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d4bd8:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d4bda:	4b02      	ldr	r3, [pc, #8]	; (d4be4 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d4bdc:	5d5b      	ldrb	r3, [r3, r5]
   d4bde:	7013      	strb	r3, [r2, #0]
}
   d4be0:	bd30      	pop	{r4, r5, pc}
   d4be2:	bf00      	nop
   d4be4:	000d62dc 	.word	0x000d62dc

000d4be8 <_ZN8SPIClass13setClockSpeedEjj>:

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
   d4be8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4bec:	b088      	sub	sp, #32
    unsigned clock = 0;
   d4bee:	2300      	movs	r3, #0
{
   d4bf0:	4604      	mov	r4, r0

    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value * value_scale;

    if (!lock())
   d4bf2:	7800      	ldrb	r0, [r0, #0]
    unsigned clock = 0;
   d4bf4:	9302      	str	r3, [sp, #8]
{
   d4bf6:	460e      	mov	r6, r1
   d4bf8:	4617      	mov	r7, r2
    if (!lock())
   d4bfa:	f7ff ff97 	bl	d4b2c <_ZN8SPIClass4lockEv.isra.0>
   d4bfe:	4605      	mov	r5, r0
   d4c00:	bb00      	cbnz	r0, d4c44 <_ZN8SPIClass13setClockSpeedEjj+0x5c>
    {
        // Query SPI info
        hal_spi_info_t info;
        querySpiInfo(_spi, &info);
   d4c02:	f894 8000 	ldrb.w	r8, [r4]
    memset(info, 0, sizeof(hal_spi_info_t));
   d4c06:	4601      	mov	r1, r0
   d4c08:	2214      	movs	r2, #20
   d4c0a:	a803      	add	r0, sp, #12
   d4c0c:	f001 fada 	bl	d61c4 <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d4c10:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d4c12:	462a      	mov	r2, r5
   d4c14:	a903      	add	r1, sp, #12
   d4c16:	4640      	mov	r0, r8
    info->version = HAL_SPI_INFO_VERSION_1;
   d4c18:	f8ad 300c 	strh.w	r3, [sp, #12]
    hal_spi_info(spi, info, nullptr);
   d4c1c:	f7ff fe54 	bl	d48c8 <hal_spi_info>

        // Calculate clock divider
        uint8_t divisor = 0;
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d4c20:	9804      	ldr	r0, [sp, #16]
        uint8_t divisor = 0;
   d4c22:	f88d 5007 	strb.w	r5, [sp, #7]
        computeClockDivider(info.system_clock, targetSpeed, divisor, clock);
   d4c26:	ab02      	add	r3, sp, #8
   d4c28:	f10d 0207 	add.w	r2, sp, #7
   d4c2c:	fb07 f106 	mul.w	r1, r7, r6
   d4c30:	f7ff ffc4 	bl	d4bbc <_ZN8SPIClass19computeClockDividerEjjRhRj>

        // Update SPI peripheral
        hal_spi_set_clock_divider(_spi, divisor);
   d4c34:	7820      	ldrb	r0, [r4, #0]
   d4c36:	f89d 1007 	ldrb.w	r1, [sp, #7]
   d4c3a:	f7ff fe25 	bl	d4888 <hal_spi_set_clock_divider>
        unlock();
   d4c3e:	7820      	ldrb	r0, [r4, #0]
   d4c40:	f7ff ff77 	bl	d4b32 <_ZN8SPIClass6unlockEv.isra.0>
    }

    return clock;
}
   d4c44:	9802      	ldr	r0, [sp, #8]
   d4c46:	b008      	add	sp, #32
   d4c48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4c4c <_ZN8SPIClass8transferEh>:

byte SPIClass::transfer(byte _data)
{
   d4c4c:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d4c4e:	7800      	ldrb	r0, [r0, #0]
   d4c50:	f7ff fe22 	bl	d4898 <hal_spi_transfer>
}
   d4c54:	b2c0      	uxtb	r0, r0
   d4c56:	bd08      	pop	{r3, pc}

000d4c58 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4c58:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4c5a:	4b09      	ldr	r3, [pc, #36]	; (d4c80 <_GLOBAL__sub_I_System+0x28>)

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4c5c:	4c09      	ldr	r4, [pc, #36]	; (d4c84 <_GLOBAL__sub_I_System+0x2c>)
   d4c5e:	2202      	movs	r2, #2
   d4c60:	2000      	movs	r0, #0
   d4c62:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d4c64:	4b08      	ldr	r3, [pc, #32]	; (d4c88 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d4c66:	6020      	str	r0, [r4, #0]
   d4c68:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d4c6a:	71a0      	strb	r0, [r4, #6]
   d4c6c:	60a3      	str	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4c6e:	f7ff fe7b 	bl	d4968 <set_system_mode>
SystemClass System;
   d4c72:	4620      	mov	r0, r4
   d4c74:	4a05      	ldr	r2, [pc, #20]	; (d4c8c <_GLOBAL__sub_I_System+0x34>)
   d4c76:	4906      	ldr	r1, [pc, #24]	; (d4c90 <_GLOBAL__sub_I_System+0x38>)
   d4c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d4c7c:	f000 bdc8 	b.w	d5810 <__aeabi_atexit>
   d4c80:	2003e664 	.word	0x2003e664
   d4c84:	2003e658 	.word	0x2003e658
   d4c88:	ffff0000 	.word	0xffff0000
   d4c8c:	2003e608 	.word	0x2003e608
   d4c90:	000d40ad 	.word	0x000d40ad

000d4c94 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4c94:	b510      	push	{r4, lr}
   d4c96:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4c98:	6800      	ldr	r0, [r0, #0]
   d4c9a:	b108      	cbz	r0, d4ca0 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4c9c:	f7ff fd34 	bl	d4708 <os_mutex_recursive_destroy>
    }
   d4ca0:	4620      	mov	r0, r4
   d4ca2:	bd10      	pop	{r4, pc}

000d4ca4 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d4ca4:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d4ca6:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d4ca8:	4604      	mov	r4, r0
      if (_M_manager)
   d4caa:	b113      	cbz	r3, d4cb2 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d4cac:	2203      	movs	r2, #3
   d4cae:	4601      	mov	r1, r0
   d4cb0:	4798      	blx	r3
    }
   d4cb2:	4620      	mov	r0, r4
   d4cb4:	bd10      	pop	{r4, pc}
	...

000d4cb8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(EnumFlags<BleCharacteristicProperty> properties, const String& desc, const BleOnDataReceivedStdFunction& callback) {
    WiringBleLock lk;
    return addCharacteristic(properties, desc.c_str(), callback);
}

} /* namespace particle */
   d4cb8:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d4cba:	4c06      	ldr	r4, [pc, #24]	; (d4cd4 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4cbc:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d4cbe:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d4cc0:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d4cc2:	f7ff fd19 	bl	d46f8 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d4cc6:	4620      	mov	r0, r4
   d4cc8:	4a03      	ldr	r2, [pc, #12]	; (d4cd8 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4cca:	4904      	ldr	r1, [pc, #16]	; (d4cdc <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d4ccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d4cd0:	f000 bd9e 	b.w	d5810 <__aeabi_atexit>
   d4cd4:	2003e668 	.word	0x2003e668
   d4cd8:	2003e608 	.word	0x2003e608
   d4cdc:	000d4c95 	.word	0x000d4c95

000d4ce0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4ce2:	4606      	mov	r6, r0
   d4ce4:	460d      	mov	r5, r1
  size_t n = 0;
   d4ce6:	188f      	adds	r7, r1, r2
   d4ce8:	2400      	movs	r4, #0
  while (size--) {
   d4cea:	42bd      	cmp	r5, r7
   d4cec:	d00c      	beq.n	d4d08 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4cee:	6833      	ldr	r3, [r6, #0]
   d4cf0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4cf4:	689b      	ldr	r3, [r3, #8]
   d4cf6:	4630      	mov	r0, r6
   d4cf8:	4798      	blx	r3
     if (chunk>=0)
   d4cfa:	1e03      	subs	r3, r0, #0
   d4cfc:	db01      	blt.n	d4d02 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4cfe:	441c      	add	r4, r3
  while (size--) {
   d4d00:	e7f3      	b.n	d4cea <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4d02:	2c00      	cmp	r4, #0
   d4d04:	bf08      	it	eq
   d4d06:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d4d08:	4620      	mov	r0, r4
   d4d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4d0c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4d0c:	b513      	push	{r0, r1, r4, lr}
   d4d0e:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d4d10:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d4d12:	b159      	cbz	r1, d4d2c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d4d14:	9101      	str	r1, [sp, #4]
   d4d16:	f001 fa81 	bl	d621c <strlen>
   d4d1a:	6823      	ldr	r3, [r4, #0]
   d4d1c:	9901      	ldr	r1, [sp, #4]
   d4d1e:	68db      	ldr	r3, [r3, #12]
   d4d20:	4602      	mov	r2, r0
   d4d22:	4620      	mov	r0, r4
    }
   d4d24:	b002      	add	sp, #8
   d4d26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d4d2a:	4718      	bx	r3
    }
   d4d2c:	b002      	add	sp, #8
   d4d2e:	bd10      	pop	{r4, pc}

000d4d30 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d4d30:	b508      	push	{r3, lr}
  return write(str);
   d4d32:	f7ff ffeb 	bl	d4d0c <_ZN5Print5writeEPKc>
}
   d4d36:	bd08      	pop	{r3, pc}

000d4d38 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d4d38:	6803      	ldr	r3, [r0, #0]
   d4d3a:	689b      	ldr	r3, [r3, #8]
   d4d3c:	4718      	bx	r3

000d4d3e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4d3e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4d40:	210d      	movs	r1, #13
{
   d4d42:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4d44:	f7ff fff8 	bl	d4d38 <_ZN5Print5printEc>
  n += print('\n');
   d4d48:	210a      	movs	r1, #10
  size_t n = print('\r');
   d4d4a:	4604      	mov	r4, r0
  n += print('\n');
   d4d4c:	4628      	mov	r0, r5
   d4d4e:	f7ff fff3 	bl	d4d38 <_ZN5Print5printEc>
  return n;
}
   d4d52:	4420      	add	r0, r4
   d4d54:	bd38      	pop	{r3, r4, r5, pc}

000d4d56 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d4d56:	b530      	push	{r4, r5, lr}
   d4d58:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d4d5a:	2300      	movs	r3, #0
   d4d5c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d4d60:	2a01      	cmp	r2, #1
   d4d62:	bf98      	it	ls
   d4d64:	220a      	movls	r2, #10
   d4d66:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d4d68:	460d      	mov	r5, r1
   d4d6a:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d4d6e:	fb01 5312 	mls	r3, r1, r2, r5
   d4d72:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4d76:	2b09      	cmp	r3, #9
   d4d78:	bf94      	ite	ls
   d4d7a:	3330      	addls	r3, #48	; 0x30
   d4d7c:	3337      	addhi	r3, #55	; 0x37
   d4d7e:	b2db      	uxtb	r3, r3
  } while(n);
   d4d80:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d4d82:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d4d86:	d9ef      	bls.n	d4d68 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d4d88:	4621      	mov	r1, r4
   d4d8a:	f7ff ffbf 	bl	d4d0c <_ZN5Print5writeEPKc>
}
   d4d8e:	b00b      	add	sp, #44	; 0x2c
   d4d90:	bd30      	pop	{r4, r5, pc}
	...

000d4d94 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
   d4d94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4d98:	ec55 4b10 	vmov	r4, r5, d0
   d4d9c:	4606      	mov	r6, r0
   d4d9e:	460f      	mov	r7, r1
  size_t n = 0;

  if (isnan(number)) return print("nan");
   d4da0:	ee10 2a10 	vmov	r2, s0
   d4da4:	ee10 0a10 	vmov	r0, s0
   d4da8:	462b      	mov	r3, r5
   d4daa:	4629      	mov	r1, r5
   d4dac:	f001 f990 	bl	d60d0 <__aeabi_dcmpun>
   d4db0:	b140      	cbz	r0, d4dc4 <_ZN5Print10printFloatEdh+0x30>
  return write(str);
   d4db2:	4953      	ldr	r1, [pc, #332]	; (d4f00 <_ZN5Print10printFloatEdh+0x16c>)
   d4db4:	4630      	mov	r0, r6
   d4db6:	f7ff ffa9 	bl	d4d0c <_ZN5Print5writeEPKc>
   d4dba:	4682      	mov	sl, r0
    n += print(toPrint);
    remainder -= toPrint;
  }

  return n;
}
   d4dbc:	4650      	mov	r0, sl
   d4dbe:	b003      	add	sp, #12
   d4dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  && !_GLIBCXX_NO_OBSOLETE_ISINF_ISNAN_DYNAMIC
  using ::isinf;
#else
  constexpr bool
  isinf(double __x)
  { return __builtin_isinf(__x); }
   d4dc4:	f025 4900 	bic.w	r9, r5, #2147483648	; 0x80000000
  if (isinf(number)) return print("inf");
   d4dc8:	4b4e      	ldr	r3, [pc, #312]	; (d4f04 <_ZN5Print10printFloatEdh+0x170>)
   d4dca:	f04f 32ff 	mov.w	r2, #4294967295
   d4dce:	4620      	mov	r0, r4
   d4dd0:	4649      	mov	r1, r9
   d4dd2:	f001 f97d 	bl	d60d0 <__aeabi_dcmpun>
   d4dd6:	b948      	cbnz	r0, d4dec <_ZN5Print10printFloatEdh+0x58>
   d4dd8:	4b4a      	ldr	r3, [pc, #296]	; (d4f04 <_ZN5Print10printFloatEdh+0x170>)
   d4dda:	f04f 32ff 	mov.w	r2, #4294967295
   d4dde:	4620      	mov	r0, r4
   d4de0:	4649      	mov	r1, r9
   d4de2:	f001 f957 	bl	d6094 <__aeabi_dcmple>
   d4de6:	b908      	cbnz	r0, d4dec <_ZN5Print10printFloatEdh+0x58>
  return write(str);
   d4de8:	4947      	ldr	r1, [pc, #284]	; (d4f08 <_ZN5Print10printFloatEdh+0x174>)
   d4dea:	e7e3      	b.n	d4db4 <_ZN5Print10printFloatEdh+0x20>
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
   d4dec:	4b47      	ldr	r3, [pc, #284]	; (d4f0c <_ZN5Print10printFloatEdh+0x178>)
   d4dee:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4df2:	4620      	mov	r0, r4
   d4df4:	4629      	mov	r1, r5
   d4df6:	f001 f961 	bl	d60bc <__aeabi_dcmpgt>
   d4dfa:	b108      	cbz	r0, d4e00 <_ZN5Print10printFloatEdh+0x6c>
  return write(str);
   d4dfc:	4944      	ldr	r1, [pc, #272]	; (d4f10 <_ZN5Print10printFloatEdh+0x17c>)
   d4dfe:	e7d9      	b.n	d4db4 <_ZN5Print10printFloatEdh+0x20>
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
   d4e00:	4b44      	ldr	r3, [pc, #272]	; (d4f14 <_ZN5Print10printFloatEdh+0x180>)
   d4e02:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d4e06:	4620      	mov	r0, r4
   d4e08:	4629      	mov	r1, r5
   d4e0a:	f001 f939 	bl	d6080 <__aeabi_dcmplt>
   d4e0e:	2800      	cmp	r0, #0
   d4e10:	d1f4      	bne.n	d4dfc <_ZN5Print10printFloatEdh+0x68>
  if (number < 0.0)
   d4e12:	2200      	movs	r2, #0
   d4e14:	2300      	movs	r3, #0
   d4e16:	4620      	mov	r0, r4
   d4e18:	4629      	mov	r1, r5
   d4e1a:	f001 f931 	bl	d6080 <__aeabi_dcmplt>
   d4e1e:	b1d0      	cbz	r0, d4e56 <_ZN5Print10printFloatEdh+0xc2>
     n += print('-');
   d4e20:	212d      	movs	r1, #45	; 0x2d
   d4e22:	4630      	mov	r0, r6
   d4e24:	f7ff ff88 	bl	d4d38 <_ZN5Print5printEc>
     number = -number;
   d4e28:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
     n += print('-');
   d4e2c:	4682      	mov	sl, r0
     number = -number;
   d4e2e:	461d      	mov	r5, r3
  double rounding = 0.5;
   d4e30:	4939      	ldr	r1, [pc, #228]	; (d4f18 <_ZN5Print10printFloatEdh+0x184>)
    rounding /= 10.0;
   d4e32:	f8df 90ec 	ldr.w	r9, [pc, #236]	; d4f20 <_ZN5Print10printFloatEdh+0x18c>
  size_t n = 0;
   d4e36:	f04f 0b00 	mov.w	fp, #0
  double rounding = 0.5;
   d4e3a:	2000      	movs	r0, #0
    rounding /= 10.0;
   d4e3c:	f04f 0800 	mov.w	r8, #0
  for (uint8_t i=0; i<digits; ++i)
   d4e40:	fa5f f38b 	uxtb.w	r3, fp
   d4e44:	429f      	cmp	r7, r3
   d4e46:	d908      	bls.n	d4e5a <_ZN5Print10printFloatEdh+0xc6>
    rounding /= 10.0;
   d4e48:	4642      	mov	r2, r8
   d4e4a:	464b      	mov	r3, r9
   d4e4c:	f000 ffd0 	bl	d5df0 <__aeabi_ddiv>
  for (uint8_t i=0; i<digits; ++i)
   d4e50:	f10b 0b01 	add.w	fp, fp, #1
   d4e54:	e7f4      	b.n	d4e40 <_ZN5Print10printFloatEdh+0xac>
  size_t n = 0;
   d4e56:	4682      	mov	sl, r0
   d4e58:	e7ea      	b.n	d4e30 <_ZN5Print10printFloatEdh+0x9c>
  number += rounding;
   d4e5a:	4622      	mov	r2, r4
   d4e5c:	462b      	mov	r3, r5
   d4e5e:	f000 fce7 	bl	d5830 <__adddf3>
   d4e62:	460d      	mov	r5, r1
   d4e64:	4604      	mov	r4, r0
  unsigned long int_part = (unsigned long)number;
   d4e66:	f001 f971 	bl	d614c <__aeabi_d2uiz>
   d4e6a:	4680      	mov	r8, r0
  double remainder = number - (double)int_part;
   d4e6c:	f000 fe1c 	bl	d5aa8 <__aeabi_ui2d>
   d4e70:	4602      	mov	r2, r0
   d4e72:	460b      	mov	r3, r1
   d4e74:	4620      	mov	r0, r4
   d4e76:	4629      	mov	r1, r5
   d4e78:	f000 fcd8 	bl	d582c <__aeabi_dsub>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d4e7c:	220a      	movs	r2, #10
   d4e7e:	4604      	mov	r4, r0
   d4e80:	460d      	mov	r5, r1
   d4e82:	4630      	mov	r0, r6
   d4e84:	4641      	mov	r1, r8
   d4e86:	f7ff ff66 	bl	d4d56 <_ZN5Print11printNumberEmh>
  n += print(int_part);
   d4e8a:	4482      	add	sl, r0
  if (digits > 0) {
   d4e8c:	b127      	cbz	r7, d4e98 <_ZN5Print10printFloatEdh+0x104>
  return write(str);
   d4e8e:	4923      	ldr	r1, [pc, #140]	; (d4f1c <_ZN5Print10printFloatEdh+0x188>)
   d4e90:	4630      	mov	r0, r6
   d4e92:	f7ff ff3b 	bl	d4d0c <_ZN5Print5writeEPKc>
    n += print(".");
   d4e96:	4482      	add	sl, r0
    remainder *= 10.0;
   d4e98:	f8df 9084 	ldr.w	r9, [pc, #132]	; d4f20 <_ZN5Print10printFloatEdh+0x18c>
   d4e9c:	f04f 0800 	mov.w	r8, #0
  while (digits-- > 0)
   d4ea0:	3f01      	subs	r7, #1
   d4ea2:	b2ff      	uxtb	r7, r7
   d4ea4:	2fff      	cmp	r7, #255	; 0xff
   d4ea6:	d089      	beq.n	d4dbc <_ZN5Print10printFloatEdh+0x28>
    remainder *= 10.0;
   d4ea8:	4642      	mov	r2, r8
   d4eaa:	464b      	mov	r3, r9
   d4eac:	4620      	mov	r0, r4
   d4eae:	4629      	mov	r1, r5
   d4eb0:	f000 fe74 	bl	d5b9c <__aeabi_dmul>
   d4eb4:	4604      	mov	r4, r0
   d4eb6:	460d      	mov	r5, r1
    int toPrint = int(remainder);
   d4eb8:	f001 f920 	bl	d60fc <__aeabi_d2iz>
        if (n < 0 && base == 10) {
   d4ebc:	f1b0 0b00 	subs.w	fp, r0, #0
   d4ec0:	da1a      	bge.n	d4ef8 <_ZN5Print10printFloatEdh+0x164>
            t = print('-');
   d4ec2:	212d      	movs	r1, #45	; 0x2d
   d4ec4:	4630      	mov	r0, r6
   d4ec6:	f7ff ff37 	bl	d4d38 <_ZN5Print5printEc>
            val = -n;
   d4eca:	f1cb 0100 	rsb	r1, fp, #0
            t = print('-');
   d4ece:	4603      	mov	r3, r0
        return printNumber(val, base) + t;
   d4ed0:	220a      	movs	r2, #10
   d4ed2:	4630      	mov	r0, r6
   d4ed4:	9301      	str	r3, [sp, #4]
   d4ed6:	f7ff ff3e 	bl	d4d56 <_ZN5Print11printNumberEmh>
   d4eda:	9b01      	ldr	r3, [sp, #4]
   d4edc:	4418      	add	r0, r3
    n += print(toPrint);
   d4ede:	4482      	add	sl, r0
    remainder -= toPrint;
   d4ee0:	4658      	mov	r0, fp
   d4ee2:	f000 fdf1 	bl	d5ac8 <__aeabi_i2d>
   d4ee6:	4602      	mov	r2, r0
   d4ee8:	460b      	mov	r3, r1
   d4eea:	4620      	mov	r0, r4
   d4eec:	4629      	mov	r1, r5
   d4eee:	f000 fc9d 	bl	d582c <__aeabi_dsub>
   d4ef2:	4604      	mov	r4, r0
   d4ef4:	460d      	mov	r5, r1
  while (digits-- > 0)
   d4ef6:	e7d3      	b.n	d4ea0 <_ZN5Print10printFloatEdh+0x10c>
            val = n;
   d4ef8:	4659      	mov	r1, fp
        size_t t = 0;
   d4efa:	2300      	movs	r3, #0
   d4efc:	e7e8      	b.n	d4ed0 <_ZN5Print10printFloatEdh+0x13c>
   d4efe:	bf00      	nop
   d4f00:	000d62e4 	.word	0x000d62e4
   d4f04:	7fefffff 	.word	0x7fefffff
   d4f08:	000d62e8 	.word	0x000d62e8
   d4f0c:	41efffff 	.word	0x41efffff
   d4f10:	000d62ec 	.word	0x000d62ec
   d4f14:	c1efffff 	.word	0xc1efffff
   d4f18:	3fe00000 	.word	0x3fe00000
   d4f1c:	000d62f0 	.word	0x000d62f0
   d4f20:	40240000 	.word	0x40240000

000d4f24 <_ZN5Print5printEfi>:
{
   d4f24:	b538      	push	{r3, r4, r5, lr}
   d4f26:	4604      	mov	r4, r0
   d4f28:	ee10 0a10 	vmov	r0, s0
  return printFloat((double)n, digits);
   d4f2c:	b2cd      	uxtb	r5, r1
   d4f2e:	f000 fddd 	bl	d5aec <__aeabi_f2d>
   d4f32:	ec41 0b10 	vmov	d0, r0, r1
   d4f36:	4629      	mov	r1, r5
   d4f38:	4620      	mov	r0, r4
}
   d4f3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return printFloat((double)n, digits);
   d4f3e:	f7ff bf29 	b.w	d4d94 <_ZN5Print10printFloatEdh>

000d4f42 <_ZN5spark9WiFiClass2onEv>:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d4f42:	2300      	movs	r3, #0
   d4f44:	6840      	ldr	r0, [r0, #4]
   d4f46:	461a      	mov	r2, r3
   d4f48:	4619      	mov	r1, r3
   d4f4a:	f7ff bd51 	b.w	d49f0 <network_on>
	...

000d4f50 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d4f50:	4b01      	ldr	r3, [pc, #4]	; (d4f58 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d4f52:	4a02      	ldr	r2, [pc, #8]	; (d4f5c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d4f54:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d4f56:	4770      	bx	lr
   d4f58:	2003e66c 	.word	0x2003e66c
   d4f5c:	000d62f2 	.word	0x000d62f2

000d4f60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d4f60:	4b02      	ldr	r3, [pc, #8]	; (d4f6c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d4f62:	681a      	ldr	r2, [r3, #0]
   d4f64:	4b02      	ldr	r3, [pc, #8]	; (d4f70 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d4f66:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d4f68:	4770      	bx	lr
   d4f6a:	bf00      	nop
   d4f6c:	2003e5a0 	.word	0x2003e5a0
   d4f70:	2003e670 	.word	0x2003e670

000d4f74 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d4f74:	2100      	movs	r1, #0
   d4f76:	f7ff bcff 	b.w	d4978 <system_delay_ms>

000d4f7a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d4f7a:	b510      	push	{r4, lr}
   d4f7c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d4f7e:	f7ff fe91 	bl	d4ca4 <_ZNSt14_Function_baseD1Ev>
   d4f82:	4620      	mov	r0, r4
   d4f84:	bd10      	pop	{r4, pc}
	...

000d4f88 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d4f88:	4803      	ldr	r0, [pc, #12]	; (d4f98 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d4f8a:	4a04      	ldr	r2, [pc, #16]	; (d4f9c <_GLOBAL__sub_I_RGB+0x14>)
   d4f8c:	4904      	ldr	r1, [pc, #16]	; (d4fa0 <_GLOBAL__sub_I_RGB+0x18>)
   d4f8e:	2300      	movs	r3, #0
   d4f90:	6083      	str	r3, [r0, #8]
   d4f92:	f000 bc3d 	b.w	d5810 <__aeabi_atexit>
   d4f96:	bf00      	nop
   d4f98:	2003e674 	.word	0x2003e674
   d4f9c:	2003e608 	.word	0x2003e608
   d4fa0:	000d4f7b 	.word	0x000d4f7b

000d4fa4 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d4fa4:	4b01      	ldr	r3, [pc, #4]	; (d4fac <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d4fa6:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d4fa8:	4770      	bx	lr
   d4faa:	bf00      	nop
   d4fac:	2003e5a4 	.word	0x2003e5a4

000d4fb0 <serialEventRun>:
{
   d4fb0:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d4fb2:	4b0b      	ldr	r3, [pc, #44]	; (d4fe0 <serialEventRun+0x30>)
   d4fb4:	b143      	cbz	r3, d4fc8 <serialEventRun+0x18>
   d4fb6:	f000 f95b 	bl	d5270 <_Z16_fetch_usbserialv>
   d4fba:	6803      	ldr	r3, [r0, #0]
   d4fbc:	691b      	ldr	r3, [r3, #16]
   d4fbe:	4798      	blx	r3
   d4fc0:	2800      	cmp	r0, #0
   d4fc2:	dd01      	ble.n	d4fc8 <serialEventRun+0x18>
        serialEvent();
   d4fc4:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d4fc8:	4b06      	ldr	r3, [pc, #24]	; (d4fe4 <serialEventRun+0x34>)
   d4fca:	b143      	cbz	r3, d4fde <serialEventRun+0x2e>
   d4fcc:	f000 f9ce 	bl	d536c <_Z22__fetch_global_Serial1v>
   d4fd0:	6803      	ldr	r3, [r0, #0]
   d4fd2:	691b      	ldr	r3, [r3, #16]
   d4fd4:	4798      	blx	r3
   d4fd6:	2800      	cmp	r0, #0
   d4fd8:	dd01      	ble.n	d4fde <serialEventRun+0x2e>
        serialEvent1();
   d4fda:	f3af 8000 	nop.w
}
   d4fde:	bd08      	pop	{r3, pc}
	...

000d4fe8 <_post_loop>:
{
   d4fe8:	b508      	push	{r3, lr}
	serialEventRun();
   d4fea:	f7ff ffe1 	bl	d4fb0 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d4fee:	f7ff fb7b 	bl	d46e8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d4ff2:	4b01      	ldr	r3, [pc, #4]	; (d4ff8 <_post_loop+0x10>)
   d4ff4:	6018      	str	r0, [r3, #0]
}
   d4ff6:	bd08      	pop	{r3, pc}
   d4ff8:	2003e7d4 	.word	0x2003e7d4

000d4ffc <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d4ffc:	4802      	ldr	r0, [pc, #8]	; (d5008 <_Z33system_initialize_user_backup_ramv+0xc>)
   d4ffe:	4a03      	ldr	r2, [pc, #12]	; (d500c <_Z33system_initialize_user_backup_ramv+0x10>)
   d5000:	4903      	ldr	r1, [pc, #12]	; (d5010 <_Z33system_initialize_user_backup_ramv+0x14>)
   d5002:	1a12      	subs	r2, r2, r0
   d5004:	f001 b8d0 	b.w	d61a8 <memcpy>
   d5008:	2003f400 	.word	0x2003f400
   d500c:	2003f404 	.word	0x2003f404
   d5010:	000d6450 	.word	0x000d6450

000d5014 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5014:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5016:	2300      	movs	r3, #0
   d5018:	9300      	str	r3, [sp, #0]
   d501a:	461a      	mov	r2, r3
   d501c:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d5020:	f7ff fcbc 	bl	d499c <system_ctrl_set_result>
}
   d5024:	b003      	add	sp, #12
   d5026:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d502c <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d502c:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d502e:	8843      	ldrh	r3, [r0, #2]
   d5030:	2b0a      	cmp	r3, #10
   d5032:	d008      	beq.n	d5046 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d5034:	2b50      	cmp	r3, #80	; 0x50
   d5036:	d10b      	bne.n	d5050 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d5038:	4b09      	ldr	r3, [pc, #36]	; (d5060 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d503a:	681b      	ldr	r3, [r3, #0]
   d503c:	b14b      	cbz	r3, d5052 <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d503e:	b003      	add	sp, #12
   d5040:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d5044:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d5046:	f7ff ffe5 	bl	d5014 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d504a:	b003      	add	sp, #12
   d504c:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5050:	2300      	movs	r3, #0
   d5052:	9300      	str	r3, [sp, #0]
   d5054:	461a      	mov	r2, r3
   d5056:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d505a:	f7ff fc9f 	bl	d499c <system_ctrl_set_result>
}
   d505e:	e7f4      	b.n	d504a <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d5060:	2003e688 	.word	0x2003e688

000d5064 <module_user_init_hook>:
{
   d5064:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5066:	4c12      	ldr	r4, [pc, #72]	; (d50b0 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d5068:	4812      	ldr	r0, [pc, #72]	; (d50b4 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d506a:	4d13      	ldr	r5, [pc, #76]	; (d50b8 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d506c:	2100      	movs	r1, #0
   d506e:	f7ff fd17 	bl	d4aa0 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d5072:	6823      	ldr	r3, [r4, #0]
   d5074:	42ab      	cmp	r3, r5
   d5076:	4b11      	ldr	r3, [pc, #68]	; (d50bc <module_user_init_hook+0x58>)
   d5078:	bf0c      	ite	eq
   d507a:	2201      	moveq	r2, #1
   d507c:	2200      	movne	r2, #0
   d507e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d5080:	d002      	beq.n	d5088 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d5082:	f7ff ffbb 	bl	d4ffc <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d5086:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d5088:	f7ff fb26 	bl	d46d8 <HAL_RNG_GetRandomNumber>
   d508c:	4604      	mov	r4, r0
    srand(seed);
   d508e:	f001 f8a1 	bl	d61d4 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5092:	4b0b      	ldr	r3, [pc, #44]	; (d50c0 <module_user_init_hook+0x5c>)
   d5094:	b113      	cbz	r3, d509c <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d5096:	4620      	mov	r0, r4
   d5098:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d509c:	2100      	movs	r1, #0
   d509e:	4808      	ldr	r0, [pc, #32]	; (d50c0 <module_user_init_hook+0x5c>)
   d50a0:	f7ff fce6 	bl	d4a70 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d50a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d50a8:	4806      	ldr	r0, [pc, #24]	; (d50c4 <module_user_init_hook+0x60>)
   d50aa:	2100      	movs	r1, #0
   d50ac:	f7ff bc6c 	b.w	d4988 <system_ctrl_set_app_request_handler>
   d50b0:	2003f400 	.word	0x2003f400
   d50b4:	000d4fa5 	.word	0x000d4fa5
   d50b8:	9a271c1e 	.word	0x9a271c1e
   d50bc:	2003e684 	.word	0x2003e684
   d50c0:	00000000 	.word	0x00000000
   d50c4:	000d502d 	.word	0x000d502d

000d50c8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint32_t address);
    // 4 bytes defining the IP address in network order
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d50c8:	4770      	bx	lr

000d50ca <_ZN9IPAddressD0Ev>:
   d50ca:	b510      	push	{r4, lr}
   d50cc:	2118      	movs	r1, #24
   d50ce:	4604      	mov	r4, r0
   d50d0:	f000 fba3 	bl	d581a <_ZdlPvj>
   d50d4:	4620      	mov	r0, r4
   d50d6:	bd10      	pop	{r4, pc}

000d50d8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d50d8:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d50da:	7d03      	ldrb	r3, [r0, #20]
   d50dc:	2b06      	cmp	r3, #6
{
   d50de:	b08d      	sub	sp, #52	; 0x34
   d50e0:	460e      	mov	r6, r1
   d50e2:	f100 0704 	add.w	r7, r0, #4
   d50e6:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d50ea:	d012      	beq.n	d5112 <_ZNK9IPAddress7printToER5Print+0x3a>
   d50ec:	f100 0508 	add.w	r5, r0, #8
        return printNumber(val, base) + t;
   d50f0:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d50f4:	220a      	movs	r2, #10
   d50f6:	4630      	mov	r0, r6
   d50f8:	f7ff fe2d 	bl	d4d56 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d50fc:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d50fe:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5100:	d019      	beq.n	d5136 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5102:	2c00      	cmp	r4, #0
   d5104:	d0f4      	beq.n	d50f0 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5106:	212e      	movs	r1, #46	; 0x2e
   d5108:	4630      	mov	r0, r6
   d510a:	f7ff fe15 	bl	d4d38 <_ZN5Print5printEc>
   d510e:	4404      	add	r4, r0
   d5110:	e7ee      	b.n	d50f0 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5112:	232f      	movs	r3, #47	; 0x2f
   d5114:	466a      	mov	r2, sp
   d5116:	4639      	mov	r1, r7
   d5118:	200a      	movs	r0, #10
		buf[0] = 0;
   d511a:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d511e:	f7ff fafb 	bl	d4718 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5122:	4668      	mov	r0, sp
   d5124:	f001 f87a 	bl	d621c <strlen>
   d5128:	6833      	ldr	r3, [r6, #0]
   d512a:	4602      	mov	r2, r0
   d512c:	68db      	ldr	r3, [r3, #12]
   d512e:	4669      	mov	r1, sp
   d5130:	4630      	mov	r0, r6
   d5132:	4798      	blx	r3
   d5134:	4604      	mov	r4, r0
    }
    return n;
}
   d5136:	4620      	mov	r0, r4
   d5138:	b00d      	add	sp, #52	; 0x34
   d513a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d513c <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d513c:	b510      	push	{r4, lr}
   d513e:	4b05      	ldr	r3, [pc, #20]	; (d5154 <_ZN9IPAddressC1Ev+0x18>)
   d5140:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5142:	2211      	movs	r2, #17
   d5144:	f840 3b04 	str.w	r3, [r0], #4
   d5148:	2100      	movs	r1, #0
   d514a:	f001 f83b 	bl	d61c4 <memset>
}
   d514e:	4620      	mov	r0, r4
   d5150:	bd10      	pop	{r4, pc}
   d5152:	bf00      	nop
   d5154:	000d631c 	.word	0x000d631c

000d5158 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5158:	4603      	mov	r3, r0
   d515a:	4a07      	ldr	r2, [pc, #28]	; (d5178 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d515c:	b510      	push	{r4, lr}
   d515e:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5162:	f101 0210 	add.w	r2, r1, #16
   d5166:	f851 4b04 	ldr.w	r4, [r1], #4
   d516a:	f843 4b04 	str.w	r4, [r3], #4
   d516e:	4291      	cmp	r1, r2
   d5170:	d1f9      	bne.n	d5166 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5172:	780a      	ldrb	r2, [r1, #0]
   d5174:	701a      	strb	r2, [r3, #0]
}
   d5176:	bd10      	pop	{r4, pc}
   d5178:	000d631c 	.word	0x000d631c

000d517c <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d517c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d517e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5182:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5186:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d518a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d518e:	2304      	movs	r3, #4
   d5190:	6041      	str	r1, [r0, #4]
   d5192:	7503      	strb	r3, [r0, #20]
}
   d5194:	bd10      	pop	{r4, pc}
	...

000d5198 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(const uint8_t* addr)
   d5198:	b513      	push	{r0, r1, r4, lr}
   d519a:	4b05      	ldr	r3, [pc, #20]	; (d51b0 <_ZN9IPAddressC1EPKh+0x18>)
   d519c:	6003      	str	r3, [r0, #0]
    set_ipv4(addr[0], addr[1], addr[2], addr[3]);
   d519e:	78cb      	ldrb	r3, [r1, #3]
   d51a0:	9300      	str	r3, [sp, #0]
   d51a2:	788b      	ldrb	r3, [r1, #2]
   d51a4:	784a      	ldrb	r2, [r1, #1]
   d51a6:	7809      	ldrb	r1, [r1, #0]
   d51a8:	f7ff ffe8 	bl	d517c <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d51ac:	b002      	add	sp, #8
   d51ae:	bd10      	pop	{r4, pc}
   d51b0:	000d631c 	.word	0x000d631c

000d51b4 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d51b4:	7441      	strb	r1, [r0, #17]
}
   d51b6:	4770      	bx	lr

000d51b8 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d51b8:	4770      	bx	lr

000d51ba <_ZN9USBSerial4readEv>:
{
   d51ba:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d51bc:	2100      	movs	r1, #0
   d51be:	7c00      	ldrb	r0, [r0, #16]
   d51c0:	f7ff fbba 	bl	d4938 <HAL_USB_USART_Receive_Data>
}
   d51c4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d51c8:	bd08      	pop	{r3, pc}

000d51ca <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d51ca:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d51cc:	2101      	movs	r1, #1
   d51ce:	7c00      	ldrb	r0, [r0, #16]
   d51d0:	f7ff fbb2 	bl	d4938 <HAL_USB_USART_Receive_Data>
}
   d51d4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d51d8:	bd08      	pop	{r3, pc}

000d51da <_ZN9USBSerial17availableForWriteEv>:
{
   d51da:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d51dc:	7c00      	ldrb	r0, [r0, #16]
   d51de:	f7ff fba3 	bl	d4928 <HAL_USB_USART_Available_Data_For_Write>
}
   d51e2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d51e6:	bd08      	pop	{r3, pc}

000d51e8 <_ZN9USBSerial9availableEv>:
{
   d51e8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d51ea:	7c00      	ldrb	r0, [r0, #16]
   d51ec:	f7ff fb94 	bl	d4918 <HAL_USB_USART_Available_Data>
}
   d51f0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d51f4:	bd08      	pop	{r3, pc}

000d51f6 <_ZN9USBSerial5writeEh>:
{
   d51f6:	b513      	push	{r0, r1, r4, lr}
   d51f8:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d51fa:	7c00      	ldrb	r0, [r0, #16]
{
   d51fc:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d51fe:	f7ff fb93 	bl	d4928 <HAL_USB_USART_Available_Data_For_Write>
   d5202:	2800      	cmp	r0, #0
   d5204:	9901      	ldr	r1, [sp, #4]
   d5206:	dc01      	bgt.n	d520c <_ZN9USBSerial5writeEh+0x16>
   d5208:	7c60      	ldrb	r0, [r4, #17]
   d520a:	b120      	cbz	r0, d5216 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d520c:	7c20      	ldrb	r0, [r4, #16]
   d520e:	f7ff fb9b 	bl	d4948 <HAL_USB_USART_Send_Data>
   d5212:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d5216:	b002      	add	sp, #8
   d5218:	bd10      	pop	{r4, pc}

000d521a <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d521a:	7c00      	ldrb	r0, [r0, #16]
   d521c:	f7ff bb9c 	b.w	d4958 <HAL_USB_USART_Flush_Data>

000d5220 <_ZN9USBSerialD0Ev>:
   d5220:	b510      	push	{r4, lr}
   d5222:	2114      	movs	r1, #20
   d5224:	4604      	mov	r4, r0
   d5226:	f000 faf8 	bl	d581a <_ZdlPvj>
   d522a:	4620      	mov	r0, r4
   d522c:	bd10      	pop	{r4, pc}
	...

000d5230 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d5230:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5232:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5236:	4604      	mov	r4, r0
   d5238:	4608      	mov	r0, r1
   d523a:	2100      	movs	r1, #0
   d523c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5240:	4b04      	ldr	r3, [pc, #16]	; (d5254 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d5242:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d5244:	2301      	movs	r3, #1
  _serial = serial;
   d5246:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d5248:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d524a:	4611      	mov	r1, r2
   d524c:	f7ff fb54 	bl	d48f8 <HAL_USB_USART_Init>
}
   d5250:	4620      	mov	r0, r4
   d5252:	bd10      	pop	{r4, pc}
   d5254:	000d6330 	.word	0x000d6330

000d5258 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d5258:	7c00      	ldrb	r0, [r0, #16]
   d525a:	2200      	movs	r2, #0
   d525c:	f7ff bb54 	b.w	d4908 <HAL_USB_USART_Begin>

000d5260 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d5260:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d5262:	2214      	movs	r2, #20
{
   d5264:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d5266:	2100      	movs	r1, #0
   d5268:	f000 ffac 	bl	d61c4 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d526c:	4620      	mov	r0, r4
   d526e:	bd10      	pop	{r4, pc}

000d5270 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d5270:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d5272:	4c10      	ldr	r4, [pc, #64]	; (d52b4 <_Z16_fetch_usbserialv+0x44>)
{
   d5274:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d5276:	a803      	add	r0, sp, #12
   d5278:	f7ff fff2 	bl	d5260 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d527c:	7821      	ldrb	r1, [r4, #0]
   d527e:	f3bf 8f5b 	dmb	ish
   d5282:	f011 0101 	ands.w	r1, r1, #1
   d5286:	d111      	bne.n	d52ac <_Z16_fetch_usbserialv+0x3c>
   d5288:	4620      	mov	r0, r4
   d528a:	9101      	str	r1, [sp, #4]
   d528c:	f7fe ff05 	bl	d409a <__cxa_guard_acquire>
   d5290:	9901      	ldr	r1, [sp, #4]
   d5292:	b158      	cbz	r0, d52ac <_Z16_fetch_usbserialv+0x3c>
   d5294:	aa03      	add	r2, sp, #12
   d5296:	4808      	ldr	r0, [pc, #32]	; (d52b8 <_Z16_fetch_usbserialv+0x48>)
   d5298:	f7ff ffca 	bl	d5230 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d529c:	4620      	mov	r0, r4
   d529e:	f7fe ff01 	bl	d40a4 <__cxa_guard_release>
   d52a2:	4a06      	ldr	r2, [pc, #24]	; (d52bc <_Z16_fetch_usbserialv+0x4c>)
   d52a4:	4906      	ldr	r1, [pc, #24]	; (d52c0 <_Z16_fetch_usbserialv+0x50>)
   d52a6:	4804      	ldr	r0, [pc, #16]	; (d52b8 <_Z16_fetch_usbserialv+0x48>)
   d52a8:	f000 fab2 	bl	d5810 <__aeabi_atexit>
	return _usbserial;
}
   d52ac:	4802      	ldr	r0, [pc, #8]	; (d52b8 <_Z16_fetch_usbserialv+0x48>)
   d52ae:	b008      	add	sp, #32
   d52b0:	bd10      	pop	{r4, pc}
   d52b2:	bf00      	nop
   d52b4:	2003e68c 	.word	0x2003e68c
   d52b8:	2003e690 	.word	0x2003e690
   d52bc:	2003e608 	.word	0x2003e608
   d52c0:	000d51b9 	.word	0x000d51b9

000d52c4 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d52c4:	4770      	bx	lr

000d52c6 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d52c6:	7441      	strb	r1, [r0, #17]
}
   d52c8:	4770      	bx	lr

000d52ca <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d52ca:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d52cc:	7c00      	ldrb	r0, [r0, #16]
   d52ce:	f7ff fa63 	bl	d4798 <hal_usart_available_data_for_write>
}
   d52d2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d52d6:	bd08      	pop	{r3, pc}

000d52d8 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d52d8:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d52da:	7c00      	ldrb	r0, [r0, #16]
   d52dc:	f7ff fa34 	bl	d4748 <hal_usart_available>
}
   d52e0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d52e4:	bd08      	pop	{r3, pc}

000d52e6 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d52e6:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d52e8:	7c00      	ldrb	r0, [r0, #16]
   d52ea:	f7ff fa3d 	bl	d4768 <hal_usart_peek>
}
   d52ee:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d52f2:	bd08      	pop	{r3, pc}

000d52f4 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d52f4:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d52f6:	7c00      	ldrb	r0, [r0, #16]
   d52f8:	f7ff fa2e 	bl	d4758 <hal_usart_read>
}
   d52fc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d5300:	bd08      	pop	{r3, pc}

000d5302 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d5302:	7c00      	ldrb	r0, [r0, #16]
   d5304:	f7ff ba38 	b.w	d4778 <hal_usart_flush>

000d5308 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d5308:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d530a:	7c45      	ldrb	r5, [r0, #17]
{
   d530c:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d530e:	b12d      	cbz	r5, d531c <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d5310:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d5312:	b003      	add	sp, #12
   d5314:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d5318:	f7ff ba0e 	b.w	d4738 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d531c:	7c00      	ldrb	r0, [r0, #16]
   d531e:	9101      	str	r1, [sp, #4]
   d5320:	f7ff fa3a 	bl	d4798 <hal_usart_available_data_for_write>
   d5324:	2800      	cmp	r0, #0
   d5326:	9901      	ldr	r1, [sp, #4]
   d5328:	dcf2      	bgt.n	d5310 <_ZN11USARTSerial5writeEh+0x8>
}
   d532a:	4628      	mov	r0, r5
   d532c:	b003      	add	sp, #12
   d532e:	bd30      	pop	{r4, r5, pc}

000d5330 <_ZN11USARTSerialD0Ev>:
   d5330:	b510      	push	{r4, lr}
   d5332:	2114      	movs	r1, #20
   d5334:	4604      	mov	r4, r0
   d5336:	f000 fa70 	bl	d581a <_ZdlPvj>
   d533a:	4620      	mov	r0, r4
   d533c:	bd10      	pop	{r4, pc}
	...

000d5340 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d5340:	b510      	push	{r4, lr}
   d5342:	f04f 0c00 	mov.w	ip, #0
   d5346:	4604      	mov	r4, r0
   d5348:	4608      	mov	r0, r1
   d534a:	4611      	mov	r1, r2
   d534c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d5350:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d5354:	4a04      	ldr	r2, [pc, #16]	; (d5368 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d5356:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d5358:	2201      	movs	r2, #1
  _serial = serial;
   d535a:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d535c:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d535e:	461a      	mov	r2, r3
   d5360:	f7ff f9e2 	bl	d4728 <hal_usart_init>
}
   d5364:	4620      	mov	r0, r4
   d5366:	bd10      	pop	{r4, pc}
   d5368:	000d6360 	.word	0x000d6360

000d536c <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d536c:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d536e:	4c0e      	ldr	r4, [pc, #56]	; (d53a8 <_Z22__fetch_global_Serial1v+0x3c>)
   d5370:	7821      	ldrb	r1, [r4, #0]
   d5372:	f3bf 8f5b 	dmb	ish
   d5376:	f011 0101 	ands.w	r1, r1, #1
   d537a:	d112      	bne.n	d53a2 <_Z22__fetch_global_Serial1v+0x36>
   d537c:	4620      	mov	r0, r4
   d537e:	9101      	str	r1, [sp, #4]
   d5380:	f7fe fe8b 	bl	d409a <__cxa_guard_acquire>
   d5384:	9901      	ldr	r1, [sp, #4]
   d5386:	b160      	cbz	r0, d53a2 <_Z22__fetch_global_Serial1v+0x36>
   d5388:	4a08      	ldr	r2, [pc, #32]	; (d53ac <_Z22__fetch_global_Serial1v+0x40>)
   d538a:	4b09      	ldr	r3, [pc, #36]	; (d53b0 <_Z22__fetch_global_Serial1v+0x44>)
   d538c:	4809      	ldr	r0, [pc, #36]	; (d53b4 <_Z22__fetch_global_Serial1v+0x48>)
   d538e:	f7ff ffd7 	bl	d5340 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d5392:	4620      	mov	r0, r4
   d5394:	f7fe fe86 	bl	d40a4 <__cxa_guard_release>
   d5398:	4a07      	ldr	r2, [pc, #28]	; (d53b8 <_Z22__fetch_global_Serial1v+0x4c>)
   d539a:	4908      	ldr	r1, [pc, #32]	; (d53bc <_Z22__fetch_global_Serial1v+0x50>)
   d539c:	4805      	ldr	r0, [pc, #20]	; (d53b4 <_Z22__fetch_global_Serial1v+0x48>)
   d539e:	f000 fa37 	bl	d5810 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d53a2:	4804      	ldr	r0, [pc, #16]	; (d53b4 <_Z22__fetch_global_Serial1v+0x48>)
   d53a4:	b002      	add	sp, #8
   d53a6:	bd10      	pop	{r4, pc}
   d53a8:	2003e6a4 	.word	0x2003e6a4
   d53ac:	2003e6a8 	.word	0x2003e6a8
   d53b0:	2003e72c 	.word	0x2003e72c
   d53b4:	2003e7b0 	.word	0x2003e7b0
   d53b8:	2003e608 	.word	0x2003e608
   d53bc:	000d52c5 	.word	0x000d52c5

000d53c0 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d53c0:	4770      	bx	lr

000d53c2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d53c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d53c4:	4606      	mov	r6, r0
   d53c6:	4615      	mov	r5, r2
   d53c8:	460c      	mov	r4, r1
   d53ca:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d53cc:	42bc      	cmp	r4, r7
   d53ce:	d006      	beq.n	d53de <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d53d0:	6833      	ldr	r3, [r6, #0]
   d53d2:	f814 1b01 	ldrb.w	r1, [r4], #1
   d53d6:	689b      	ldr	r3, [r3, #8]
   d53d8:	4630      	mov	r0, r6
   d53da:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d53dc:	e7f6      	b.n	d53cc <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d53de:	4628      	mov	r0, r5
   d53e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d53e2 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d53e2:	7c00      	ldrb	r0, [r0, #16]
   d53e4:	2200      	movs	r2, #0
   d53e6:	f7ff b9f7 	b.w	d47d8 <hal_i2c_write>

000d53ea <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d53ea:	7c00      	ldrb	r0, [r0, #16]
   d53ec:	2100      	movs	r1, #0
   d53ee:	f7ff b9fb 	b.w	d47e8 <hal_i2c_available>

000d53f2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d53f2:	7c00      	ldrb	r0, [r0, #16]
   d53f4:	2100      	movs	r1, #0
   d53f6:	f7ff b9ff 	b.w	d47f8 <hal_i2c_read>

000d53fa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d53fa:	7c00      	ldrb	r0, [r0, #16]
   d53fc:	2100      	movs	r1, #0
   d53fe:	f7ff ba03 	b.w	d4808 <hal_i2c_peek>

000d5402 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d5402:	7c00      	ldrb	r0, [r0, #16]
   d5404:	2100      	movs	r1, #0
   d5406:	f7ff ba07 	b.w	d4818 <hal_i2c_flush>

000d540a <_ZN7TwoWireD0Ev>:
   d540a:	b510      	push	{r4, lr}
   d540c:	2114      	movs	r1, #20
   d540e:	4604      	mov	r4, r0
   d5410:	f000 fa03 	bl	d581a <_ZdlPvj>
   d5414:	4620      	mov	r0, r4
   d5416:	bd10      	pop	{r4, pc}

000d5418 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5418:	b510      	push	{r4, lr}
   d541a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d541e:	4604      	mov	r4, r0
   d5420:	4608      	mov	r0, r1
   d5422:	2100      	movs	r1, #0
   d5424:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5428:	4b03      	ldr	r3, [pc, #12]	; (d5438 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d542a:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d542c:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d542e:	4611      	mov	r1, r2
   d5430:	f7ff fa02 	bl	d4838 <hal_i2c_init>
}
   d5434:	4620      	mov	r0, r4
   d5436:	bd10      	pop	{r4, pc}
   d5438:	000d6390 	.word	0x000d6390

000d543c <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d543c:	2300      	movs	r3, #0
   d543e:	7c00      	ldrb	r0, [r0, #16]
   d5440:	461a      	mov	r2, r3
   d5442:	4619      	mov	r1, r3
   d5444:	f7ff b9b0 	b.w	d47a8 <hal_i2c_begin>

000d5448 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d5448:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d544a:	2200      	movs	r2, #0
   d544c:	2314      	movs	r3, #20
   d544e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d5452:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d5456:	780b      	ldrb	r3, [r1, #0]
   d5458:	f88d 3008 	strb.w	r3, [sp, #8]
   d545c:	684b      	ldr	r3, [r1, #4]
   d545e:	9303      	str	r3, [sp, #12]
   d5460:	68cb      	ldr	r3, [r1, #12]
   d5462:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d5464:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d5466:	7a0b      	ldrb	r3, [r1, #8]
   d5468:	9305      	str	r3, [sp, #20]
   d546a:	a901      	add	r1, sp, #4
   d546c:	f7ff f9ec 	bl	d4848 <hal_i2c_request_ex>
}
   d5470:	b007      	add	sp, #28
   d5472:	f85d fb04 	ldr.w	pc, [sp], #4

000d5476 <_ZN7TwoWire11requestFromEhjh>:
{
   d5476:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d5478:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d547a:	f88d 1000 	strb.w	r1, [sp]
   d547e:	f04f 0164 	mov.w	r1, #100	; 0x64
   d5482:	9103      	str	r1, [sp, #12]
   d5484:	bf18      	it	ne
   d5486:	2301      	movne	r3, #1
   d5488:	4669      	mov	r1, sp
    size_ = size;
   d548a:	9201      	str	r2, [sp, #4]
   d548c:	f88d 3008 	strb.w	r3, [sp, #8]
   d5490:	f7ff ffda 	bl	d5448 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d5494:	b005      	add	sp, #20
   d5496:	f85d fb04 	ldr.w	pc, [sp], #4

000d549a <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d549a:	2301      	movs	r3, #1
   d549c:	f7ff bfeb 	b.w	d5476 <_ZN7TwoWire11requestFromEhjh>

000d54a0 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d54a0:	7c00      	ldrb	r0, [r0, #16]
   d54a2:	2200      	movs	r2, #0
   d54a4:	f7ff b988 	b.w	d47b8 <hal_i2c_begin_transmission>

000d54a8 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d54a8:	b2c9      	uxtb	r1, r1
   d54aa:	f7ff bff9 	b.w	d54a0 <_ZN7TwoWire17beginTransmissionEh>

000d54ae <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d54ae:	7c00      	ldrb	r0, [r0, #16]
   d54b0:	2200      	movs	r2, #0
   d54b2:	f7ff b989 	b.w	d47c8 <hal_i2c_end_transmission>

000d54b6 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d54b6:	2101      	movs	r1, #1
   d54b8:	f7ff bff9 	b.w	d54ae <_ZN7TwoWire15endTransmissionEh>

000d54bc <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d54bc:	2200      	movs	r2, #0
   d54be:	6840      	ldr	r0, [r0, #4]
   d54c0:	4611      	mov	r1, r2
   d54c2:	f7ff ba8d 	b.w	d49e0 <network_ready>

000d54c6 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d54c6:	2200      	movs	r2, #0
   d54c8:	6840      	ldr	r0, [r0, #4]
   d54ca:	4611      	mov	r1, r2
   d54cc:	f7ff baa8 	b.w	d4a20 <network_listening>

000d54d0 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d54d0:	2200      	movs	r2, #0
   d54d2:	6840      	ldr	r0, [r0, #4]
   d54d4:	4611      	mov	r1, r2
   d54d6:	f7ff bab3 	b.w	d4a40 <network_get_listen_timeout>

000d54da <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d54da:	6840      	ldr	r0, [r0, #4]
   d54dc:	2200      	movs	r2, #0
   d54de:	f7ff baa7 	b.w	d4a30 <network_set_listen_timeout>

000d54e2 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d54e2:	6840      	ldr	r0, [r0, #4]
   d54e4:	2200      	movs	r2, #0
   d54e6:	f081 0101 	eor.w	r1, r1, #1
   d54ea:	f7ff ba91 	b.w	d4a10 <network_listen>

000d54ee <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d54ee:	2300      	movs	r3, #0
   d54f0:	6840      	ldr	r0, [r0, #4]
   d54f2:	461a      	mov	r2, r3
   d54f4:	4619      	mov	r1, r3
   d54f6:	f7ff ba83 	b.w	d4a00 <network_off>

000d54fa <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d54fa:	2200      	movs	r2, #0
   d54fc:	6840      	ldr	r0, [r0, #4]
   d54fe:	4611      	mov	r1, r2
   d5500:	f7ff ba5e 	b.w	d49c0 <network_connecting>

000d5504 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5504:	6840      	ldr	r0, [r0, #4]
   d5506:	2200      	movs	r2, #0
   d5508:	2102      	movs	r1, #2
   d550a:	f7ff ba61 	b.w	d49d0 <network_disconnect>

000d550e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d550e:	2300      	movs	r3, #0
   d5510:	6840      	ldr	r0, [r0, #4]
   d5512:	461a      	mov	r2, r3
   d5514:	f7ff ba4c 	b.w	d49b0 <network_connect>

000d5518 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5518:	4b02      	ldr	r3, [pc, #8]	; (d5524 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d551a:	2204      	movs	r2, #4
   d551c:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d551e:	4a02      	ldr	r2, [pc, #8]	; (d5528 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5520:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d5522:	4770      	bx	lr
   d5524:	2003e7c4 	.word	0x2003e7c4
   d5528:	000d63b8 	.word	0x000d63b8

000d552c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d552c:	2300      	movs	r3, #0
   d552e:	6840      	ldr	r0, [r0, #4]
   d5530:	461a      	mov	r2, r3
   d5532:	f7ff ba3d 	b.w	d49b0 <network_connect>

000d5536 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5536:	6840      	ldr	r0, [r0, #4]
   d5538:	2200      	movs	r2, #0
   d553a:	2102      	movs	r1, #2
   d553c:	f7ff ba48 	b.w	d49d0 <network_disconnect>

000d5540 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5540:	2200      	movs	r2, #0
   d5542:	6840      	ldr	r0, [r0, #4]
   d5544:	4611      	mov	r1, r2
   d5546:	f7ff ba3b 	b.w	d49c0 <network_connecting>

000d554a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d554a:	2200      	movs	r2, #0
   d554c:	6840      	ldr	r0, [r0, #4]
   d554e:	4611      	mov	r1, r2
   d5550:	f7ff ba46 	b.w	d49e0 <network_ready>

000d5554 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5554:	2300      	movs	r3, #0
   d5556:	6840      	ldr	r0, [r0, #4]
   d5558:	461a      	mov	r2, r3
   d555a:	4619      	mov	r1, r3
   d555c:	f7ff ba48 	b.w	d49f0 <network_on>

000d5560 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5560:	2300      	movs	r3, #0
   d5562:	6840      	ldr	r0, [r0, #4]
   d5564:	461a      	mov	r2, r3
   d5566:	4619      	mov	r1, r3
   d5568:	f7ff ba4a 	b.w	d4a00 <network_off>

000d556c <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d556c:	6840      	ldr	r0, [r0, #4]
   d556e:	2100      	movs	r1, #0
   d5570:	f7ff ba6e 	b.w	d4a50 <network_is_on>

000d5574 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d5574:	6840      	ldr	r0, [r0, #4]
   d5576:	2100      	movs	r1, #0
   d5578:	f7ff ba72 	b.w	d4a60 <network_is_off>

000d557c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d557c:	6840      	ldr	r0, [r0, #4]
   d557e:	2200      	movs	r2, #0
   d5580:	f081 0101 	eor.w	r1, r1, #1
   d5584:	f7ff ba44 	b.w	d4a10 <network_listen>

000d5588 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5588:	6840      	ldr	r0, [r0, #4]
   d558a:	2200      	movs	r2, #0
   d558c:	f7ff ba50 	b.w	d4a30 <network_set_listen_timeout>

000d5590 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5590:	2200      	movs	r2, #0
   d5592:	6840      	ldr	r0, [r0, #4]
   d5594:	4611      	mov	r1, r2
   d5596:	f7ff ba53 	b.w	d4a40 <network_get_listen_timeout>

000d559a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d559a:	2200      	movs	r2, #0
   d559c:	6840      	ldr	r0, [r0, #4]
   d559e:	4611      	mov	r1, r2
   d55a0:	f7ff ba3e 	b.w	d4a20 <network_listening>

000d55a4 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d55a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d55a8:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d55aa:	b095      	sub	sp, #84	; 0x54
   d55ac:	4616      	mov	r6, r2
   d55ae:	460d      	mov	r5, r1
   d55b0:	4607      	mov	r7, r0
    IPAddress addr;
   d55b2:	f7ff fdc3 	bl	d513c <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d55b6:	4621      	mov	r1, r4
   d55b8:	2218      	movs	r2, #24
   d55ba:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d55bc:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d55be:	f000 fe01 	bl	d61c4 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d55c2:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d55c4:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d55c8:	4621      	mov	r1, r4
   d55ca:	466b      	mov	r3, sp
   d55cc:	aa0c      	add	r2, sp, #48	; 0x30
   d55ce:	4630      	mov	r0, r6
   d55d0:	f7ff f85a 	bl	d4688 <netdb_getaddrinfo>
    if (!r) {
   d55d4:	4604      	mov	r4, r0
   d55d6:	2800      	cmp	r0, #0
   d55d8:	d14c      	bne.n	d5674 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d55da:	4602      	mov	r2, r0
   d55dc:	2101      	movs	r1, #1
   d55de:	6868      	ldr	r0, [r5, #4]
   d55e0:	f7ff f9fe 	bl	d49e0 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d55e4:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d55e6:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d55e8:	4622      	mov	r2, r4
   d55ea:	6868      	ldr	r0, [r5, #4]
   d55ec:	f7ff f9f8 	bl	d49e0 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d55f0:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d55f2:	4681      	mov	r9, r0
        bool ok = false;
   d55f4:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d55f6:	2e00      	cmp	r6, #0
   d55f8:	d03c      	beq.n	d5674 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
   d55fa:	2900      	cmp	r1, #0
   d55fc:	d13a      	bne.n	d5674 <_ZN5spark12NetworkClass7resolveEPKc+0xd0>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d55fe:	6873      	ldr	r3, [r6, #4]
   d5600:	2b02      	cmp	r3, #2
   d5602:	d003      	beq.n	d560c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d5604:	2b0a      	cmp	r3, #10
   d5606:	d011      	beq.n	d562c <_ZN5spark12NetworkClass7resolveEPKc+0x88>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5608:	69f6      	ldr	r6, [r6, #28]
   d560a:	e7f4      	b.n	d55f6 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d560c:	f1b8 0f00 	cmp.w	r8, #0
   d5610:	d00a      	beq.n	d5628 <_ZN5spark12NetworkClass7resolveEPKc+0x84>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5612:	6971      	ldr	r1, [r6, #20]
        return *this = IPAddress(address);
   d5614:	a806      	add	r0, sp, #24
   d5616:	3104      	adds	r1, #4
class IPAddress : public Printable {
   d5618:	ad07      	add	r5, sp, #28
        return *this = IPAddress(address);
   d561a:	f7ff fdbd 	bl	d5198 <_ZN9IPAddressC1EPKh>
class IPAddress : public Printable {
   d561e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5620:	1d3c      	adds	r4, r7, #4
   d5622:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5624:	682b      	ldr	r3, [r5, #0]
   d5626:	7023      	strb	r3, [r4, #0]
    virtual ~IPAddress() {}
   d5628:	4641      	mov	r1, r8
   d562a:	e7ed      	b.n	d5608 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d562c:	f1b9 0f00 	cmp.w	r9, #0
   d5630:	d101      	bne.n	d5636 <_ZN5spark12NetworkClass7resolveEPKc+0x92>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d5632:	4649      	mov	r1, r9
   d5634:	e7e8      	b.n	d5608 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5636:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5638:	2210      	movs	r2, #16
   d563a:	a801      	add	r0, sp, #4
   d563c:	f000 fdc2 	bl	d61c4 <memset>
                    a.v = 6;
   d5640:	2306      	movs	r3, #6
   d5642:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5646:	ad01      	add	r5, sp, #4
   d5648:	f104 0308 	add.w	r3, r4, #8
   d564c:	3418      	adds	r4, #24
   d564e:	6818      	ldr	r0, [r3, #0]
   d5650:	6859      	ldr	r1, [r3, #4]
   d5652:	462a      	mov	r2, r5
   d5654:	c203      	stmia	r2!, {r0, r1}
   d5656:	3308      	adds	r3, #8
   d5658:	42a3      	cmp	r3, r4
   d565a:	4615      	mov	r5, r2
   d565c:	d1f7      	bne.n	d564e <_ZN5spark12NetworkClass7resolveEPKc+0xaa>
                    addr = IPAddress(a);
   d565e:	a901      	add	r1, sp, #4
   d5660:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d5662:	ad07      	add	r5, sp, #28
   d5664:	f7ff fd78 	bl	d5158 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5668:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d566a:	1d3c      	adds	r4, r7, #4
   d566c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d566e:	682b      	ldr	r3, [r5, #0]
   d5670:	7023      	strb	r3, [r4, #0]
   d5672:	e7de      	b.n	d5632 <_ZN5spark12NetworkClass7resolveEPKc+0x8e>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5674:	9800      	ldr	r0, [sp, #0]
   d5676:	f7fe ffff 	bl	d4678 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d567a:	4638      	mov	r0, r7
   d567c:	b015      	add	sp, #84	; 0x54
   d567e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d5684 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5684:	4b02      	ldr	r3, [pc, #8]	; (d5690 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5686:	4a03      	ldr	r2, [pc, #12]	; (d5694 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5688:	601a      	str	r2, [r3, #0]
   d568a:	2200      	movs	r2, #0
   d568c:	605a      	str	r2, [r3, #4]

} // spark
   d568e:	4770      	bx	lr
   d5690:	2003e7cc 	.word	0x2003e7cc
   d5694:	000d63f4 	.word	0x000d63f4

000d5698 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d5698:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d569a:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d569c:	d902      	bls.n	d56a4 <pinAvailable+0xc>
    return false;
   d569e:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d56a0:	b002      	add	sp, #8
   d56a2:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d56a4:	f1a0 030b 	sub.w	r3, r0, #11
   d56a8:	2b02      	cmp	r3, #2
   d56aa:	d81a      	bhi.n	d56e2 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d56ac:	4c17      	ldr	r4, [pc, #92]	; (d570c <pinAvailable+0x74>)
   d56ae:	7821      	ldrb	r1, [r4, #0]
   d56b0:	f3bf 8f5b 	dmb	ish
   d56b4:	f011 0101 	ands.w	r1, r1, #1
   d56b8:	d10b      	bne.n	d56d2 <pinAvailable+0x3a>
   d56ba:	4620      	mov	r0, r4
   d56bc:	9101      	str	r1, [sp, #4]
   d56be:	f7fe fcec 	bl	d409a <__cxa_guard_acquire>
   d56c2:	9901      	ldr	r1, [sp, #4]
   d56c4:	b128      	cbz	r0, d56d2 <pinAvailable+0x3a>
   d56c6:	4812      	ldr	r0, [pc, #72]	; (d5710 <pinAvailable+0x78>)
   d56c8:	f7ff fa36 	bl	d4b38 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d56cc:	4620      	mov	r0, r4
   d56ce:	f7fe fce9 	bl	d40a4 <__cxa_guard_release>
   d56d2:	4b0f      	ldr	r3, [pc, #60]	; (d5710 <pinAvailable+0x78>)
   d56d4:	7818      	ldrb	r0, [r3, #0]
   d56d6:	f7ff f8ef 	bl	d48b8 <hal_spi_is_enabled>
   d56da:	2800      	cmp	r0, #0
   d56dc:	d1df      	bne.n	d569e <pinAvailable+0x6>
  return true; // 'pin' is available
   d56de:	2001      	movs	r0, #1
   d56e0:	e7de      	b.n	d56a0 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d56e2:	2801      	cmp	r0, #1
   d56e4:	d809      	bhi.n	d56fa <pinAvailable+0x62>
   d56e6:	f000 f86b 	bl	d57c0 <_Z19__fetch_global_Wirev>
   d56ea:	2100      	movs	r1, #0
   d56ec:	7c00      	ldrb	r0, [r0, #16]
   d56ee:	f7ff f89b 	bl	d4828 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d56f2:	f080 0001 	eor.w	r0, r0, #1
   d56f6:	b2c0      	uxtb	r0, r0
   d56f8:	e7d2      	b.n	d56a0 <pinAvailable+0x8>
   d56fa:	3809      	subs	r0, #9
   d56fc:	2801      	cmp	r0, #1
   d56fe:	d8ee      	bhi.n	d56de <pinAvailable+0x46>
   d5700:	f7ff fe34 	bl	d536c <_Z22__fetch_global_Serial1v>
   d5704:	7c00      	ldrb	r0, [r0, #16]
   d5706:	f7ff f83f 	bl	d4788 <hal_usart_is_enabled>
   d570a:	e7f2      	b.n	d56f2 <pinAvailable+0x5a>
   d570c:	2003e644 	.word	0x2003e644
   d5710:	2003e648 	.word	0x2003e648

000d5714 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d5714:	2823      	cmp	r0, #35	; 0x23
{
   d5716:	b538      	push	{r3, r4, r5, lr}
   d5718:	4604      	mov	r4, r0
   d571a:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d571c:	d80a      	bhi.n	d5734 <pinMode+0x20>
   d571e:	29ff      	cmp	r1, #255	; 0xff
   d5720:	d008      	beq.n	d5734 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d5722:	f7ff ffb9 	bl	d5698 <pinAvailable>
   d5726:	b128      	cbz	r0, d5734 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d5728:	4629      	mov	r1, r5
   d572a:	4620      	mov	r0, r4
}
   d572c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d5730:	f7fe bfb2 	b.w	d4698 <HAL_Pin_Mode>
}
   d5734:	bd38      	pop	{r3, r4, r5, pc}

000d5736 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5736:	b538      	push	{r3, r4, r5, lr}
   d5738:	4604      	mov	r4, r0
   d573a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d573c:	f7fe ffb4 	bl	d46a8 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5740:	28ff      	cmp	r0, #255	; 0xff
   d5742:	d010      	beq.n	d5766 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d5744:	2806      	cmp	r0, #6
   d5746:	d804      	bhi.n	d5752 <digitalWrite+0x1c>
   d5748:	234d      	movs	r3, #77	; 0x4d
   d574a:	fa23 f000 	lsr.w	r0, r3, r0
   d574e:	07c3      	lsls	r3, r0, #31
   d5750:	d409      	bmi.n	d5766 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5752:	4620      	mov	r0, r4
   d5754:	f7ff ffa0 	bl	d5698 <pinAvailable>
   d5758:	b128      	cbz	r0, d5766 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d575a:	4629      	mov	r1, r5
   d575c:	4620      	mov	r0, r4
}
   d575e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d5762:	f7fe bfa9 	b.w	d46b8 <HAL_GPIO_Write>
}
   d5766:	bd38      	pop	{r3, r4, r5, pc}

000d5768 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d5768:	b510      	push	{r4, lr}
   d576a:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d576c:	f7fe ff9c 	bl	d46a8 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d5770:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d5772:	b2db      	uxtb	r3, r3
   d5774:	2b01      	cmp	r3, #1
   d5776:	d908      	bls.n	d578a <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d5778:	4620      	mov	r0, r4
   d577a:	f7ff ff8d 	bl	d5698 <pinAvailable>
   d577e:	b120      	cbz	r0, d578a <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d5780:	4620      	mov	r0, r4
}
   d5782:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d5786:	f7fe bf9f 	b.w	d46c8 <HAL_GPIO_Read>
}
   d578a:	2000      	movs	r0, #0
   d578c:	bd10      	pop	{r4, pc}
	...

000d5790 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d5790:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d5792:	2300      	movs	r3, #0
   d5794:	2520      	movs	r5, #32
   d5796:	8043      	strh	r3, [r0, #2]
   d5798:	2314      	movs	r3, #20
{
   d579a:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d579c:	8003      	strh	r3, [r0, #0]
   d579e:	6085      	str	r5, [r0, #8]
   d57a0:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d57a2:	4906      	ldr	r1, [pc, #24]	; (d57bc <_Z17acquireWireBufferv+0x2c>)
   d57a4:	4628      	mov	r0, r5
   d57a6:	f000 f83a 	bl	d581e <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d57aa:	4904      	ldr	r1, [pc, #16]	; (d57bc <_Z17acquireWireBufferv+0x2c>)
	};
   d57ac:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d57ae:	4628      	mov	r0, r5
   d57b0:	f000 f835 	bl	d581e <_ZnajRKSt9nothrow_t>
	};
   d57b4:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d57b6:	4620      	mov	r0, r4
   d57b8:	bd38      	pop	{r3, r4, r5, pc}
   d57ba:	bf00      	nop
   d57bc:	000d6428 	.word	0x000d6428

000d57c0 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d57c0:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d57c2:	4d0f      	ldr	r5, [pc, #60]	; (d5800 <_Z19__fetch_global_Wirev+0x40>)
   d57c4:	7829      	ldrb	r1, [r5, #0]
   d57c6:	f3bf 8f5b 	dmb	ish
   d57ca:	f011 0401 	ands.w	r4, r1, #1
{
   d57ce:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d57d0:	d113      	bne.n	d57fa <_Z19__fetch_global_Wirev+0x3a>
   d57d2:	4628      	mov	r0, r5
   d57d4:	f7fe fc61 	bl	d409a <__cxa_guard_acquire>
   d57d8:	b178      	cbz	r0, d57fa <_Z19__fetch_global_Wirev+0x3a>
   d57da:	a801      	add	r0, sp, #4
   d57dc:	f7ff ffd8 	bl	d5790 <_Z17acquireWireBufferv>
   d57e0:	aa01      	add	r2, sp, #4
   d57e2:	4621      	mov	r1, r4
   d57e4:	4807      	ldr	r0, [pc, #28]	; (d5804 <_Z19__fetch_global_Wirev+0x44>)
   d57e6:	f7ff fe17 	bl	d5418 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d57ea:	4628      	mov	r0, r5
   d57ec:	f7fe fc5a 	bl	d40a4 <__cxa_guard_release>
   d57f0:	4a05      	ldr	r2, [pc, #20]	; (d5808 <_Z19__fetch_global_Wirev+0x48>)
   d57f2:	4906      	ldr	r1, [pc, #24]	; (d580c <_Z19__fetch_global_Wirev+0x4c>)
   d57f4:	4803      	ldr	r0, [pc, #12]	; (d5804 <_Z19__fetch_global_Wirev+0x44>)
   d57f6:	f000 f80b 	bl	d5810 <__aeabi_atexit>
	return wire;
}
   d57fa:	4802      	ldr	r0, [pc, #8]	; (d5804 <_Z19__fetch_global_Wirev+0x44>)
   d57fc:	b007      	add	sp, #28
   d57fe:	bd30      	pop	{r4, r5, pc}
   d5800:	2003e7d8 	.word	0x2003e7d8
   d5804:	2003e7dc 	.word	0x2003e7dc
   d5808:	2003e608 	.word	0x2003e608
   d580c:	000d53c1 	.word	0x000d53c1

000d5810 <__aeabi_atexit>:
   d5810:	460b      	mov	r3, r1
   d5812:	4601      	mov	r1, r0
   d5814:	4618      	mov	r0, r3
   d5816:	f000 bcb9 	b.w	d618c <__cxa_atexit>

000d581a <_ZdlPvj>:
   d581a:	f7fe bc3c 	b.w	d4096 <_ZdlPv>

000d581e <_ZnajRKSt9nothrow_t>:
   d581e:	f7fe bc38 	b.w	d4092 <_Znaj>
	...

000d5824 <__aeabi_drsub>:
   d5824:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d5828:	e002      	b.n	d5830 <__adddf3>
   d582a:	bf00      	nop

000d582c <__aeabi_dsub>:
   d582c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d5830 <__adddf3>:
   d5830:	b530      	push	{r4, r5, lr}
   d5832:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d5836:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d583a:	ea94 0f05 	teq	r4, r5
   d583e:	bf08      	it	eq
   d5840:	ea90 0f02 	teqeq	r0, r2
   d5844:	bf1f      	itttt	ne
   d5846:	ea54 0c00 	orrsne.w	ip, r4, r0
   d584a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d584e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d5852:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5856:	f000 80e2 	beq.w	d5a1e <__adddf3+0x1ee>
   d585a:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d585e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d5862:	bfb8      	it	lt
   d5864:	426d      	neglt	r5, r5
   d5866:	dd0c      	ble.n	d5882 <__adddf3+0x52>
   d5868:	442c      	add	r4, r5
   d586a:	ea80 0202 	eor.w	r2, r0, r2
   d586e:	ea81 0303 	eor.w	r3, r1, r3
   d5872:	ea82 0000 	eor.w	r0, r2, r0
   d5876:	ea83 0101 	eor.w	r1, r3, r1
   d587a:	ea80 0202 	eor.w	r2, r0, r2
   d587e:	ea81 0303 	eor.w	r3, r1, r3
   d5882:	2d36      	cmp	r5, #54	; 0x36
   d5884:	bf88      	it	hi
   d5886:	bd30      	pophi	{r4, r5, pc}
   d5888:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d588c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5890:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d5894:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d5898:	d002      	beq.n	d58a0 <__adddf3+0x70>
   d589a:	4240      	negs	r0, r0
   d589c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d58a0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d58a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d58a8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d58ac:	d002      	beq.n	d58b4 <__adddf3+0x84>
   d58ae:	4252      	negs	r2, r2
   d58b0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d58b4:	ea94 0f05 	teq	r4, r5
   d58b8:	f000 80a7 	beq.w	d5a0a <__adddf3+0x1da>
   d58bc:	f1a4 0401 	sub.w	r4, r4, #1
   d58c0:	f1d5 0e20 	rsbs	lr, r5, #32
   d58c4:	db0d      	blt.n	d58e2 <__adddf3+0xb2>
   d58c6:	fa02 fc0e 	lsl.w	ip, r2, lr
   d58ca:	fa22 f205 	lsr.w	r2, r2, r5
   d58ce:	1880      	adds	r0, r0, r2
   d58d0:	f141 0100 	adc.w	r1, r1, #0
   d58d4:	fa03 f20e 	lsl.w	r2, r3, lr
   d58d8:	1880      	adds	r0, r0, r2
   d58da:	fa43 f305 	asr.w	r3, r3, r5
   d58de:	4159      	adcs	r1, r3
   d58e0:	e00e      	b.n	d5900 <__adddf3+0xd0>
   d58e2:	f1a5 0520 	sub.w	r5, r5, #32
   d58e6:	f10e 0e20 	add.w	lr, lr, #32
   d58ea:	2a01      	cmp	r2, #1
   d58ec:	fa03 fc0e 	lsl.w	ip, r3, lr
   d58f0:	bf28      	it	cs
   d58f2:	f04c 0c02 	orrcs.w	ip, ip, #2
   d58f6:	fa43 f305 	asr.w	r3, r3, r5
   d58fa:	18c0      	adds	r0, r0, r3
   d58fc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d5900:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5904:	d507      	bpl.n	d5916 <__adddf3+0xe6>
   d5906:	f04f 0e00 	mov.w	lr, #0
   d590a:	f1dc 0c00 	rsbs	ip, ip, #0
   d590e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d5912:	eb6e 0101 	sbc.w	r1, lr, r1
   d5916:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d591a:	d31b      	bcc.n	d5954 <__adddf3+0x124>
   d591c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d5920:	d30c      	bcc.n	d593c <__adddf3+0x10c>
   d5922:	0849      	lsrs	r1, r1, #1
   d5924:	ea5f 0030 	movs.w	r0, r0, rrx
   d5928:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d592c:	f104 0401 	add.w	r4, r4, #1
   d5930:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d5934:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d5938:	f080 809a 	bcs.w	d5a70 <__adddf3+0x240>
   d593c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d5940:	bf08      	it	eq
   d5942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5946:	f150 0000 	adcs.w	r0, r0, #0
   d594a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d594e:	ea41 0105 	orr.w	r1, r1, r5
   d5952:	bd30      	pop	{r4, r5, pc}
   d5954:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d5958:	4140      	adcs	r0, r0
   d595a:	eb41 0101 	adc.w	r1, r1, r1
   d595e:	3c01      	subs	r4, #1
   d5960:	bf28      	it	cs
   d5962:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d5966:	d2e9      	bcs.n	d593c <__adddf3+0x10c>
   d5968:	f091 0f00 	teq	r1, #0
   d596c:	bf04      	itt	eq
   d596e:	4601      	moveq	r1, r0
   d5970:	2000      	moveq	r0, #0
   d5972:	fab1 f381 	clz	r3, r1
   d5976:	bf08      	it	eq
   d5978:	3320      	addeq	r3, #32
   d597a:	f1a3 030b 	sub.w	r3, r3, #11
   d597e:	f1b3 0220 	subs.w	r2, r3, #32
   d5982:	da0c      	bge.n	d599e <__adddf3+0x16e>
   d5984:	320c      	adds	r2, #12
   d5986:	dd08      	ble.n	d599a <__adddf3+0x16a>
   d5988:	f102 0c14 	add.w	ip, r2, #20
   d598c:	f1c2 020c 	rsb	r2, r2, #12
   d5990:	fa01 f00c 	lsl.w	r0, r1, ip
   d5994:	fa21 f102 	lsr.w	r1, r1, r2
   d5998:	e00c      	b.n	d59b4 <__adddf3+0x184>
   d599a:	f102 0214 	add.w	r2, r2, #20
   d599e:	bfd8      	it	le
   d59a0:	f1c2 0c20 	rsble	ip, r2, #32
   d59a4:	fa01 f102 	lsl.w	r1, r1, r2
   d59a8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d59ac:	bfdc      	itt	le
   d59ae:	ea41 010c 	orrle.w	r1, r1, ip
   d59b2:	4090      	lslle	r0, r2
   d59b4:	1ae4      	subs	r4, r4, r3
   d59b6:	bfa2      	ittt	ge
   d59b8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d59bc:	4329      	orrge	r1, r5
   d59be:	bd30      	popge	{r4, r5, pc}
   d59c0:	ea6f 0404 	mvn.w	r4, r4
   d59c4:	3c1f      	subs	r4, #31
   d59c6:	da1c      	bge.n	d5a02 <__adddf3+0x1d2>
   d59c8:	340c      	adds	r4, #12
   d59ca:	dc0e      	bgt.n	d59ea <__adddf3+0x1ba>
   d59cc:	f104 0414 	add.w	r4, r4, #20
   d59d0:	f1c4 0220 	rsb	r2, r4, #32
   d59d4:	fa20 f004 	lsr.w	r0, r0, r4
   d59d8:	fa01 f302 	lsl.w	r3, r1, r2
   d59dc:	ea40 0003 	orr.w	r0, r0, r3
   d59e0:	fa21 f304 	lsr.w	r3, r1, r4
   d59e4:	ea45 0103 	orr.w	r1, r5, r3
   d59e8:	bd30      	pop	{r4, r5, pc}
   d59ea:	f1c4 040c 	rsb	r4, r4, #12
   d59ee:	f1c4 0220 	rsb	r2, r4, #32
   d59f2:	fa20 f002 	lsr.w	r0, r0, r2
   d59f6:	fa01 f304 	lsl.w	r3, r1, r4
   d59fa:	ea40 0003 	orr.w	r0, r0, r3
   d59fe:	4629      	mov	r1, r5
   d5a00:	bd30      	pop	{r4, r5, pc}
   d5a02:	fa21 f004 	lsr.w	r0, r1, r4
   d5a06:	4629      	mov	r1, r5
   d5a08:	bd30      	pop	{r4, r5, pc}
   d5a0a:	f094 0f00 	teq	r4, #0
   d5a0e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d5a12:	bf06      	itte	eq
   d5a14:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d5a18:	3401      	addeq	r4, #1
   d5a1a:	3d01      	subne	r5, #1
   d5a1c:	e74e      	b.n	d58bc <__adddf3+0x8c>
   d5a1e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5a22:	bf18      	it	ne
   d5a24:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d5a28:	d029      	beq.n	d5a7e <__adddf3+0x24e>
   d5a2a:	ea94 0f05 	teq	r4, r5
   d5a2e:	bf08      	it	eq
   d5a30:	ea90 0f02 	teqeq	r0, r2
   d5a34:	d005      	beq.n	d5a42 <__adddf3+0x212>
   d5a36:	ea54 0c00 	orrs.w	ip, r4, r0
   d5a3a:	bf04      	itt	eq
   d5a3c:	4619      	moveq	r1, r3
   d5a3e:	4610      	moveq	r0, r2
   d5a40:	bd30      	pop	{r4, r5, pc}
   d5a42:	ea91 0f03 	teq	r1, r3
   d5a46:	bf1e      	ittt	ne
   d5a48:	2100      	movne	r1, #0
   d5a4a:	2000      	movne	r0, #0
   d5a4c:	bd30      	popne	{r4, r5, pc}
   d5a4e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d5a52:	d105      	bne.n	d5a60 <__adddf3+0x230>
   d5a54:	0040      	lsls	r0, r0, #1
   d5a56:	4149      	adcs	r1, r1
   d5a58:	bf28      	it	cs
   d5a5a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d5a5e:	bd30      	pop	{r4, r5, pc}
   d5a60:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d5a64:	bf3c      	itt	cc
   d5a66:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d5a6a:	bd30      	popcc	{r4, r5, pc}
   d5a6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5a70:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d5a74:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5a78:	f04f 0000 	mov.w	r0, #0
   d5a7c:	bd30      	pop	{r4, r5, pc}
   d5a7e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d5a82:	bf1a      	itte	ne
   d5a84:	4619      	movne	r1, r3
   d5a86:	4610      	movne	r0, r2
   d5a88:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d5a8c:	bf1c      	itt	ne
   d5a8e:	460b      	movne	r3, r1
   d5a90:	4602      	movne	r2, r0
   d5a92:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5a96:	bf06      	itte	eq
   d5a98:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d5a9c:	ea91 0f03 	teqeq	r1, r3
   d5aa0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d5aa4:	bd30      	pop	{r4, r5, pc}
   d5aa6:	bf00      	nop

000d5aa8 <__aeabi_ui2d>:
   d5aa8:	f090 0f00 	teq	r0, #0
   d5aac:	bf04      	itt	eq
   d5aae:	2100      	moveq	r1, #0
   d5ab0:	4770      	bxeq	lr
   d5ab2:	b530      	push	{r4, r5, lr}
   d5ab4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5ab8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5abc:	f04f 0500 	mov.w	r5, #0
   d5ac0:	f04f 0100 	mov.w	r1, #0
   d5ac4:	e750      	b.n	d5968 <__adddf3+0x138>
   d5ac6:	bf00      	nop

000d5ac8 <__aeabi_i2d>:
   d5ac8:	f090 0f00 	teq	r0, #0
   d5acc:	bf04      	itt	eq
   d5ace:	2100      	moveq	r1, #0
   d5ad0:	4770      	bxeq	lr
   d5ad2:	b530      	push	{r4, r5, lr}
   d5ad4:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5ad8:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5adc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d5ae0:	bf48      	it	mi
   d5ae2:	4240      	negmi	r0, r0
   d5ae4:	f04f 0100 	mov.w	r1, #0
   d5ae8:	e73e      	b.n	d5968 <__adddf3+0x138>
   d5aea:	bf00      	nop

000d5aec <__aeabi_f2d>:
   d5aec:	0042      	lsls	r2, r0, #1
   d5aee:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d5af2:	ea4f 0131 	mov.w	r1, r1, rrx
   d5af6:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d5afa:	bf1f      	itttt	ne
   d5afc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d5b00:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d5b04:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d5b08:	4770      	bxne	lr
   d5b0a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d5b0e:	bf08      	it	eq
   d5b10:	4770      	bxeq	lr
   d5b12:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d5b16:	bf04      	itt	eq
   d5b18:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d5b1c:	4770      	bxeq	lr
   d5b1e:	b530      	push	{r4, r5, lr}
   d5b20:	f44f 7460 	mov.w	r4, #896	; 0x380
   d5b24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d5b28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5b2c:	e71c      	b.n	d5968 <__adddf3+0x138>
   d5b2e:	bf00      	nop

000d5b30 <__aeabi_ul2d>:
   d5b30:	ea50 0201 	orrs.w	r2, r0, r1
   d5b34:	bf08      	it	eq
   d5b36:	4770      	bxeq	lr
   d5b38:	b530      	push	{r4, r5, lr}
   d5b3a:	f04f 0500 	mov.w	r5, #0
   d5b3e:	e00a      	b.n	d5b56 <__aeabi_l2d+0x16>

000d5b40 <__aeabi_l2d>:
   d5b40:	ea50 0201 	orrs.w	r2, r0, r1
   d5b44:	bf08      	it	eq
   d5b46:	4770      	bxeq	lr
   d5b48:	b530      	push	{r4, r5, lr}
   d5b4a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d5b4e:	d502      	bpl.n	d5b56 <__aeabi_l2d+0x16>
   d5b50:	4240      	negs	r0, r0
   d5b52:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d5b56:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d5b5a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d5b5e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d5b62:	f43f aed8 	beq.w	d5916 <__adddf3+0xe6>
   d5b66:	f04f 0203 	mov.w	r2, #3
   d5b6a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5b6e:	bf18      	it	ne
   d5b70:	3203      	addne	r2, #3
   d5b72:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d5b76:	bf18      	it	ne
   d5b78:	3203      	addne	r2, #3
   d5b7a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d5b7e:	f1c2 0320 	rsb	r3, r2, #32
   d5b82:	fa00 fc03 	lsl.w	ip, r0, r3
   d5b86:	fa20 f002 	lsr.w	r0, r0, r2
   d5b8a:	fa01 fe03 	lsl.w	lr, r1, r3
   d5b8e:	ea40 000e 	orr.w	r0, r0, lr
   d5b92:	fa21 f102 	lsr.w	r1, r1, r2
   d5b96:	4414      	add	r4, r2
   d5b98:	e6bd      	b.n	d5916 <__adddf3+0xe6>
   d5b9a:	bf00      	nop

000d5b9c <__aeabi_dmul>:
   d5b9c:	b570      	push	{r4, r5, r6, lr}
   d5b9e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5ba2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5ba6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5baa:	bf1d      	ittte	ne
   d5bac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5bb0:	ea94 0f0c 	teqne	r4, ip
   d5bb4:	ea95 0f0c 	teqne	r5, ip
   d5bb8:	f000 f8de 	bleq	d5d78 <__aeabi_dmul+0x1dc>
   d5bbc:	442c      	add	r4, r5
   d5bbe:	ea81 0603 	eor.w	r6, r1, r3
   d5bc2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d5bc6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d5bca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d5bce:	bf18      	it	ne
   d5bd0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d5bd4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5bd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5bdc:	d038      	beq.n	d5c50 <__aeabi_dmul+0xb4>
   d5bde:	fba0 ce02 	umull	ip, lr, r0, r2
   d5be2:	f04f 0500 	mov.w	r5, #0
   d5be6:	fbe1 e502 	umlal	lr, r5, r1, r2
   d5bea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d5bee:	fbe0 e503 	umlal	lr, r5, r0, r3
   d5bf2:	f04f 0600 	mov.w	r6, #0
   d5bf6:	fbe1 5603 	umlal	r5, r6, r1, r3
   d5bfa:	f09c 0f00 	teq	ip, #0
   d5bfe:	bf18      	it	ne
   d5c00:	f04e 0e01 	orrne.w	lr, lr, #1
   d5c04:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d5c08:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d5c0c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d5c10:	d204      	bcs.n	d5c1c <__aeabi_dmul+0x80>
   d5c12:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d5c16:	416d      	adcs	r5, r5
   d5c18:	eb46 0606 	adc.w	r6, r6, r6
   d5c1c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d5c20:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d5c24:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d5c28:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d5c2c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d5c30:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5c34:	bf88      	it	hi
   d5c36:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5c3a:	d81e      	bhi.n	d5c7a <__aeabi_dmul+0xde>
   d5c3c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d5c40:	bf08      	it	eq
   d5c42:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d5c46:	f150 0000 	adcs.w	r0, r0, #0
   d5c4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5c4e:	bd70      	pop	{r4, r5, r6, pc}
   d5c50:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d5c54:	ea46 0101 	orr.w	r1, r6, r1
   d5c58:	ea40 0002 	orr.w	r0, r0, r2
   d5c5c:	ea81 0103 	eor.w	r1, r1, r3
   d5c60:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d5c64:	bfc2      	ittt	gt
   d5c66:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5c6a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5c6e:	bd70      	popgt	{r4, r5, r6, pc}
   d5c70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5c74:	f04f 0e00 	mov.w	lr, #0
   d5c78:	3c01      	subs	r4, #1
   d5c7a:	f300 80ab 	bgt.w	d5dd4 <__aeabi_dmul+0x238>
   d5c7e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d5c82:	bfde      	ittt	le
   d5c84:	2000      	movle	r0, #0
   d5c86:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d5c8a:	bd70      	pople	{r4, r5, r6, pc}
   d5c8c:	f1c4 0400 	rsb	r4, r4, #0
   d5c90:	3c20      	subs	r4, #32
   d5c92:	da35      	bge.n	d5d00 <__aeabi_dmul+0x164>
   d5c94:	340c      	adds	r4, #12
   d5c96:	dc1b      	bgt.n	d5cd0 <__aeabi_dmul+0x134>
   d5c98:	f104 0414 	add.w	r4, r4, #20
   d5c9c:	f1c4 0520 	rsb	r5, r4, #32
   d5ca0:	fa00 f305 	lsl.w	r3, r0, r5
   d5ca4:	fa20 f004 	lsr.w	r0, r0, r4
   d5ca8:	fa01 f205 	lsl.w	r2, r1, r5
   d5cac:	ea40 0002 	orr.w	r0, r0, r2
   d5cb0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d5cb4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d5cb8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5cbc:	fa21 f604 	lsr.w	r6, r1, r4
   d5cc0:	eb42 0106 	adc.w	r1, r2, r6
   d5cc4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5cc8:	bf08      	it	eq
   d5cca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5cce:	bd70      	pop	{r4, r5, r6, pc}
   d5cd0:	f1c4 040c 	rsb	r4, r4, #12
   d5cd4:	f1c4 0520 	rsb	r5, r4, #32
   d5cd8:	fa00 f304 	lsl.w	r3, r0, r4
   d5cdc:	fa20 f005 	lsr.w	r0, r0, r5
   d5ce0:	fa01 f204 	lsl.w	r2, r1, r4
   d5ce4:	ea40 0002 	orr.w	r0, r0, r2
   d5ce8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5cec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d5cf0:	f141 0100 	adc.w	r1, r1, #0
   d5cf4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5cf8:	bf08      	it	eq
   d5cfa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5cfe:	bd70      	pop	{r4, r5, r6, pc}
   d5d00:	f1c4 0520 	rsb	r5, r4, #32
   d5d04:	fa00 f205 	lsl.w	r2, r0, r5
   d5d08:	ea4e 0e02 	orr.w	lr, lr, r2
   d5d0c:	fa20 f304 	lsr.w	r3, r0, r4
   d5d10:	fa01 f205 	lsl.w	r2, r1, r5
   d5d14:	ea43 0302 	orr.w	r3, r3, r2
   d5d18:	fa21 f004 	lsr.w	r0, r1, r4
   d5d1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5d20:	fa21 f204 	lsr.w	r2, r1, r4
   d5d24:	ea20 0002 	bic.w	r0, r0, r2
   d5d28:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d5d2c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d5d30:	bf08      	it	eq
   d5d32:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d5d36:	bd70      	pop	{r4, r5, r6, pc}
   d5d38:	f094 0f00 	teq	r4, #0
   d5d3c:	d10f      	bne.n	d5d5e <__aeabi_dmul+0x1c2>
   d5d3e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d5d42:	0040      	lsls	r0, r0, #1
   d5d44:	eb41 0101 	adc.w	r1, r1, r1
   d5d48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5d4c:	bf08      	it	eq
   d5d4e:	3c01      	subeq	r4, #1
   d5d50:	d0f7      	beq.n	d5d42 <__aeabi_dmul+0x1a6>
   d5d52:	ea41 0106 	orr.w	r1, r1, r6
   d5d56:	f095 0f00 	teq	r5, #0
   d5d5a:	bf18      	it	ne
   d5d5c:	4770      	bxne	lr
   d5d5e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d5d62:	0052      	lsls	r2, r2, #1
   d5d64:	eb43 0303 	adc.w	r3, r3, r3
   d5d68:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d5d6c:	bf08      	it	eq
   d5d6e:	3d01      	subeq	r5, #1
   d5d70:	d0f7      	beq.n	d5d62 <__aeabi_dmul+0x1c6>
   d5d72:	ea43 0306 	orr.w	r3, r3, r6
   d5d76:	4770      	bx	lr
   d5d78:	ea94 0f0c 	teq	r4, ip
   d5d7c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5d80:	bf18      	it	ne
   d5d82:	ea95 0f0c 	teqne	r5, ip
   d5d86:	d00c      	beq.n	d5da2 <__aeabi_dmul+0x206>
   d5d88:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5d8c:	bf18      	it	ne
   d5d8e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5d92:	d1d1      	bne.n	d5d38 <__aeabi_dmul+0x19c>
   d5d94:	ea81 0103 	eor.w	r1, r1, r3
   d5d98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5d9c:	f04f 0000 	mov.w	r0, #0
   d5da0:	bd70      	pop	{r4, r5, r6, pc}
   d5da2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5da6:	bf06      	itte	eq
   d5da8:	4610      	moveq	r0, r2
   d5daa:	4619      	moveq	r1, r3
   d5dac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5db0:	d019      	beq.n	d5de6 <__aeabi_dmul+0x24a>
   d5db2:	ea94 0f0c 	teq	r4, ip
   d5db6:	d102      	bne.n	d5dbe <__aeabi_dmul+0x222>
   d5db8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d5dbc:	d113      	bne.n	d5de6 <__aeabi_dmul+0x24a>
   d5dbe:	ea95 0f0c 	teq	r5, ip
   d5dc2:	d105      	bne.n	d5dd0 <__aeabi_dmul+0x234>
   d5dc4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d5dc8:	bf1c      	itt	ne
   d5dca:	4610      	movne	r0, r2
   d5dcc:	4619      	movne	r1, r3
   d5dce:	d10a      	bne.n	d5de6 <__aeabi_dmul+0x24a>
   d5dd0:	ea81 0103 	eor.w	r1, r1, r3
   d5dd4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d5dd8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5ddc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d5de0:	f04f 0000 	mov.w	r0, #0
   d5de4:	bd70      	pop	{r4, r5, r6, pc}
   d5de6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d5dea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d5dee:	bd70      	pop	{r4, r5, r6, pc}

000d5df0 <__aeabi_ddiv>:
   d5df0:	b570      	push	{r4, r5, r6, lr}
   d5df2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d5df6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d5dfa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d5dfe:	bf1d      	ittte	ne
   d5e00:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d5e04:	ea94 0f0c 	teqne	r4, ip
   d5e08:	ea95 0f0c 	teqne	r5, ip
   d5e0c:	f000 f8a7 	bleq	d5f5e <__aeabi_ddiv+0x16e>
   d5e10:	eba4 0405 	sub.w	r4, r4, r5
   d5e14:	ea81 0e03 	eor.w	lr, r1, r3
   d5e18:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5e1c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d5e20:	f000 8088 	beq.w	d5f34 <__aeabi_ddiv+0x144>
   d5e24:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d5e28:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d5e2c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d5e30:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d5e34:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d5e38:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d5e3c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d5e40:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d5e44:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d5e48:	429d      	cmp	r5, r3
   d5e4a:	bf08      	it	eq
   d5e4c:	4296      	cmpeq	r6, r2
   d5e4e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d5e52:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d5e56:	d202      	bcs.n	d5e5e <__aeabi_ddiv+0x6e>
   d5e58:	085b      	lsrs	r3, r3, #1
   d5e5a:	ea4f 0232 	mov.w	r2, r2, rrx
   d5e5e:	1ab6      	subs	r6, r6, r2
   d5e60:	eb65 0503 	sbc.w	r5, r5, r3
   d5e64:	085b      	lsrs	r3, r3, #1
   d5e66:	ea4f 0232 	mov.w	r2, r2, rrx
   d5e6a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d5e6e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d5e72:	ebb6 0e02 	subs.w	lr, r6, r2
   d5e76:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5e7a:	bf22      	ittt	cs
   d5e7c:	1ab6      	subcs	r6, r6, r2
   d5e7e:	4675      	movcs	r5, lr
   d5e80:	ea40 000c 	orrcs.w	r0, r0, ip
   d5e84:	085b      	lsrs	r3, r3, #1
   d5e86:	ea4f 0232 	mov.w	r2, r2, rrx
   d5e8a:	ebb6 0e02 	subs.w	lr, r6, r2
   d5e8e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5e92:	bf22      	ittt	cs
   d5e94:	1ab6      	subcs	r6, r6, r2
   d5e96:	4675      	movcs	r5, lr
   d5e98:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d5e9c:	085b      	lsrs	r3, r3, #1
   d5e9e:	ea4f 0232 	mov.w	r2, r2, rrx
   d5ea2:	ebb6 0e02 	subs.w	lr, r6, r2
   d5ea6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5eaa:	bf22      	ittt	cs
   d5eac:	1ab6      	subcs	r6, r6, r2
   d5eae:	4675      	movcs	r5, lr
   d5eb0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d5eb4:	085b      	lsrs	r3, r3, #1
   d5eb6:	ea4f 0232 	mov.w	r2, r2, rrx
   d5eba:	ebb6 0e02 	subs.w	lr, r6, r2
   d5ebe:	eb75 0e03 	sbcs.w	lr, r5, r3
   d5ec2:	bf22      	ittt	cs
   d5ec4:	1ab6      	subcs	r6, r6, r2
   d5ec6:	4675      	movcs	r5, lr
   d5ec8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d5ecc:	ea55 0e06 	orrs.w	lr, r5, r6
   d5ed0:	d018      	beq.n	d5f04 <__aeabi_ddiv+0x114>
   d5ed2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d5ed6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d5eda:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d5ede:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d5ee2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d5ee6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d5eea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d5eee:	d1c0      	bne.n	d5e72 <__aeabi_ddiv+0x82>
   d5ef0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5ef4:	d10b      	bne.n	d5f0e <__aeabi_ddiv+0x11e>
   d5ef6:	ea41 0100 	orr.w	r1, r1, r0
   d5efa:	f04f 0000 	mov.w	r0, #0
   d5efe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d5f02:	e7b6      	b.n	d5e72 <__aeabi_ddiv+0x82>
   d5f04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d5f08:	bf04      	itt	eq
   d5f0a:	4301      	orreq	r1, r0
   d5f0c:	2000      	moveq	r0, #0
   d5f0e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d5f12:	bf88      	it	hi
   d5f14:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d5f18:	f63f aeaf 	bhi.w	d5c7a <__aeabi_dmul+0xde>
   d5f1c:	ebb5 0c03 	subs.w	ip, r5, r3
   d5f20:	bf04      	itt	eq
   d5f22:	ebb6 0c02 	subseq.w	ip, r6, r2
   d5f26:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d5f2a:	f150 0000 	adcs.w	r0, r0, #0
   d5f2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d5f32:	bd70      	pop	{r4, r5, r6, pc}
   d5f34:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d5f38:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d5f3c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d5f40:	bfc2      	ittt	gt
   d5f42:	ebd4 050c 	rsbsgt	r5, r4, ip
   d5f46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d5f4a:	bd70      	popgt	{r4, r5, r6, pc}
   d5f4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d5f50:	f04f 0e00 	mov.w	lr, #0
   d5f54:	3c01      	subs	r4, #1
   d5f56:	e690      	b.n	d5c7a <__aeabi_dmul+0xde>
   d5f58:	ea45 0e06 	orr.w	lr, r5, r6
   d5f5c:	e68d      	b.n	d5c7a <__aeabi_dmul+0xde>
   d5f5e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d5f62:	ea94 0f0c 	teq	r4, ip
   d5f66:	bf08      	it	eq
   d5f68:	ea95 0f0c 	teqeq	r5, ip
   d5f6c:	f43f af3b 	beq.w	d5de6 <__aeabi_dmul+0x24a>
   d5f70:	ea94 0f0c 	teq	r4, ip
   d5f74:	d10a      	bne.n	d5f8c <__aeabi_ddiv+0x19c>
   d5f76:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d5f7a:	f47f af34 	bne.w	d5de6 <__aeabi_dmul+0x24a>
   d5f7e:	ea95 0f0c 	teq	r5, ip
   d5f82:	f47f af25 	bne.w	d5dd0 <__aeabi_dmul+0x234>
   d5f86:	4610      	mov	r0, r2
   d5f88:	4619      	mov	r1, r3
   d5f8a:	e72c      	b.n	d5de6 <__aeabi_dmul+0x24a>
   d5f8c:	ea95 0f0c 	teq	r5, ip
   d5f90:	d106      	bne.n	d5fa0 <__aeabi_ddiv+0x1b0>
   d5f92:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d5f96:	f43f aefd 	beq.w	d5d94 <__aeabi_dmul+0x1f8>
   d5f9a:	4610      	mov	r0, r2
   d5f9c:	4619      	mov	r1, r3
   d5f9e:	e722      	b.n	d5de6 <__aeabi_dmul+0x24a>
   d5fa0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d5fa4:	bf18      	it	ne
   d5fa6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d5faa:	f47f aec5 	bne.w	d5d38 <__aeabi_dmul+0x19c>
   d5fae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d5fb2:	f47f af0d 	bne.w	d5dd0 <__aeabi_dmul+0x234>
   d5fb6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d5fba:	f47f aeeb 	bne.w	d5d94 <__aeabi_dmul+0x1f8>
   d5fbe:	e712      	b.n	d5de6 <__aeabi_dmul+0x24a>

000d5fc0 <__gedf2>:
   d5fc0:	f04f 3cff 	mov.w	ip, #4294967295
   d5fc4:	e006      	b.n	d5fd4 <__cmpdf2+0x4>
   d5fc6:	bf00      	nop

000d5fc8 <__ledf2>:
   d5fc8:	f04f 0c01 	mov.w	ip, #1
   d5fcc:	e002      	b.n	d5fd4 <__cmpdf2+0x4>
   d5fce:	bf00      	nop

000d5fd0 <__cmpdf2>:
   d5fd0:	f04f 0c01 	mov.w	ip, #1
   d5fd4:	f84d cd04 	str.w	ip, [sp, #-4]!
   d5fd8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d5fdc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d5fe0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d5fe4:	bf18      	it	ne
   d5fe6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d5fea:	d01b      	beq.n	d6024 <__cmpdf2+0x54>
   d5fec:	b001      	add	sp, #4
   d5fee:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d5ff2:	bf0c      	ite	eq
   d5ff4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d5ff8:	ea91 0f03 	teqne	r1, r3
   d5ffc:	bf02      	ittt	eq
   d5ffe:	ea90 0f02 	teqeq	r0, r2
   d6002:	2000      	moveq	r0, #0
   d6004:	4770      	bxeq	lr
   d6006:	f110 0f00 	cmn.w	r0, #0
   d600a:	ea91 0f03 	teq	r1, r3
   d600e:	bf58      	it	pl
   d6010:	4299      	cmppl	r1, r3
   d6012:	bf08      	it	eq
   d6014:	4290      	cmpeq	r0, r2
   d6016:	bf2c      	ite	cs
   d6018:	17d8      	asrcs	r0, r3, #31
   d601a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d601e:	f040 0001 	orr.w	r0, r0, #1
   d6022:	4770      	bx	lr
   d6024:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6028:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d602c:	d102      	bne.n	d6034 <__cmpdf2+0x64>
   d602e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6032:	d107      	bne.n	d6044 <__cmpdf2+0x74>
   d6034:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6038:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d603c:	d1d6      	bne.n	d5fec <__cmpdf2+0x1c>
   d603e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6042:	d0d3      	beq.n	d5fec <__cmpdf2+0x1c>
   d6044:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6048:	4770      	bx	lr
   d604a:	bf00      	nop

000d604c <__aeabi_cdrcmple>:
   d604c:	4684      	mov	ip, r0
   d604e:	4610      	mov	r0, r2
   d6050:	4662      	mov	r2, ip
   d6052:	468c      	mov	ip, r1
   d6054:	4619      	mov	r1, r3
   d6056:	4663      	mov	r3, ip
   d6058:	e000      	b.n	d605c <__aeabi_cdcmpeq>
   d605a:	bf00      	nop

000d605c <__aeabi_cdcmpeq>:
   d605c:	b501      	push	{r0, lr}
   d605e:	f7ff ffb7 	bl	d5fd0 <__cmpdf2>
   d6062:	2800      	cmp	r0, #0
   d6064:	bf48      	it	mi
   d6066:	f110 0f00 	cmnmi.w	r0, #0
   d606a:	bd01      	pop	{r0, pc}

000d606c <__aeabi_dcmpeq>:
   d606c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6070:	f7ff fff4 	bl	d605c <__aeabi_cdcmpeq>
   d6074:	bf0c      	ite	eq
   d6076:	2001      	moveq	r0, #1
   d6078:	2000      	movne	r0, #0
   d607a:	f85d fb08 	ldr.w	pc, [sp], #8
   d607e:	bf00      	nop

000d6080 <__aeabi_dcmplt>:
   d6080:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6084:	f7ff ffea 	bl	d605c <__aeabi_cdcmpeq>
   d6088:	bf34      	ite	cc
   d608a:	2001      	movcc	r0, #1
   d608c:	2000      	movcs	r0, #0
   d608e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6092:	bf00      	nop

000d6094 <__aeabi_dcmple>:
   d6094:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6098:	f7ff ffe0 	bl	d605c <__aeabi_cdcmpeq>
   d609c:	bf94      	ite	ls
   d609e:	2001      	movls	r0, #1
   d60a0:	2000      	movhi	r0, #0
   d60a2:	f85d fb08 	ldr.w	pc, [sp], #8
   d60a6:	bf00      	nop

000d60a8 <__aeabi_dcmpge>:
   d60a8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d60ac:	f7ff ffce 	bl	d604c <__aeabi_cdrcmple>
   d60b0:	bf94      	ite	ls
   d60b2:	2001      	movls	r0, #1
   d60b4:	2000      	movhi	r0, #0
   d60b6:	f85d fb08 	ldr.w	pc, [sp], #8
   d60ba:	bf00      	nop

000d60bc <__aeabi_dcmpgt>:
   d60bc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d60c0:	f7ff ffc4 	bl	d604c <__aeabi_cdrcmple>
   d60c4:	bf34      	ite	cc
   d60c6:	2001      	movcc	r0, #1
   d60c8:	2000      	movcs	r0, #0
   d60ca:	f85d fb08 	ldr.w	pc, [sp], #8
   d60ce:	bf00      	nop

000d60d0 <__aeabi_dcmpun>:
   d60d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d60d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d60d8:	d102      	bne.n	d60e0 <__aeabi_dcmpun+0x10>
   d60da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d60de:	d10a      	bne.n	d60f6 <__aeabi_dcmpun+0x26>
   d60e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d60e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d60e8:	d102      	bne.n	d60f0 <__aeabi_dcmpun+0x20>
   d60ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d60ee:	d102      	bne.n	d60f6 <__aeabi_dcmpun+0x26>
   d60f0:	f04f 0000 	mov.w	r0, #0
   d60f4:	4770      	bx	lr
   d60f6:	f04f 0001 	mov.w	r0, #1
   d60fa:	4770      	bx	lr

000d60fc <__aeabi_d2iz>:
   d60fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d6100:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6104:	d215      	bcs.n	d6132 <__aeabi_d2iz+0x36>
   d6106:	d511      	bpl.n	d612c <__aeabi_d2iz+0x30>
   d6108:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d610c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6110:	d912      	bls.n	d6138 <__aeabi_d2iz+0x3c>
   d6112:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6116:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d611a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d611e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6122:	fa23 f002 	lsr.w	r0, r3, r2
   d6126:	bf18      	it	ne
   d6128:	4240      	negne	r0, r0
   d612a:	4770      	bx	lr
   d612c:	f04f 0000 	mov.w	r0, #0
   d6130:	4770      	bx	lr
   d6132:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d6136:	d105      	bne.n	d6144 <__aeabi_d2iz+0x48>
   d6138:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   d613c:	bf08      	it	eq
   d613e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   d6142:	4770      	bx	lr
   d6144:	f04f 0000 	mov.w	r0, #0
   d6148:	4770      	bx	lr
   d614a:	bf00      	nop

000d614c <__aeabi_d2uiz>:
   d614c:	004a      	lsls	r2, r1, #1
   d614e:	d211      	bcs.n	d6174 <__aeabi_d2uiz+0x28>
   d6150:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d6154:	d211      	bcs.n	d617a <__aeabi_d2uiz+0x2e>
   d6156:	d50d      	bpl.n	d6174 <__aeabi_d2uiz+0x28>
   d6158:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d615c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d6160:	d40e      	bmi.n	d6180 <__aeabi_d2uiz+0x34>
   d6162:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6166:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d616a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d616e:	fa23 f002 	lsr.w	r0, r3, r2
   d6172:	4770      	bx	lr
   d6174:	f04f 0000 	mov.w	r0, #0
   d6178:	4770      	bx	lr
   d617a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d617e:	d102      	bne.n	d6186 <__aeabi_d2uiz+0x3a>
   d6180:	f04f 30ff 	mov.w	r0, #4294967295
   d6184:	4770      	bx	lr
   d6186:	f04f 0000 	mov.w	r0, #0
   d618a:	4770      	bx	lr

000d618c <__cxa_atexit>:
   d618c:	b510      	push	{r4, lr}
   d618e:	4c05      	ldr	r4, [pc, #20]	; (d61a4 <__cxa_atexit+0x18>)
   d6190:	4613      	mov	r3, r2
   d6192:	b12c      	cbz	r4, d61a0 <__cxa_atexit+0x14>
   d6194:	460a      	mov	r2, r1
   d6196:	4601      	mov	r1, r0
   d6198:	2002      	movs	r0, #2
   d619a:	f3af 8000 	nop.w
   d619e:	bd10      	pop	{r4, pc}
   d61a0:	4620      	mov	r0, r4
   d61a2:	e7fc      	b.n	d619e <__cxa_atexit+0x12>
   d61a4:	00000000 	.word	0x00000000

000d61a8 <memcpy>:
   d61a8:	440a      	add	r2, r1
   d61aa:	4291      	cmp	r1, r2
   d61ac:	f100 33ff 	add.w	r3, r0, #4294967295
   d61b0:	d100      	bne.n	d61b4 <memcpy+0xc>
   d61b2:	4770      	bx	lr
   d61b4:	b510      	push	{r4, lr}
   d61b6:	f811 4b01 	ldrb.w	r4, [r1], #1
   d61ba:	f803 4f01 	strb.w	r4, [r3, #1]!
   d61be:	4291      	cmp	r1, r2
   d61c0:	d1f9      	bne.n	d61b6 <memcpy+0xe>
   d61c2:	bd10      	pop	{r4, pc}

000d61c4 <memset>:
   d61c4:	4402      	add	r2, r0
   d61c6:	4603      	mov	r3, r0
   d61c8:	4293      	cmp	r3, r2
   d61ca:	d100      	bne.n	d61ce <memset+0xa>
   d61cc:	4770      	bx	lr
   d61ce:	f803 1b01 	strb.w	r1, [r3], #1
   d61d2:	e7f9      	b.n	d61c8 <memset+0x4>

000d61d4 <srand>:
   d61d4:	b538      	push	{r3, r4, r5, lr}
   d61d6:	4b0d      	ldr	r3, [pc, #52]	; (d620c <srand+0x38>)
   d61d8:	681d      	ldr	r5, [r3, #0]
   d61da:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d61dc:	4604      	mov	r4, r0
   d61de:	b97b      	cbnz	r3, d6200 <srand+0x2c>
   d61e0:	2018      	movs	r0, #24
   d61e2:	f7fe fc4d 	bl	d4a80 <malloc>
   d61e6:	4a0a      	ldr	r2, [pc, #40]	; (d6210 <srand+0x3c>)
   d61e8:	4b0a      	ldr	r3, [pc, #40]	; (d6214 <srand+0x40>)
   d61ea:	63a8      	str	r0, [r5, #56]	; 0x38
   d61ec:	e9c0 2300 	strd	r2, r3, [r0]
   d61f0:	4b09      	ldr	r3, [pc, #36]	; (d6218 <srand+0x44>)
   d61f2:	6083      	str	r3, [r0, #8]
   d61f4:	230b      	movs	r3, #11
   d61f6:	8183      	strh	r3, [r0, #12]
   d61f8:	2201      	movs	r2, #1
   d61fa:	2300      	movs	r3, #0
   d61fc:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6200:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d6202:	2200      	movs	r2, #0
   d6204:	611c      	str	r4, [r3, #16]
   d6206:	615a      	str	r2, [r3, #20]
   d6208:	bd38      	pop	{r3, r4, r5, pc}
   d620a:	bf00      	nop
   d620c:	2003e5a4 	.word	0x2003e5a4
   d6210:	abcd330e 	.word	0xabcd330e
   d6214:	e66d1234 	.word	0xe66d1234
   d6218:	0005deec 	.word	0x0005deec

000d621c <strlen>:
   d621c:	4603      	mov	r3, r0
   d621e:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6222:	2a00      	cmp	r2, #0
   d6224:	d1fb      	bne.n	d621e <strlen+0x2>
   d6226:	1a18      	subs	r0, r3, r0
   d6228:	3801      	subs	r0, #1
   d622a:	4770      	bx	lr

000d622c <strncpy>:
   d622c:	b510      	push	{r4, lr}
   d622e:	3901      	subs	r1, #1
   d6230:	4603      	mov	r3, r0
   d6232:	b132      	cbz	r2, d6242 <strncpy+0x16>
   d6234:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d6238:	f803 4b01 	strb.w	r4, [r3], #1
   d623c:	3a01      	subs	r2, #1
   d623e:	2c00      	cmp	r4, #0
   d6240:	d1f7      	bne.n	d6232 <strncpy+0x6>
   d6242:	441a      	add	r2, r3
   d6244:	2100      	movs	r1, #0
   d6246:	4293      	cmp	r3, r2
   d6248:	d100      	bne.n	d624c <strncpy+0x20>
   d624a:	bd10      	pop	{r4, pc}
   d624c:	f803 1b01 	strb.w	r1, [r3], #1
   d6250:	e7f9      	b.n	d6246 <strncpy+0x1a>

000d6252 <link_code_end>:
	...

000d6254 <dynalib_user>:
   d6254:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d6264:	0000 0000 3a58 2020 2000 0920 3a59 2020     ....X:  .  .Y:  
   d6274:	2000 0920 3a5a 2020 4c00 5349 4433 0048     .  .Z:  .LIS3DH.

000d6284 <_ZTV15Adafruit_LIS3DH>:
	...
   d628c:	40ab 000d 4159 000d 41b5 000d 4645 000d     .@..YA...A..EF..
   d629c:	41b9 000d                                   .A..

000d62a0 <_ZTVN5spark13EthernetClassE>:
	...
   d62a8:	4b0f 000d 4b05 000d 4afb 000d 4af1 000d     .K...K...J...J..
   d62b8:	4ae5 000d 4ad9 000d 556d 000d 5575 000d     .J...J..mU..uU..
   d62c8:	4acd 000d 4ac5 000d 4abb 000d 4ab1 000d     .J...J...J...J..
   d62d8:	55a5 000d                                   .U..

000d62dc <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d62dc:	0800 1810 2820 3830 616e 006e 6e69 0066     .... (08nan.inf.
   d62ec:	766f 0066 002e 7061 0070 5925 252d 2d6d     ovf...app.%Y-%m-
   d62fc:	6425 2554 3a48 4d25 253a 2553 007a 7361     %dT%H:%M:%S%z.as
   d630c:	7463 6d69 0065 0000                         ctime...

000d6314 <_ZTV9IPAddress>:
	...
   d631c:	50d9 000d 50c9 000d 50cb 000d               .P...P...P..

000d6328 <_ZTV9USBSerial>:
	...
   d6330:	51b9 000d 5221 000d 51f7 000d 4ce1 000d     .Q..!R...Q...L..
   d6340:	51e9 000d 51bb 000d 51cb 000d 521b 000d     .Q...Q...Q...R..
   d6350:	51db 000d 51b5 000d                         .Q...Q..

000d6358 <_ZTV11USARTSerial>:
	...
   d6360:	52c5 000d 5331 000d 5309 000d 4ce1 000d     .R..1S...S...L..
   d6370:	52d9 000d 52f5 000d 52e7 000d 5303 000d     .R...R...R...S..
   d6380:	52c7 000d 52cb 000d                         .R...R..

000d6388 <_ZTV7TwoWire>:
	...
   d6390:	53c1 000d 540b 000d 53e3 000d 53c3 000d     .S...T...S...S..
   d63a0:	53eb 000d 53f3 000d 53fb 000d 5403 000d     .S...S...S...T..

000d63b0 <_ZTVN5spark9WiFiClassE>:
	...
   d63b8:	550f 000d 5505 000d 54fb 000d 54bd 000d     .U...U...T...T..
   d63c8:	4f43 000d 54ef 000d 556d 000d 5575 000d     CO...T..mU..uU..
   d63d8:	54e3 000d 54db 000d 54d1 000d 54c7 000d     .T...T...T...T..
   d63e8:	55a5 000d                                   .U..

000d63ec <_ZTVN5spark12NetworkClassE>:
	...
   d63f4:	552d 000d 5537 000d 5541 000d 554b 000d     -U..7U..AU..KU..
   d6404:	5555 000d 5561 000d 556d 000d 5575 000d     UU..aU..mU..uU..
   d6414:	557d 000d 5589 000d 5591 000d 559b 000d     }U...U...U...U..
   d6424:	55a5 000d                                   .U..

000d6428 <_ZSt7nothrow>:
	...

000d6429 <link_const_variable_data_end>:
   d6429:	00          	.byte	0x00
	...

000d642c <link_constructors_location>:
   d642c:	000d4169 	.word	0x000d4169
   d6430:	000d4b19 	.word	0x000d4b19
   d6434:	000d4c59 	.word	0x000d4c59
   d6438:	000d4cb9 	.word	0x000d4cb9
   d643c:	000d4f51 	.word	0x000d4f51
   d6440:	000d4f61 	.word	0x000d4f61
   d6444:	000d4f89 	.word	0x000d4f89
   d6448:	000d5519 	.word	0x000d5519
   d644c:	000d5685 	.word	0x000d5685
